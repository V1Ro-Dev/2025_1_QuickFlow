services:
  gateway:
    build:
      context: ../backend
      dockerfile: gateway/Dockerfile
    container_name: gateway
    ports:
      - "8080:8080"  # HTTP Gateway порт
    volumes:
      - ../deploy/config:/config
    depends_on:
      post_service:
        condition: service_started
      user_service:
        condition: service_started
      file_service:
        condition: service_started
      messenger_service:
        condition: service_started
      redis:
        condition: service_started
      postgres:
        condition: service_started
    restart: always
    environment:
      RUNNING_IN_CONTAINER: true
    env_file:
      - .env

  file_service:
    build:
      context: ../backend
      dockerfile: file_service/Dockerfile
    container_name: file_service
    volumes:
      - ../deploy/config:/config
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_healthy
    restart: always
    environment:
      RUNNING_IN_CONTAINER: true
    env_file:
      - .env

  post_service:
    build:
      context: ../backend
      dockerfile: post_service/Dockerfile
    container_name: post_service
    volumes:
      - ../deploy/config:/config
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_healthy
    restart: always
    env_file:
      - .env

  user_service:
    build:
      context: ../backend
      dockerfile: user_service/Dockerfile
    container_name: user_service
    volumes:
      - ../deploy/config:/config
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
    restart: always
    env_file:
      - .env

  messenger_service:
    build:
      context: ../backend
      dockerfile: messenger_service/Dockerfile
    container_name: messenger_service
    volumes:
      - ../deploy/config:/config
    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_healthy
    restart: always
    env_file:
      - .env

  feedback_service:
    build:
      context: ../backend
      dockerfile: feedback_service/Dockerfile
    container_name: feedback_service
    volumes:
      - ../deploy/config:/config
    ports:
      - "8085:8085"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_healthy
    restart: always
    env_file:
      - .env

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: quickflow_admin
      POSTGRES_PASSWORD: SuperSecurePassword1
      POSTGRES_DB: quickflow_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../deploy/sql:/docker-entrypoint-initdb.d
    env_file:
      - .env

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf
    command: [ "redis-server", "/etc/redis/redis.conf" ]

  # s3 хранилище minio
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 10s
      retries: 3
    environment:
      - MINIO_MODE=production
      - MINIO_DATA_DIR=/data  # Путь хранения данных
      - MINIO_CONFIG_DIR=/root/.minio  # Путь конфигурации
    volumes:
      - minio_data:/data
      - minio_config:/root/.minio
    command: server /data --console-address ":9001"
    env_file:
      - .env

volumes:
  postgres_data:
  redis_data:
  minio_data:
  minio_config:
