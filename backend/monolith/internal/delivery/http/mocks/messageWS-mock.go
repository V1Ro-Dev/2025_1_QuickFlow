// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/http/message-handlerWS.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models2 "quickflow/monolith/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	websocket "github.com/gorilla/websocket"
)

// MockIWebSocketManager is a mock of IWebSocketManager interface.
type MockIWebSocketManager struct {
	ctrl     *gomock.Controller
	recorder *MockIWebSocketManagerMockRecorder
}

// MockIWebSocketManagerMockRecorder is the mock recorder for MockIWebSocketManager.
type MockIWebSocketManagerMockRecorder struct {
	mock *MockIWebSocketManager
}

// NewMockIWebSocketManager creates a new mock instance.
func NewMockIWebSocketManager(ctrl *gomock.Controller) *MockIWebSocketManager {
	mock := &MockIWebSocketManager{ctrl: ctrl}
	mock.recorder = &MockIWebSocketManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWebSocketManager) EXPECT() *MockIWebSocketManagerMockRecorder {
	return m.recorder
}

// AddConnection mocks base method.
func (m *MockIWebSocketManager) AddConnection(userId uuid.UUID, conn *websocket.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConnection", userId, conn)
}

// AddConnection indicates an expected call of AddConnection.
func (mr *MockIWebSocketManagerMockRecorder) AddConnection(userId, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConnection", reflect.TypeOf((*MockIWebSocketManager)(nil).AddConnection), userId, conn)
}

// HandlePing mocks base method.
func (m *MockIWebSocketManager) HandlePing(conn *websocket.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePing", conn)
}

// HandlePing indicates an expected call of HandlePing.
func (mr *MockIWebSocketManagerMockRecorder) HandlePing(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePing", reflect.TypeOf((*MockIWebSocketManager)(nil).HandlePing), conn)
}

// IsConnected mocks base method.
func (m *MockIWebSocketManager) IsConnected(userId uuid.UUID) (*websocket.Conn, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected", userId)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockIWebSocketManagerMockRecorder) IsConnected(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockIWebSocketManager)(nil).IsConnected), userId)
}

// RemoveAndCloseConnection mocks base method.
func (m *MockIWebSocketManager) RemoveAndCloseConnection(userId uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveAndCloseConnection", userId)
}

// RemoveAndCloseConnection indicates an expected call of RemoveAndCloseConnection.
func (mr *MockIWebSocketManagerMockRecorder) RemoveAndCloseConnection(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAndCloseConnection", reflect.TypeOf((*MockIWebSocketManager)(nil).RemoveAndCloseConnection), userId)
}

// SendMessageToChat mocks base method.
func (m *MockIWebSocketManager) SendMessageToChat(ctx context.Context, message models2.Message, publicSenderInfo models2.PublicUserInfo, chatParticipants []models2.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageToChat", ctx, message, publicSenderInfo, chatParticipants)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageToChat indicates an expected call of SendMessageToChat.
func (mr *MockIWebSocketManagerMockRecorder) SendMessageToChat(ctx, message, publicSenderInfo, chatParticipants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToChat", reflect.TypeOf((*MockIWebSocketManager)(nil).SendMessageToChat), ctx, message, publicSenderInfo, chatParticipants)
}
