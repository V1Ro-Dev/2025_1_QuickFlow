// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/http/chat-handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockChatUseCase is a mock of ChatUseCase interface.
type MockChatUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockChatUseCaseMockRecorder
}

// MockChatUseCaseMockRecorder is the mock recorder for MockChatUseCase.
type MockChatUseCaseMockRecorder struct {
	mock *MockChatUseCase
}

// NewMockChatUseCase creates a new mock instance.
func NewMockChatUseCase(ctrl *gomock.Controller) *MockChatUseCase {
	mock := &MockChatUseCase{ctrl: ctrl}
	mock.recorder = &MockChatUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatUseCase) EXPECT() *MockChatUseCaseMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChatUseCase) CreateChat(ctx context.Context, chatInfo models.ChatCreationInfo) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, chatInfo)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatUseCaseMockRecorder) CreateChat(ctx, chatInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatUseCase)(nil).CreateChat), ctx, chatInfo)
}

// DeleteChat mocks base method.
func (m *MockChatUseCase) DeleteChat(ctx context.Context, chatId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", ctx, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatUseCaseMockRecorder) DeleteChat(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChatUseCase)(nil).DeleteChat), ctx, chatId)
}

// GetChat mocks base method.
func (m *MockChatUseCase) GetChat(ctx context.Context, chatId uuid.UUID) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", ctx, chatId)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatUseCaseMockRecorder) GetChat(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatUseCase)(nil).GetChat), ctx, chatId)
}

// GetChatParticipants mocks base method.
func (m *MockChatUseCase) GetChatParticipants(ctx context.Context, chatId uuid.UUID) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatParticipants", ctx, chatId)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatParticipants indicates an expected call of GetChatParticipants.
func (mr *MockChatUseCaseMockRecorder) GetChatParticipants(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatParticipants", reflect.TypeOf((*MockChatUseCase)(nil).GetChatParticipants), ctx, chatId)
}

// GetPrivateChat mocks base method.
func (m *MockChatUseCase) GetPrivateChat(ctx context.Context, userId1, userId2 uuid.UUID) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateChat", ctx, userId1, userId2)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateChat indicates an expected call of GetPrivateChat.
func (mr *MockChatUseCaseMockRecorder) GetPrivateChat(ctx, userId1, userId2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateChat", reflect.TypeOf((*MockChatUseCase)(nil).GetPrivateChat), ctx, userId1, userId2)
}

// GetUserChats mocks base method.
func (m *MockChatUseCase) GetUserChats(ctx context.Context, userId uuid.UUID) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", ctx, userId)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatUseCaseMockRecorder) GetUserChats(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChatUseCase)(nil).GetUserChats), ctx, userId)
}

// JoinChat mocks base method.
func (m *MockChatUseCase) JoinChat(ctx context.Context, chatId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinChat", ctx, chatId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinChat indicates an expected call of JoinChat.
func (mr *MockChatUseCaseMockRecorder) JoinChat(ctx, chatId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChat", reflect.TypeOf((*MockChatUseCase)(nil).JoinChat), ctx, chatId, userId)
}

// LeaveChat mocks base method.
func (m *MockChatUseCase) LeaveChat(ctx context.Context, chatId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveChat", ctx, chatId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveChat indicates an expected call of LeaveChat.
func (mr *MockChatUseCaseMockRecorder) LeaveChat(ctx, chatId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChat", reflect.TypeOf((*MockChatUseCase)(nil).LeaveChat), ctx, chatId, userId)
}
