package http

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	time2 "quickflow/monolith/config/time"
	forms2 "quickflow/monolith/internal/delivery/forms"
	models2 "quickflow/monolith/internal/models"
	"quickflow/monolith/internal/usecase"
	"quickflow/monolith/pkg/logger"
	http2 "quickflow/monolith/utils/http"
	"time"

	"github.com/google/uuid"
)

type ChatUseCase interface {
	CreateChat(ctx context.Context, chatInfo models2.ChatCreationInfo) (models2.Chat, error)
	GetChatParticipants(ctx context.Context, chatId uuid.UUID) ([]models2.User, error)
	GetUserChats(ctx context.Context, userId uuid.UUID) ([]models2.Chat, error)
	GetPrivateChat(ctx context.Context, userId1, userId2 uuid.UUID) (models2.Chat, error)
	DeleteChat(ctx context.Context, chatId uuid.UUID) error
	GetChat(ctx context.Context, chatId uuid.UUID) (models2.Chat, error)
	JoinChat(ctx context.Context, chatId, userId uuid.UUID) error
	LeaveChat(ctx context.Context, chatId, userId uuid.UUID) error
}

type ChatHandler struct {
	chatUseCase    ChatUseCase
	profileUseCase ProfileUseCase
	connService    IWebSocketConnectionManager
}

func NewChatHandler(chatUseCase ChatUseCase, profileUseCase ProfileUseCase, connService IWebSocketConnectionManager) *ChatHandler {
	return &ChatHandler{
		chatUseCase:    chatUseCase,
		profileUseCase: profileUseCase,
		connService:    connService,
	}
}

// GetUserChats godoc
// @Summary Get user chats
// @Description Get user chats
// @Tags Chats
// @Accept json
// @Produce json
// @Param ts query string false "Timestamp"
// @Param chats_count query int true "Number of chats"
// @Success 200 {array} forms.ChatOut "List of chats"
// @Failure 400 {object} forms.ErrorForm "Invalid data"
// @Failure 403 {object} forms.ErrorForm "User is not a participant in the chat"
// @Failure 500 {object} forms.ErrorForm "Server error"
// @Router /api/chats [get]
func (c *ChatHandler) GetUserChats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	logger.Info(ctx, "Got GetUserChats request")

	user, ok := ctx.Value("user").(models2.User)
	if !ok {
		logger.Error(ctx, "Failed to get user from context while fetching messages")
		http2.WriteJSONError(w, "Failed to get user from context", http.StatusInternalServerError)
		return
	}

	var chatForm forms2.GetChatsForm
	err := chatForm.GetParams(r.URL.Query())
	if err != nil {
		logger.Error(ctx, fmt.Sprintf("Failed to parse query params: %v", err))
		http2.WriteJSONError(w, "Failed to parse query params", http.StatusBadRequest)
		return
	}

	logger.Info(ctx, fmt.Sprintf("Fetching feed for user %s with %d posts with timestamp %v (autogenerated: %t)",
		user.Username, chatForm.ChatsCount, chatForm.Ts, !r.URL.Query().Has("ts")))

	chats, err := c.chatUseCase.GetUserChats(ctx, user.Id)
	if errors.Is(err, usecase.ErrNotFound) {
		logger.Info(ctx, fmt.Sprintf("User %s has no chats", user.Username))
		http2.WriteJSONError(w, "user has no chats", http.StatusNotFound)
		return
	} else if err != nil {
		logger.Error(ctx, fmt.Sprintf("Failed to fetch chats: %v", err))
		http2.WriteJSONError(w, "Failed to fetch chats", http.StatusInternalServerError)
		return
	}

	logger.Info(ctx, fmt.Sprintf("Fetched %d chats for user %s", len(chats), user.Username))

	var senders []uuid.UUID
	for _, chat := range chats {
		senders = append(senders, chat.LastMessage.SenderID)
	}

	var publicInfos map[uuid.UUID]models2.PublicUserInfo
	if len(senders) != 0 {
		publicInfos, err = c.profileUseCase.GetPublicUsersInfo(ctx, senders)
		if err != nil {
			logger.Error(ctx, fmt.Sprintf("Error while fetching last messages users info: %v", err))
			http2.WriteJSONError(w, "Failed to fetch last messages users info", http.StatusInternalServerError)
			return
		}
	}
	lastMessageSenderInfo := make(map[uuid.UUID]models2.PublicUserInfo)
	for _, info := range publicInfos {
		lastMessageSenderInfo[info.Id] = info
	}

	// Convert chats to output format
	var (
		privateChatsOnlineStatus = make(map[uuid.UUID]forms2.PrivateChatInfo)
		isOnline                 bool
		username                 string
		lastSeen                 time.Time
	)
	for _, chat := range chats {
		if chat.Type != models2.ChatTypePrivate {
			continue
		}

		if chat.LastMessage.ID != uuid.Nil && chat.LastMessage.SenderID != user.Id {
			_, isOnline = c.connService.IsConnected(chat.LastMessage.SenderID)
			lastSeen = lastMessageSenderInfo[chat.LastMessage.SenderID].LastSeen
			username = lastMessageSenderInfo[chat.LastMessage.SenderID].Username
		} else {
			// Get the other participant's ID
			otherUser, err := c.getOtherPrivateChatParticipant(ctx, chat.ID, user.Id)
			if err != nil {
				logger.Error(ctx, fmt.Sprintf("Failed to get other participant: %v", err))
				http2.WriteJSONError(w, "Failed to get other participant", http.StatusInternalServerError)
				return
			}
			_, isOnline = c.connService.IsConnected(otherUser)

			otherUserInfo, err := c.profileUseCase.GetPublicUserInfo(ctx, otherUser)
			if err != nil {
				logger.Error(ctx, fmt.Sprintf("Failed to get other user info: %v", err))
				http2.WriteJSONError(w, "Failed to get other user info", http.StatusInternalServerError)
				return
			}
			lastSeen = otherUserInfo.LastSeen
			username = otherUserInfo.Username
		}

		privateChatsOnlineStatus[chat.ID] = forms2.PrivateChatInfo{
			Username: username,
			Activity: forms2.Activity{IsOnline: isOnline, LastSeen: lastSeen.Format(time2.TimeStampLayout)},
		}
	}

	chatsOut := forms2.ToChatsOut(chats, lastMessageSenderInfo, privateChatsOnlineStatus)
	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(chatsOut)
	if err != nil {
		logger.Error(ctx, fmt.Sprintf("Failed to encode chats: %s", err.Error()))
		http2.WriteJSONError(w, "Failed to encode chats", http.StatusInternalServerError)
		return
	}
}

func (c *ChatHandler) getOtherPrivateChatParticipant(ctx context.Context, chatId uuid.UUID, userId uuid.UUID) (uuid.UUID, error) {
	participants, err := c.chatUseCase.GetChatParticipants(ctx, chatId)
	if err != nil {
		logger.Error(ctx, fmt.Sprintf("Failed to get chat participants: %v", err))
		return uuid.Nil, err
	}
	for _, participant := range participants {
		if participant.Id != userId {
			return participant.Id, nil
		}
	}
	return uuid.Nil, usecase.ErrNotFound
}
