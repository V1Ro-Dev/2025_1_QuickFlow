// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/message-usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"quickflow/monolith/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessageRepository) DeleteMessage(ctx context.Context, messageId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageRepositoryMockRecorder) DeleteMessage(ctx, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageRepository)(nil).DeleteMessage), ctx, messageId)
}

// GetLastChatMessage mocks base method.
func (m *MockMessageRepository) GetLastChatMessage(ctx context.Context, chatId uuid.UUID) (*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastChatMessage", ctx, chatId)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastChatMessage indicates an expected call of GetLastChatMessage.
func (mr *MockMessageRepositoryMockRecorder) GetLastChatMessage(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastChatMessage", reflect.TypeOf((*MockMessageRepository)(nil).GetLastChatMessage), ctx, chatId)
}

// GetMessagesForChatOlder mocks base method.
func (m *MockMessageRepository) GetMessagesForChatOlder(ctx context.Context, chatId uuid.UUID, numMessages int, timestamp time.Time) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesForChatOlder", ctx, chatId, numMessages, timestamp)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesForChatOlder indicates an expected call of GetMessagesForChatOlder.
func (mr *MockMessageRepositoryMockRecorder) GetMessagesForChatOlder(ctx, chatId, numMessages, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesForChatOlder", reflect.TypeOf((*MockMessageRepository)(nil).GetMessagesForChatOlder), ctx, chatId, numMessages, timestamp)
}

// UpdateLastMessageRead mocks base method.
func (m *MockMessageRepository) UpdateLastReadMessage(ctx context.Context, messageId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastMessageRead", ctx, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRead indicates an expected call of MarkRead.
func (mr *MockMessageRepositoryMockRecorder) MarkRead(ctx, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastMessageRead", reflect.TypeOf((*MockMessageRepository)(nil).UpdateLastReadMessage), ctx, messageId)
}

// SaveMessage mocks base method.
func (m *MockMessageRepository) SaveMessage(ctx context.Context, message models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockMessageRepositoryMockRecorder) SaveMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockMessageRepository)(nil).SaveMessage), ctx, message)
}
