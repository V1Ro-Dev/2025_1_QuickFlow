// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/friends-usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"quickflow/monolith/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockFriendsRepository is a mock of FriendsRepository interface.
type MockFriendsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFriendsRepositoryMockRecorder
}

// MockFriendsRepositoryMockRecorder is the mock recorder for MockFriendsRepository.
type MockFriendsRepositoryMockRecorder struct {
	mock *MockFriendsRepository
}

// NewMockFriendsRepository creates a new mock instance.
func NewMockFriendsRepository(ctrl *gomock.Controller) *MockFriendsRepository {
	mock := &MockFriendsRepository{ctrl: ctrl}
	mock.recorder = &MockFriendsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendsRepository) EXPECT() *MockFriendsRepositoryMockRecorder {
	return m.recorder
}

// AcceptFriendRequest mocks base method.
func (m *MockFriendsRepository) AcceptFriendRequest(ctx context.Context, senderID, receiverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendRequest", ctx, senderID, receiverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptFriendRequest indicates an expected call of AcceptFriendRequest.
func (mr *MockFriendsRepositoryMockRecorder) AcceptFriendRequest(ctx, senderID, receiverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendRequest", reflect.TypeOf((*MockFriendsRepository)(nil).AcceptFriendRequest), ctx, senderID, receiverID)
}

// DeleteFriend mocks base method.
func (m *MockFriendsRepository) DeleteFriend(ctx context.Context, senderID, receiverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriend", ctx, senderID, receiverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriend indicates an expected call of DeleteFriend.
func (mr *MockFriendsRepositoryMockRecorder) DeleteFriend(ctx, senderID, receiverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriend", reflect.TypeOf((*MockFriendsRepository)(nil).DeleteFriend), ctx, senderID, receiverID)
}

// GetFriendsPublicInfo mocks base method.
func (m *MockFriendsRepository) GetFriendsPublicInfo(ctx context.Context, userID string, amount, startPos int) ([]models.FriendInfo, bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsPublicInfo", ctx, userID, amount, startPos)
	ret0, _ := ret[0].([]models.FriendInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFriendsPublicInfo indicates an expected call of GetFriendsPublicInfo.
func (mr *MockFriendsRepositoryMockRecorder) GetFriendsPublicInfo(ctx, userID, amount, startPos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsPublicInfo", reflect.TypeOf((*MockFriendsRepository)(nil).GetFriendsPublicInfo), ctx, userID, amount, startPos)
}

// GetUserRelation mocks base method.
func (m *MockFriendsRepository) GetUserRelation(ctx context.Context, user1, user2 uuid.UUID) (models.UserRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRelation", ctx, user1, user2)
	ret0, _ := ret[0].(models.UserRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRelation indicates an expected call of GetUserRelation.
func (mr *MockFriendsRepositoryMockRecorder) GetUserRelation(ctx, user1, user2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRelation", reflect.TypeOf((*MockFriendsRepository)(nil).GetUserRelation), ctx, user1, user2)
}

// IsExistsFriendRequest mocks base method.
func (m *MockFriendsRepository) IsExistsFriendRequest(ctx context.Context, senderID, receiverID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistsFriendRequest", ctx, senderID, receiverID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistsFriendRequest indicates an expected call of IsExistsFriendRequest.
func (mr *MockFriendsRepositoryMockRecorder) IsExistsFriendRequest(ctx, senderID, receiverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistsFriendRequest", reflect.TypeOf((*MockFriendsRepository)(nil).IsExistsFriendRequest), ctx, senderID, receiverID)
}

// SendFriendRequest mocks base method.
func (m *MockFriendsRepository) SendFriendRequest(ctx context.Context, senderID, receiverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFriendRequest", ctx, senderID, receiverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFriendRequest indicates an expected call of SendFriendRequest.
func (mr *MockFriendsRepositoryMockRecorder) SendFriendRequest(ctx, senderID, receiverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFriendRequest", reflect.TypeOf((*MockFriendsRepository)(nil).SendFriendRequest), ctx, senderID, receiverID)
}

// Unfollow mocks base method.
func (m *MockFriendsRepository) Unfollow(ctx context.Context, userID, friendID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", ctx, userID, friendID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockFriendsRepositoryMockRecorder) Unfollow(ctx, userID, friendID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockFriendsRepository)(nil).Unfollow), ctx, userID, friendID)
}
