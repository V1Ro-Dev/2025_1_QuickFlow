// Code generated by MockGen. DO NOT EDIT.
// Source: .//messenger_service/internal/usecase/chat-usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockChatRepository is a mock of ChatRepository interface.
type MockChatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryMockRecorder
}

// MockChatRepositoryMockRecorder is the mock recorder for MockChatRepository.
type MockChatRepositoryMockRecorder struct {
	mock *MockChatRepository
}

// NewMockChatRepository creates a new mock instance.
func NewMockChatRepository(ctrl *gomock.Controller) *MockChatRepository {
	mock := &MockChatRepository{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepository) EXPECT() *MockChatRepositoryMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChatRepository) CreateChat(ctx context.Context, chat models.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatRepositoryMockRecorder) CreateChat(ctx, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatRepository)(nil).CreateChat), ctx, chat)
}

// DeleteChat mocks base method.
func (m *MockChatRepository) DeleteChat(ctx context.Context, chatId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", ctx, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatRepositoryMockRecorder) DeleteChat(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChatRepository)(nil).DeleteChat), ctx, chatId)
}

// Exists mocks base method.
func (m *MockChatRepository) Exists(ctx context.Context, chatId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, chatId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockChatRepositoryMockRecorder) Exists(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockChatRepository)(nil).Exists), ctx, chatId)
}

// GetChat mocks base method.
func (m *MockChatRepository) GetChat(ctx context.Context, chatId uuid.UUID) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", ctx, chatId)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatRepositoryMockRecorder) GetChat(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatRepository)(nil).GetChat), ctx, chatId)
}

// GetChatParticipants mocks base method.
func (m *MockChatRepository) GetChatParticipants(ctx context.Context, chatId uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatParticipants", ctx, chatId)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatParticipants indicates an expected call of GetChatParticipants.
func (mr *MockChatRepositoryMockRecorder) GetChatParticipants(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatParticipants", reflect.TypeOf((*MockChatRepository)(nil).GetChatParticipants), ctx, chatId)
}

// GetNumUnreadChats mocks base method.
func (m *MockChatRepository) GetNumUnreadChats(ctx context.Context, userId uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumUnreadChats", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumUnreadChats indicates an expected call of GetNumUnreadChats.
func (mr *MockChatRepositoryMockRecorder) GetNumUnreadChats(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumUnreadChats", reflect.TypeOf((*MockChatRepository)(nil).GetNumUnreadChats), ctx, userId)
}

// GetPrivateChat mocks base method.
func (m *MockChatRepository) GetPrivateChat(ctx context.Context, senderId, receiverId uuid.UUID) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateChat", ctx, senderId, receiverId)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateChat indicates an expected call of GetPrivateChat.
func (mr *MockChatRepositoryMockRecorder) GetPrivateChat(ctx, senderId, receiverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateChat", reflect.TypeOf((*MockChatRepository)(nil).GetPrivateChat), ctx, senderId, receiverId)
}

// GetUserChats mocks base method.
func (m *MockChatRepository) GetUserChats(ctx context.Context, userId uuid.UUID) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", ctx, userId)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatRepositoryMockRecorder) GetUserChats(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChatRepository)(nil).GetUserChats), ctx, userId)
}

// IsParticipant mocks base method.
func (m *MockChatRepository) IsParticipant(ctx context.Context, chatId, userId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsParticipant", ctx, chatId, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsParticipant indicates an expected call of IsParticipant.
func (mr *MockChatRepositoryMockRecorder) IsParticipant(ctx, chatId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsParticipant", reflect.TypeOf((*MockChatRepository)(nil).IsParticipant), ctx, chatId, userId)
}

// JoinChat mocks base method.
func (m *MockChatRepository) JoinChat(ctx context.Context, chatId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinChat", ctx, chatId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinChat indicates an expected call of JoinChat.
func (mr *MockChatRepositoryMockRecorder) JoinChat(ctx, chatId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChat", reflect.TypeOf((*MockChatRepository)(nil).JoinChat), ctx, chatId, userId)
}

// LeaveChat mocks base method.
func (m *MockChatRepository) LeaveChat(ctx context.Context, chatId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveChat", ctx, chatId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveChat indicates an expected call of LeaveChat.
func (mr *MockChatRepositoryMockRecorder) LeaveChat(ctx, chatId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChat", reflect.TypeOf((*MockChatRepository)(nil).LeaveChat), ctx, chatId, userId)
}

// MockChatValidator is a mock of ChatValidator interface.
type MockChatValidator struct {
	ctrl     *gomock.Controller
	recorder *MockChatValidatorMockRecorder
}

// MockChatValidatorMockRecorder is the mock recorder for MockChatValidator.
type MockChatValidatorMockRecorder struct {
	mock *MockChatValidator
}

// NewMockChatValidator creates a new mock instance.
func NewMockChatValidator(ctrl *gomock.Controller) *MockChatValidator {
	mock := &MockChatValidator{ctrl: ctrl}
	mock.recorder = &MockChatValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatValidator) EXPECT() *MockChatValidatorMockRecorder {
	return m.recorder
}

// ValidateChatCreationInfo mocks base method.
func (m *MockChatValidator) ValidateChatCreationInfo(chatInfo models.ChatCreationInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateChatCreationInfo", chatInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateChatCreationInfo indicates an expected call of ValidateChatCreationInfo.
func (mr *MockChatValidatorMockRecorder) ValidateChatCreationInfo(chatInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateChatCreationInfo", reflect.TypeOf((*MockChatValidator)(nil).ValidateChatCreationInfo), chatInfo)
}

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockFileService) UploadFile(ctx context.Context, file *models.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServiceMockRecorder) UploadFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileService)(nil).UploadFile), ctx, file)
}

// UploadManyFiles mocks base method.
func (m *MockFileService) UploadManyFiles(ctx context.Context, files []*models.File) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadManyFiles", ctx, files)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadManyFiles indicates an expected call of UploadManyFiles.
func (mr *MockFileServiceMockRecorder) UploadManyFiles(ctx, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadManyFiles", reflect.TypeOf((*MockFileService)(nil).UploadManyFiles), ctx, files)
}

// MockProfileService is a mock of ProfileService interface.
type MockProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceMockRecorder
}

// MockProfileServiceMockRecorder is the mock recorder for MockProfileService.
type MockProfileServiceMockRecorder struct {
	mock *MockProfileService
}

// NewMockProfileService creates a new mock instance.
func NewMockProfileService(ctrl *gomock.Controller) *MockProfileService {
	mock := &MockProfileService{ctrl: ctrl}
	mock.recorder = &MockProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileService) EXPECT() *MockProfileServiceMockRecorder {
	return m.recorder
}

// GetPublicUsersInfo mocks base method.
func (m *MockProfileService) GetPublicUsersInfo(ctx context.Context, userId []uuid.UUID) ([]models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicUsersInfo", ctx, userId)
	ret0, _ := ret[0].([]models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicUsersInfo indicates an expected call of GetPublicUsersInfo.
func (mr *MockProfileServiceMockRecorder) GetPublicUsersInfo(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicUsersInfo", reflect.TypeOf((*MockProfileService)(nil).GetPublicUsersInfo), ctx, userId)
}
