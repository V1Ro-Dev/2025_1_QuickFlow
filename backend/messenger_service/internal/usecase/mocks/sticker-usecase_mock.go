// Code generated by MockGen. DO NOT EDIT.
// Source: ./messenger_service/internal/usecase/sticker-usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStickerRepository is a mock of StickerRepository interface.
type MockStickerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStickerRepositoryMockRecorder
}

// MockStickerRepositoryMockRecorder is the mock recorder for MockStickerRepository.
type MockStickerRepositoryMockRecorder struct {
	mock *MockStickerRepository
}

// NewMockStickerRepository creates a new mock instance.
func NewMockStickerRepository(ctrl *gomock.Controller) *MockStickerRepository {
	mock := &MockStickerRepository{ctrl: ctrl}
	mock.recorder = &MockStickerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStickerRepository) EXPECT() *MockStickerRepositoryMockRecorder {
	return m.recorder
}

// AddStickerPack mocks base method.
func (m *MockStickerRepository) AddStickerPack(ctx context.Context, stickerPack models.StickerPack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStickerPack", ctx, stickerPack)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStickerPack indicates an expected call of AddStickerPack.
func (mr *MockStickerRepositoryMockRecorder) AddStickerPack(ctx, stickerPack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStickerPack", reflect.TypeOf((*MockStickerRepository)(nil).AddStickerPack), ctx, stickerPack)
}

// BelongsTo mocks base method.
func (m *MockStickerRepository) BelongsTo(ctx context.Context, userId, packId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BelongsTo", ctx, userId, packId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BelongsTo indicates an expected call of BelongsTo.
func (mr *MockStickerRepositoryMockRecorder) BelongsTo(ctx, userId, packId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BelongsTo", reflect.TypeOf((*MockStickerRepository)(nil).BelongsTo), ctx, userId, packId)
}

// DeleteStickerPack mocks base method.
func (m *MockStickerRepository) DeleteStickerPack(ctx context.Context, userId, packId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStickerPack", ctx, userId, packId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStickerPack indicates an expected call of DeleteStickerPack.
func (mr *MockStickerRepositoryMockRecorder) DeleteStickerPack(ctx, userId, packId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStickerPack", reflect.TypeOf((*MockStickerRepository)(nil).DeleteStickerPack), ctx, userId, packId)
}

// GetStickerPack mocks base method.
func (m *MockStickerRepository) GetStickerPack(ctx context.Context, packId uuid.UUID) (models.StickerPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerPack", ctx, packId)
	ret0, _ := ret[0].(models.StickerPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPack indicates an expected call of GetStickerPack.
func (mr *MockStickerRepositoryMockRecorder) GetStickerPack(ctx, packId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPack", reflect.TypeOf((*MockStickerRepository)(nil).GetStickerPack), ctx, packId)
}

// GetStickerPackByName mocks base method.
func (m *MockStickerRepository) GetStickerPackByName(ctx context.Context, name string) (models.StickerPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerPackByName", ctx, name)
	ret0, _ := ret[0].(models.StickerPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPackByName indicates an expected call of GetStickerPackByName.
func (mr *MockStickerRepositoryMockRecorder) GetStickerPackByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPackByName", reflect.TypeOf((*MockStickerRepository)(nil).GetStickerPackByName), ctx, name)
}

// GetStickerPacks mocks base method.
func (m *MockStickerRepository) GetStickerPacks(ctx context.Context, userId uuid.UUID, count, offset int) ([]models.StickerPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerPacks", ctx, userId, count, offset)
	ret0, _ := ret[0].([]models.StickerPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPacks indicates an expected call of GetStickerPacks.
func (mr *MockStickerRepositoryMockRecorder) GetStickerPacks(ctx, userId, count, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPacks", reflect.TypeOf((*MockStickerRepository)(nil).GetStickerPacks), ctx, userId, count, offset)
}

// MockStickerPackValidator is a mock of StickerPackValidator interface.
type MockStickerPackValidator struct {
	ctrl     *gomock.Controller
	recorder *MockStickerPackValidatorMockRecorder
}

// MockStickerPackValidatorMockRecorder is the mock recorder for MockStickerPackValidator.
type MockStickerPackValidatorMockRecorder struct {
	mock *MockStickerPackValidator
}

// NewMockStickerPackValidator creates a new mock instance.
func NewMockStickerPackValidator(ctrl *gomock.Controller) *MockStickerPackValidator {
	mock := &MockStickerPackValidator{ctrl: ctrl}
	mock.recorder = &MockStickerPackValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStickerPackValidator) EXPECT() *MockStickerPackValidatorMockRecorder {
	return m.recorder
}

// ValidateStickerPack mocks base method.
func (m *MockStickerPackValidator) ValidateStickerPack(stickerPack *models.StickerPack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateStickerPack", stickerPack)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateStickerPack indicates an expected call of ValidateStickerPack.
func (mr *MockStickerPackValidatorMockRecorder) ValidateStickerPack(stickerPack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStickerPack", reflect.TypeOf((*MockStickerPackValidator)(nil).ValidateStickerPack), stickerPack)
}
