// Code generated by MockGen. DO NOT EDIT.
// Source: .//messenger_service/internal/delivery/grpc/sticker_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStickerServiceUseCase is a mock of StickerServiceUseCase interface.
type MockStickerServiceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStickerServiceUseCaseMockRecorder
}

// MockStickerServiceUseCaseMockRecorder is the mock recorder for MockStickerServiceUseCase.
type MockStickerServiceUseCaseMockRecorder struct {
	mock *MockStickerServiceUseCase
}

// NewMockStickerServiceUseCase creates a new mock instance.
func NewMockStickerServiceUseCase(ctrl *gomock.Controller) *MockStickerServiceUseCase {
	mock := &MockStickerServiceUseCase{ctrl: ctrl}
	mock.recorder = &MockStickerServiceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStickerServiceUseCase) EXPECT() *MockStickerServiceUseCaseMockRecorder {
	return m.recorder
}

// AddStickerPack mocks base method.
func (m *MockStickerServiceUseCase) AddStickerPack(ctx context.Context, stickerPack *models.StickerPack) (*models.StickerPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStickerPack", ctx, stickerPack)
	ret0, _ := ret[0].(*models.StickerPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStickerPack indicates an expected call of AddStickerPack.
func (mr *MockStickerServiceUseCaseMockRecorder) AddStickerPack(ctx, stickerPack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStickerPack", reflect.TypeOf((*MockStickerServiceUseCase)(nil).AddStickerPack), ctx, stickerPack)
}

// DeleteStickerPack mocks base method.
func (m *MockStickerServiceUseCase) DeleteStickerPack(ctx context.Context, userId, packId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStickerPack", ctx, userId, packId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStickerPack indicates an expected call of DeleteStickerPack.
func (mr *MockStickerServiceUseCaseMockRecorder) DeleteStickerPack(ctx, userId, packId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStickerPack", reflect.TypeOf((*MockStickerServiceUseCase)(nil).DeleteStickerPack), ctx, userId, packId)
}

// GetStickerPack mocks base method.
func (m *MockStickerServiceUseCase) GetStickerPack(ctx context.Context, packId uuid.UUID) (models.StickerPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerPack", ctx, packId)
	ret0, _ := ret[0].(models.StickerPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPack indicates an expected call of GetStickerPack.
func (mr *MockStickerServiceUseCaseMockRecorder) GetStickerPack(ctx, packId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPack", reflect.TypeOf((*MockStickerServiceUseCase)(nil).GetStickerPack), ctx, packId)
}

// GetStickerPackByName mocks base method.
func (m *MockStickerServiceUseCase) GetStickerPackByName(ctx context.Context, packName string) (models.StickerPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerPackByName", ctx, packName)
	ret0, _ := ret[0].(models.StickerPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPackByName indicates an expected call of GetStickerPackByName.
func (mr *MockStickerServiceUseCaseMockRecorder) GetStickerPackByName(ctx, packName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPackByName", reflect.TypeOf((*MockStickerServiceUseCase)(nil).GetStickerPackByName), ctx, packName)
}

// GetStickerPacks mocks base method.
func (m *MockStickerServiceUseCase) GetStickerPacks(ctx context.Context, userId uuid.UUID, count, offset int) ([]models.StickerPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerPacks", ctx, userId, count, offset)
	ret0, _ := ret[0].([]models.StickerPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPacks indicates an expected call of GetStickerPacks.
func (mr *MockStickerServiceUseCaseMockRecorder) GetStickerPacks(ctx, userId, count, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPacks", reflect.TypeOf((*MockStickerServiceUseCase)(nil).GetStickerPacks), ctx, userId, count, offset)
}
