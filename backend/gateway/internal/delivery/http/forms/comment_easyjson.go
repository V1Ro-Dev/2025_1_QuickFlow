// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package forms

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	models "quickflow/shared/models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms(in *jlexer.Lexer, out *CommentsOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CommentsOut, 0, 0)
			} else {
				*out = CommentsOut{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 CommentOut
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms(out *jwriter.Writer, in CommentsOut) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CommentsOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentsOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentsOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentsOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms(l, v)
}
func easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms1(in *jlexer.Lexer, out *CommentUpdateForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "media":
			if in.IsNull() {
				in.Skip()
				out.Media = nil
			} else {
				in.Delim('[')
				if out.Media == nil {
					if !in.IsDelim(']') {
						out.Media = make([]string, 0, 4)
					} else {
						out.Media = []string{}
					}
				} else {
					out.Media = (out.Media)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Media = append(out.Media, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				in.Delim('[')
				if out.Audio == nil {
					if !in.IsDelim(']') {
						out.Audio = make([]string, 0, 4)
					} else {
						out.Audio = []string{}
					}
				} else {
					out.Audio = (out.Audio)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Audio = append(out.Audio, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]string, 0, 4)
					} else {
						out.Files = []string{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Files = append(out.Files, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.Stickers = nil
			} else {
				in.Delim('[')
				if out.Stickers == nil {
					if !in.IsDelim(']') {
						out.Stickers = make([]string, 0, 4)
					} else {
						out.Stickers = []string{}
					}
				} else {
					out.Stickers = (out.Stickers)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Stickers = append(out.Stickers, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms1(out *jwriter.Writer, in CommentUpdateForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	if len(in.Media) != 0 {
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Media {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if len(in.Audio) != 0 {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.Audio {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if len(in.Files) != 0 {
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.Files {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if len(in.Stickers) != 0 {
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Stickers {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentUpdateForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentUpdateForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentUpdateForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentUpdateForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms1(l, v)
}
func easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms2(in *jlexer.Lexer, out *CommentOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "media":
			if in.IsNull() {
				in.Skip()
				out.Media = nil
			} else {
				in.Delim('[')
				if out.Media == nil {
					if !in.IsDelim(']') {
						out.Media = make([]FileOut, 0, 2)
					} else {
						out.Media = []FileOut{}
					}
				} else {
					out.Media = (out.Media)[:0]
				}
				for !in.IsDelim(']') {
					var v16 FileOut
					easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms3(in, &v16)
					out.Media = append(out.Media, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				in.Delim('[')
				if out.Audio == nil {
					if !in.IsDelim(']') {
						out.Audio = make([]FileOut, 0, 2)
					} else {
						out.Audio = []FileOut{}
					}
				} else {
					out.Audio = (out.Audio)[:0]
				}
				for !in.IsDelim(']') {
					var v17 FileOut
					easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms3(in, &v17)
					out.Audio = append(out.Audio, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]FileOut, 0, 2)
					} else {
						out.Files = []FileOut{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v18 FileOut
					easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms3(in, &v18)
					out.Files = append(out.Files, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.Stickers = nil
			} else {
				in.Delim('[')
				if out.Stickers == nil {
					if !in.IsDelim(']') {
						out.Stickers = make([]FileOut, 0, 2)
					} else {
						out.Stickers = []FileOut{}
					}
				} else {
					out.Stickers = (out.Stickers)[:0]
				}
				for !in.IsDelim(']') {
					var v19 FileOut
					easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms3(in, &v19)
					out.Stickers = append(out.Stickers, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "author":
			easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms4(in, &out.Creator)
		case "post_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.PostId).UnmarshalText(data))
			}
		case "like_count":
			out.LikeCount = int(in.Int())
		case "is_liked":
			out.IsLiked = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms2(out *jwriter.Writer, in CommentOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	if len(in.Media) != 0 {
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.Media {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms3(out, v21)
			}
			out.RawByte(']')
		}
	}
	if len(in.Audio) != 0 {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v22, v23 := range in.Audio {
				if v22 > 0 {
					out.RawByte(',')
				}
				easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms3(out, v23)
			}
			out.RawByte(']')
		}
	}
	if len(in.Files) != 0 {
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v24, v25 := range in.Files {
				if v24 > 0 {
					out.RawByte(',')
				}
				easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms3(out, v25)
			}
			out.RawByte(']')
		}
	}
	if len(in.Stickers) != 0 {
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v26, v27 := range in.Stickers {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms3(out, v27)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms4(out, in.Creator)
	}
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix)
		out.RawText((in.PostId).MarshalText())
	}
	{
		const prefix string = ",\"like_count\":"
		out.RawString(prefix)
		out.Int(int(in.LikeCount))
	}
	{
		const prefix string = ",\"is_liked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms2(l, v)
}
func easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms4(in *jlexer.Lexer, out *PublicUserInfoOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "firstname":
			out.FirstName = string(in.String())
		case "lastname":
			out.LastName = string(in.String())
		case "online":
			if in.IsNull() {
				in.Skip()
				out.IsOnline = nil
			} else {
				if out.IsOnline == nil {
					out.IsOnline = new(bool)
				}
				*out.IsOnline = bool(in.Bool())
			}
		case "relation":
			out.Relation = models.UserRelation(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms4(out *jwriter.Writer, in PublicUserInfoOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.AvatarURL != "" {
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"firstname\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastname\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if in.IsOnline != nil {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsOnline))
	}
	if in.Relation != "" {
		const prefix string = ",\"relation\":"
		out.RawString(prefix)
		out.String(string(in.Relation))
	}
	out.RawByte('}')
}
func easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms3(in *jlexer.Lexer, out *FileOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms3(out *jwriter.Writer, in FileOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms5(in *jlexer.Lexer, out *CommentForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "media":
			if in.IsNull() {
				in.Skip()
				out.Media = nil
			} else {
				in.Delim('[')
				if out.Media == nil {
					if !in.IsDelim(']') {
						out.Media = make([]string, 0, 4)
					} else {
						out.Media = []string{}
					}
				} else {
					out.Media = (out.Media)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Media = append(out.Media, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				in.Delim('[')
				if out.Audio == nil {
					if !in.IsDelim(']') {
						out.Audio = make([]string, 0, 4)
					} else {
						out.Audio = []string{}
					}
				} else {
					out.Audio = (out.Audio)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.Audio = append(out.Audio, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]string, 0, 4)
					} else {
						out.Files = []string{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.Files = append(out.Files, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.Stickers = nil
			} else {
				in.Delim('[')
				if out.Stickers == nil {
					if !in.IsDelim(']') {
						out.Stickers = make([]string, 0, 4)
					} else {
						out.Stickers = []string{}
					}
				} else {
					out.Stickers = (out.Stickers)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Stickers = append(out.Stickers, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms5(out *jwriter.Writer, in CommentForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	if len(in.Media) != 0 {
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.Media {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if len(in.Audio) != 0 {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v34, v35 := range in.Audio {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	if len(in.Files) != 0 {
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v36, v37 := range in.Files {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	if len(in.Stickers) != 0 {
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v38, v39 := range in.Stickers {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms5(l, v)
}
func easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms6(in *jlexer.Lexer, out *CommentFetchForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "ts":
			out.Ts = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms6(out *jwriter.Writer, in CommentFetchForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix)
		out.String(string(in.Ts))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentFetchForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentFetchForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeQuickflowGatewayInternalDeliveryHttpForms6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentFetchForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentFetchForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeQuickflowGatewayInternalDeliveryHttpForms6(l, v)
}
