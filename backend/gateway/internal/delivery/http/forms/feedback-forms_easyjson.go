// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package forms

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	models "quickflow/shared/models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms(in *jlexer.Lexer, out *GetFeedbackForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ts":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ts).UnmarshalJSON(data))
			}
		case "count":
			out.Count = int(in.Int())
		case "type":
			out.Type = models.FeedbackType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms(out *jwriter.Writer, in GetFeedbackForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix[1:])
		out.Raw((in.Ts).MarshalJSON())
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetFeedbackForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetFeedbackForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetFeedbackForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetFeedbackForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms(l, v)
}
func easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms1(in *jlexer.Lexer, out *FeedbackOutAverage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "average":
			out.Average = float64(in.Float64())
		case "feedbacks":
			if in.IsNull() {
				in.Skip()
				out.Feedbacks = nil
			} else {
				in.Delim('[')
				if out.Feedbacks == nil {
					if !in.IsDelim(']') {
						out.Feedbacks = make([]FeedbackFormOut, 0, 0)
					} else {
						out.Feedbacks = []FeedbackFormOut{}
					}
				} else {
					out.Feedbacks = (out.Feedbacks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 FeedbackFormOut
					(v1).UnmarshalEasyJSON(in)
					out.Feedbacks = append(out.Feedbacks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms1(out *jwriter.Writer, in FeedbackOutAverage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"average\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Average))
	}
	{
		const prefix string = ",\"feedbacks\":"
		out.RawString(prefix)
		if in.Feedbacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Feedbacks {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FeedbackOutAverage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FeedbackOutAverage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FeedbackOutAverage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FeedbackOutAverage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms1(l, v)
}
func easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms2(in *jlexer.Lexer, out *FeedbackFormOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "rating":
			out.Rating = int(in.Int())
		case "username":
			out.Username = string(in.String())
		case "firstname":
			out.Firstname = string(in.String())
		case "lastname":
			out.Lastname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms2(out *jwriter.Writer, in FeedbackFormOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"firstname\":"
		out.RawString(prefix)
		out.String(string(in.Firstname))
	}
	{
		const prefix string = ",\"lastname\":"
		out.RawString(prefix)
		out.String(string(in.Lastname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FeedbackFormOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FeedbackFormOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FeedbackFormOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FeedbackFormOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms2(l, v)
}
func easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms3(in *jlexer.Lexer, out *FeedbackForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "rating":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms3(out *jwriter.Writer, in FeedbackForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FeedbackForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FeedbackForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615ab3fEncodeQuickflowGatewayInternalDeliveryHttpForms3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FeedbackForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FeedbackForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615ab3fDecodeQuickflowGatewayInternalDeliveryHttpForms3(l, v)
}
