// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package forms

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	models "quickflow/shared/models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms(in *jlexer.Lexer, out *MessagesOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]MessageOut, 0, 0)
					} else {
						out.Messages = []MessageOut{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v1 MessageOut
					(v1).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_read_ts":
			out.LastReadTs = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms(out *jwriter.Writer, in MessagesOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Messages {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.LastReadTs != "" {
		const prefix string = ",\"last_read_ts\":"
		out.RawString(prefix)
		out.String(string(in.LastReadTs))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessagesOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessagesOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessagesOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessagesOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms(l, v)
}
func easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms1(in *jlexer.Lexer, out *MessageOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "text":
			out.Text = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "media":
			if in.IsNull() {
				in.Skip()
				out.MediaURLs = nil
			} else {
				in.Delim('[')
				if out.MediaURLs == nil {
					if !in.IsDelim(']') {
						out.MediaURLs = make([]FileOut, 0, 2)
					} else {
						out.MediaURLs = []FileOut{}
					}
				} else {
					out.MediaURLs = (out.MediaURLs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 FileOut
					easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms2(in, &v4)
					out.MediaURLs = append(out.MediaURLs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.AudioURLs = nil
			} else {
				in.Delim('[')
				if out.AudioURLs == nil {
					if !in.IsDelim(']') {
						out.AudioURLs = make([]FileOut, 0, 2)
					} else {
						out.AudioURLs = []FileOut{}
					}
				} else {
					out.AudioURLs = (out.AudioURLs)[:0]
				}
				for !in.IsDelim(']') {
					var v5 FileOut
					easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms2(in, &v5)
					out.AudioURLs = append(out.AudioURLs, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.FileURLs = nil
			} else {
				in.Delim('[')
				if out.FileURLs == nil {
					if !in.IsDelim(']') {
						out.FileURLs = make([]FileOut, 0, 2)
					} else {
						out.FileURLs = []FileOut{}
					}
				} else {
					out.FileURLs = (out.FileURLs)[:0]
				}
				for !in.IsDelim(']') {
					var v6 FileOut
					easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms2(in, &v6)
					out.FileURLs = append(out.FileURLs, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.StickerUrls = nil
			} else {
				in.Delim('[')
				if out.StickerUrls == nil {
					if !in.IsDelim(']') {
						out.StickerUrls = make([]FileOut, 0, 2)
					} else {
						out.StickerUrls = []FileOut{}
					}
				} else {
					out.StickerUrls = (out.StickerUrls)[:0]
				}
				for !in.IsDelim(']') {
					var v7 FileOut
					easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms2(in, &v7)
					out.StickerUrls = append(out.StickerUrls, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sender":
			easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms3(in, &out.Sender)
		case "chat_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ChatId).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms1(out *jwriter.Writer, in MessageOut) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	if len(in.MediaURLs) != 0 {
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.MediaURLs {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms2(out, v9)
			}
			out.RawByte(']')
		}
	}
	if len(in.AudioURLs) != 0 {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.AudioURLs {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms2(out, v11)
			}
			out.RawByte(']')
		}
	}
	if len(in.FileURLs) != 0 {
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.FileURLs {
				if v12 > 0 {
					out.RawByte(',')
				}
				easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms2(out, v13)
			}
			out.RawByte(']')
		}
	}
	if len(in.StickerUrls) != 0 {
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.StickerUrls {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms2(out, v15)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sender\":"
		out.RawString(prefix)
		easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms3(out, in.Sender)
	}
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix)
		out.RawText((in.ChatId).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms1(l, v)
}
func easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms3(in *jlexer.Lexer, out *PublicUserInfoOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "firstname":
			out.FirstName = string(in.String())
		case "lastname":
			out.LastName = string(in.String())
		case "online":
			if in.IsNull() {
				in.Skip()
				out.IsOnline = nil
			} else {
				if out.IsOnline == nil {
					out.IsOnline = new(bool)
				}
				*out.IsOnline = bool(in.Bool())
			}
		case "relation":
			out.Relation = models.UserRelation(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms3(out *jwriter.Writer, in PublicUserInfoOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.AvatarURL != "" {
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"firstname\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastname\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if in.IsOnline != nil {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsOnline))
	}
	if in.Relation != "" {
		const prefix string = ",\"relation\":"
		out.RawString(prefix)
		out.String(string(in.Relation))
	}
	out.RawByte('}')
}
func easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms2(in *jlexer.Lexer, out *FileOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms2(out *jwriter.Writer, in FileOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms4(in *jlexer.Lexer, out *MessageForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "chat_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ChatId).UnmarshalText(data))
			}
		case "media":
			if in.IsNull() {
				in.Skip()
				out.Media = nil
			} else {
				in.Delim('[')
				if out.Media == nil {
					if !in.IsDelim(']') {
						out.Media = make([]string, 0, 4)
					} else {
						out.Media = []string{}
					}
				} else {
					out.Media = (out.Media)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Media = append(out.Media, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				in.Delim('[')
				if out.Audio == nil {
					if !in.IsDelim(']') {
						out.Audio = make([]string, 0, 4)
					} else {
						out.Audio = []string{}
					}
				} else {
					out.Audio = (out.Audio)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.Audio = append(out.Audio, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.File = nil
			} else {
				in.Delim('[')
				if out.File == nil {
					if !in.IsDelim(']') {
						out.File = make([]string, 0, 4)
					} else {
						out.File = []string{}
					}
				} else {
					out.File = (out.File)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.File = append(out.File, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.Stickers = nil
			} else {
				in.Delim('[')
				if out.Stickers == nil {
					if !in.IsDelim(']') {
						out.Stickers = make([]string, 0, 4)
					} else {
						out.Stickers = []string{}
					}
				} else {
					out.Stickers = (out.Stickers)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Stickers = append(out.Stickers, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "receiver_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ReceiverId).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms4(out *jwriter.Writer, in MessageForm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Text != "" {
		const prefix string = ",\"text\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	if true {
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ChatId).MarshalText())
	}
	if len(in.Media) != 0 {
		const prefix string = ",\"media\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Media {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if len(in.Audio) != 0 {
		const prefix string = ",\"audio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.Audio {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if len(in.File) != 0 {
		const prefix string = ",\"files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.File {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if len(in.Stickers) != 0 {
		const prefix string = ",\"stickers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Stickers {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"receiver_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ReceiverId).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms4(l, v)
}
func easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms5(in *jlexer.Lexer, out *GetMessagesForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages_count":
			out.MessagesCount = int(in.Int())
		case "ts":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ts).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms5(out *jwriter.Writer, in GetMessagesForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages_count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MessagesCount))
	}
	if true {
		const prefix string = ",\"ts\":"
		out.RawString(prefix)
		out.Raw((in.Ts).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMessagesForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMessagesForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8575bbc1EncodeQuickflowGatewayInternalDeliveryHttpForms5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMessagesForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMessagesForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8575bbc1DecodeQuickflowGatewayInternalDeliveryHttpForms5(l, v)
}
