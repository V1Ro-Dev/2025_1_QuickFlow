// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package forms

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	models "quickflow/shared/models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms(in *jlexer.Lexer, out *UpdatePostForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "media":
			if in.IsNull() {
				in.Skip()
				out.Media = nil
			} else {
				in.Delim('[')
				if out.Media == nil {
					if !in.IsDelim(']') {
						out.Media = make([]string, 0, 4)
					} else {
						out.Media = []string{}
					}
				} else {
					out.Media = (out.Media)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Media = append(out.Media, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				in.Delim('[')
				if out.Audio == nil {
					if !in.IsDelim(']') {
						out.Audio = make([]string, 0, 4)
					} else {
						out.Audio = []string{}
					}
				} else {
					out.Audio = (out.Audio)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Audio = append(out.Audio, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.File = nil
			} else {
				in.Delim('[')
				if out.File == nil {
					if !in.IsDelim(']') {
						out.File = make([]string, 0, 4)
					} else {
						out.File = []string{}
					}
				} else {
					out.File = (out.File)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.File = append(out.File, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms(out *jwriter.Writer, in UpdatePostForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if len(in.Media) != 0 {
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v4, v5 := range in.Media {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if len(in.Audio) != 0 {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.Audio {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.File) != 0 {
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.File {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePostForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePostForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePostForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePostForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms(l, v)
}
func easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms1(in *jlexer.Lexer, out *PublicUserInfoOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "firstname":
			out.FirstName = string(in.String())
		case "lastname":
			out.LastName = string(in.String())
		case "online":
			if in.IsNull() {
				in.Skip()
				out.IsOnline = nil
			} else {
				if out.IsOnline == nil {
					out.IsOnline = new(bool)
				}
				*out.IsOnline = bool(in.Bool())
			}
		case "relation":
			out.Relation = models.UserRelation(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms1(out *jwriter.Writer, in PublicUserInfoOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.AvatarURL != "" {
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"firstname\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastname\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if in.IsOnline != nil {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsOnline))
	}
	if in.Relation != "" {
		const prefix string = ",\"relation\":"
		out.RawString(prefix)
		out.String(string(in.Relation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublicUserInfoOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicUserInfoOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicUserInfoOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicUserInfoOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms1(l, v)
}
func easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms2(in *jlexer.Lexer, out *PostsOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PostsOut, 0, 0)
			} else {
				*out = PostsOut{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 PostOut
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms2(out *jwriter.Writer, in PostsOut) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PostsOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostsOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostsOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostsOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms2(l, v)
}
func easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms3(in *jlexer.Lexer, out *PostOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "author":
			if m, ok := out.Creator.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Creator.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Creator = in.Interface()
			}
		case "author_type":
			out.CreatorType = string(in.String())
		case "text":
			out.Desc = string(in.String())
		case "media":
			if in.IsNull() {
				in.Skip()
				out.MediaURLs = nil
			} else {
				in.Delim('[')
				if out.MediaURLs == nil {
					if !in.IsDelim(']') {
						out.MediaURLs = make([]FileOut, 0, 2)
					} else {
						out.MediaURLs = []FileOut{}
					}
				} else {
					out.MediaURLs = (out.MediaURLs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 FileOut
					easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms4(in, &v13)
					out.MediaURLs = append(out.MediaURLs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.AudioURLs = nil
			} else {
				in.Delim('[')
				if out.AudioURLs == nil {
					if !in.IsDelim(']') {
						out.AudioURLs = make([]FileOut, 0, 2)
					} else {
						out.AudioURLs = []FileOut{}
					}
				} else {
					out.AudioURLs = (out.AudioURLs)[:0]
				}
				for !in.IsDelim(']') {
					var v14 FileOut
					easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms4(in, &v14)
					out.AudioURLs = append(out.AudioURLs, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.FileURLs = nil
			} else {
				in.Delim('[')
				if out.FileURLs == nil {
					if !in.IsDelim(']') {
						out.FileURLs = make([]FileOut, 0, 2)
					} else {
						out.FileURLs = []FileOut{}
					}
				} else {
					out.FileURLs = (out.FileURLs)[:0]
				}
				for !in.IsDelim(']') {
					var v15 FileOut
					easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms4(in, &v15)
					out.FileURLs = append(out.FileURLs, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.StickerURLs = nil
			} else {
				in.Delim('[')
				if out.StickerURLs == nil {
					if !in.IsDelim(']') {
						out.StickerURLs = make([]FileOut, 0, 2)
					} else {
						out.StickerURLs = []FileOut{}
					}
				} else {
					out.StickerURLs = (out.StickerURLs)[:0]
				}
				for !in.IsDelim(']') {
					var v16 FileOut
					easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms4(in, &v16)
					out.StickerURLs = append(out.StickerURLs, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "like_count":
			out.LikeCount = int(in.Int())
		case "repost_count":
			out.RepostCount = int(in.Int())
		case "comment_count":
			out.CommentCount = int(in.Int())
		case "is_repost":
			out.IsRepost = bool(in.Bool())
		case "is_liked":
			out.IsLiked = bool(in.Bool())
		case "last_comment":
			if in.IsNull() {
				in.Skip()
				out.LastComment = nil
			} else {
				if out.LastComment == nil {
					out.LastComment = new(CommentOut)
				}
				(*out.LastComment).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms3(out *jwriter.Writer, in PostOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	if in.Creator != nil {
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		if m, ok := in.Creator.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Creator.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Creator))
		}
	}
	{
		const prefix string = ",\"author_type\":"
		out.RawString(prefix)
		out.String(string(in.CreatorType))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Desc))
	}
	if len(in.MediaURLs) != 0 {
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.MediaURLs {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms4(out, v18)
			}
			out.RawByte(']')
		}
	}
	if len(in.AudioURLs) != 0 {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v19, v20 := range in.AudioURLs {
				if v19 > 0 {
					out.RawByte(',')
				}
				easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms4(out, v20)
			}
			out.RawByte(']')
		}
	}
	if len(in.FileURLs) != 0 {
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v21, v22 := range in.FileURLs {
				if v21 > 0 {
					out.RawByte(',')
				}
				easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms4(out, v22)
			}
			out.RawByte(']')
		}
	}
	if len(in.StickerURLs) != 0 {
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.StickerURLs {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms4(out, v24)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"like_count\":"
		out.RawString(prefix)
		out.Int(int(in.LikeCount))
	}
	{
		const prefix string = ",\"repost_count\":"
		out.RawString(prefix)
		out.Int(int(in.RepostCount))
	}
	{
		const prefix string = ",\"comment_count\":"
		out.RawString(prefix)
		out.Int(int(in.CommentCount))
	}
	{
		const prefix string = ",\"is_repost\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRepost))
	}
	{
		const prefix string = ",\"is_liked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	if in.LastComment != nil {
		const prefix string = ",\"last_comment\":"
		out.RawString(prefix)
		(*in.LastComment).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms3(l, v)
}
func easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms4(in *jlexer.Lexer, out *FileOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms4(out *jwriter.Writer, in FileOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms5(in *jlexer.Lexer, out *PostForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "media":
			if in.IsNull() {
				in.Skip()
				out.Media = nil
			} else {
				in.Delim('[')
				if out.Media == nil {
					if !in.IsDelim(']') {
						out.Media = make([]string, 0, 4)
					} else {
						out.Media = []string{}
					}
				} else {
					out.Media = (out.Media)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Media = append(out.Media, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				in.Delim('[')
				if out.Audio == nil {
					if !in.IsDelim(']') {
						out.Audio = make([]string, 0, 4)
					} else {
						out.Audio = []string{}
					}
				} else {
					out.Audio = (out.Audio)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.Audio = append(out.Audio, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.File = nil
			} else {
				in.Delim('[')
				if out.File == nil {
					if !in.IsDelim(']') {
						out.File = make([]string, 0, 4)
					} else {
						out.File = []string{}
					}
				} else {
					out.File = (out.File)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.File = append(out.File, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.Stickers = nil
			} else {
				in.Delim('[')
				if out.Stickers == nil {
					if !in.IsDelim(']') {
						out.Stickers = make([]string, 0, 4)
					} else {
						out.Stickers = []string{}
					}
				} else {
					out.Stickers = (out.Stickers)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Stickers = append(out.Stickers, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_repost":
			out.IsRepost = bool(in.Bool())
		case "author_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CreatorId).UnmarshalText(data))
			}
		case "author_type":
			out.CreatorType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms5(out *jwriter.Writer, in PostForm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Text != "" {
		const prefix string = ",\"text\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	if len(in.Media) != 0 {
		const prefix string = ",\"media\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Media {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	if len(in.Audio) != 0 {
		const prefix string = ",\"audio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.Audio {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if len(in.File) != 0 {
		const prefix string = ",\"files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.File {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.Stickers) != 0 {
		const prefix string = ",\"stickers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Stickers {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if in.IsRepost {
		const prefix string = ",\"is_repost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsRepost))
	}
	if true {
		const prefix string = ",\"author_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.CreatorId).MarshalText())
	}
	if in.CreatorType != "" {
		const prefix string = ",\"author_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CreatorType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms5(l, v)
}
func easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms6(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms6(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms6(l, v)
}
func easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms7(in *jlexer.Lexer, out *FeedForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "posts_count":
			out.Posts = int(in.Int())
		case "ts":
			out.Ts = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms7(out *jwriter.Writer, in FeedForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"posts_count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Posts))
	}
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix)
		out.String(string(in.Ts))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FeedForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FeedForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAdacf256EncodeQuickflowGatewayInternalDeliveryHttpForms7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FeedForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FeedForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAdacf256DecodeQuickflowGatewayInternalDeliveryHttpForms7(l, v)
}
