// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package forms

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	models "quickflow/shared/models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms(in *jlexer.Lexer, out *PaginationForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "ts":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ts).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms(out *jwriter.Writer, in PaginationForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix)
		out.Raw((in.Ts).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaginationForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaginationForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaginationForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaginationForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms(l, v)
}
func easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms1(in *jlexer.Lexer, out *CommunityMemberOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = string(in.String())
		case "community_id":
			out.CommunityId = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "joined_at":
			out.JoinedAt = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "firstname":
			out.FirstName = string(in.String())
		case "lastname":
			out.LastName = string(in.String())
		case "online":
			if in.IsNull() {
				in.Skip()
				out.IsOnline = nil
			} else {
				if out.IsOnline == nil {
					out.IsOnline = new(bool)
				}
				*out.IsOnline = bool(in.Bool())
			}
		case "relation":
			out.Relation = models.UserRelation(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms1(out *jwriter.Writer, in CommunityMemberOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"community_id\":"
		out.RawString(prefix)
		out.String(string(in.CommunityId))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"joined_at\":"
		out.RawString(prefix)
		out.String(string(in.JoinedAt))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.AvatarURL != "" {
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"firstname\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastname\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if in.IsOnline != nil {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsOnline))
	}
	if in.Relation != "" {
		const prefix string = ",\"relation\":"
		out.RawString(prefix)
		out.String(string(in.Relation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommunityMemberOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommunityMemberOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommunityMemberOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommunityMemberOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms1(l, v)
}
func easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms2(in *jlexer.Lexer, out *CommunityInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nickname":
			out.NickName = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "cover_url":
			out.CoverUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms2(out *jwriter.Writer, in CommunityInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix[1:])
		out.String(string(in.NickName))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarUrl))
	}
	{
		const prefix string = ",\"cover_url\":"
		out.RawString(prefix)
		out.String(string(in.CoverUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommunityInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommunityInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommunityInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommunityInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms2(l, v)
}
func easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms3(in *jlexer.Lexer, out *CommunityForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(PublicUserInfoOut)
				}
				easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms4(in, out.Owner)
			}
		case "owner_id":
			out.OwnerId = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "community":
			if in.IsNull() {
				in.Skip()
				out.CommunityInfo = nil
			} else {
				if out.CommunityInfo == nil {
					out.CommunityInfo = new(CommunityInfo)
				}
				(*out.CommunityInfo).UnmarshalEasyJSON(in)
			}
		case "contact_info":
			if in.IsNull() {
				in.Skip()
				out.ContactInfo = nil
			} else {
				if out.ContactInfo == nil {
					out.ContactInfo = new(ContactInfo)
				}
				(*out.ContactInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms3(out *jwriter.Writer, in CommunityForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		if in.Owner == nil {
			out.RawString("null")
		} else {
			easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms4(out, *in.Owner)
		}
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.String(string(in.OwnerId))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"community\":"
		out.RawString(prefix)
		if in.CommunityInfo == nil {
			out.RawString("null")
		} else {
			(*in.CommunityInfo).MarshalEasyJSON(out)
		}
	}
	if in.ContactInfo != nil {
		const prefix string = ",\"contact_info\":"
		out.RawString(prefix)
		(*in.ContactInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommunityForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommunityForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommunityForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommunityForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms3(l, v)
}
func easyjson798dd0c9DecodeQuickflowGatewayInternalDeliveryHttpForms4(in *jlexer.Lexer, out *PublicUserInfoOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "firstname":
			out.FirstName = string(in.String())
		case "lastname":
			out.LastName = string(in.String())
		case "online":
			if in.IsNull() {
				in.Skip()
				out.IsOnline = nil
			} else {
				if out.IsOnline == nil {
					out.IsOnline = new(bool)
				}
				*out.IsOnline = bool(in.Bool())
			}
		case "relation":
			out.Relation = models.UserRelation(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson798dd0c9EncodeQuickflowGatewayInternalDeliveryHttpForms4(out *jwriter.Writer, in PublicUserInfoOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.AvatarURL != "" {
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"firstname\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastname\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if in.IsOnline != nil {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsOnline))
	}
	if in.Relation != "" {
		const prefix string = ",\"relation\":"
		out.RawString(prefix)
		out.String(string(in.Relation))
	}
	out.RawByte('}')
}
