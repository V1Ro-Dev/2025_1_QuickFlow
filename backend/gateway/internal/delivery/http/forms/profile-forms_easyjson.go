// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package forms

import (
	json "encoding/json"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	models "quickflow/shared/models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms(in *jlexer.Lexer, out *UniversityEducationForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "univ_city":
			out.UniversityCity = string(in.String())
		case "univ_name":
			out.UniversityName = string(in.String())
		case "faculty":
			out.UniversityFaculty = string(in.String())
		case "grad_year":
			out.GraduationYear = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms(out *jwriter.Writer, in UniversityEducationForm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UniversityCity != "" {
		const prefix string = ",\"univ_city\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UniversityCity))
	}
	if in.UniversityName != "" {
		const prefix string = ",\"univ_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UniversityName))
	}
	if in.UniversityFaculty != "" {
		const prefix string = ",\"faculty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UniversityFaculty))
	}
	if in.GraduationYear != 0 {
		const prefix string = ",\"grad_year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GraduationYear))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UniversityEducationForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UniversityEducationForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UniversityEducationForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UniversityEducationForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms(l, v)
}
func easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms1(in *jlexer.Lexer, out *SchoolEducationForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "school_city":
			out.SchoolCity = string(in.String())
		case "school_name":
			out.SchoolName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms1(out *jwriter.Writer, in SchoolEducationForm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SchoolCity != "" {
		const prefix string = ",\"school_city\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SchoolCity))
	}
	if in.SchoolName != "" {
		const prefix string = ",\"school_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SchoolName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SchoolEducationForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SchoolEducationForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SchoolEducationForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SchoolEducationForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms1(l, v)
}
func easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms2(in *jlexer.Lexer, out *ProfileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "firstname":
			out.Name = string(in.String())
		case "lastname":
			out.Surname = string(in.String())
		case "sex":
			out.Sex = models.Sex(in.Int())
		case "birth_date":
			out.DateOfBirth = string(in.String())
		case "bio":
			out.Bio = string(in.String())
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "cover_url":
			out.BackgroundUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms2(out *jwriter.Writer, in ProfileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Username != "" {
		const prefix string = ",\"username\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"firstname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"lastname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.Int(int(in.Sex))
	}
	{
		const prefix string = ",\"birth_date\":"
		out.RawString(prefix)
		out.String(string(in.DateOfBirth))
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	if in.AvatarUrl != "" {
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarUrl))
	}
	if in.BackgroundUrl != "" {
		const prefix string = ",\"cover_url\":"
		out.RawString(prefix)
		out.String(string(in.BackgroundUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms2(l, v)
}
func easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms3(in *jlexer.Lexer, out *ProfileForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "profile":
			if in.IsNull() {
				in.Skip()
				out.ProfileInfo = nil
			} else {
				if out.ProfileInfo == nil {
					out.ProfileInfo = new(ProfileInfo)
				}
				(*out.ProfileInfo).UnmarshalEasyJSON(in)
			}
		case "contact_info":
			if in.IsNull() {
				in.Skip()
				out.ContactInfo = nil
			} else {
				if out.ContactInfo == nil {
					out.ContactInfo = new(ContactInfo)
				}
				(*out.ContactInfo).UnmarshalEasyJSON(in)
			}
		case "school":
			if in.IsNull() {
				in.Skip()
				out.SchoolEducation = nil
			} else {
				if out.SchoolEducation == nil {
					out.SchoolEducation = new(SchoolEducationForm)
				}
				(*out.SchoolEducation).UnmarshalEasyJSON(in)
			}
		case "university":
			if in.IsNull() {
				in.Skip()
				out.UniversityEducation = nil
			} else {
				if out.UniversityEducation == nil {
					out.UniversityEducation = new(UniversityEducationForm)
				}
				(*out.UniversityEducation).UnmarshalEasyJSON(in)
			}
		case "last_seen":
			out.LastSeen = string(in.String())
		case "online":
			if in.IsNull() {
				in.Skip()
				out.IsOnline = nil
			} else {
				if out.IsOnline == nil {
					out.IsOnline = new(bool)
				}
				*out.IsOnline = bool(in.Bool())
			}
		case "relation":
			out.Relation = models.UserRelation(in.String())
		case "chat_id":
			if in.IsNull() {
				in.Skip()
				out.ChatId = nil
			} else {
				if out.ChatId == nil {
					out.ChatId = new(uuid.UUID)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.ChatId).UnmarshalText(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms3(out *jwriter.Writer, in ProfileForm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"profile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProfileInfo == nil {
			out.RawString("null")
		} else {
			(*in.ProfileInfo).MarshalEasyJSON(out)
		}
	}
	if in.ContactInfo != nil {
		const prefix string = ",\"contact_info\":"
		out.RawString(prefix)
		(*in.ContactInfo).MarshalEasyJSON(out)
	}
	if in.SchoolEducation != nil {
		const prefix string = ",\"school\":"
		out.RawString(prefix)
		(*in.SchoolEducation).MarshalEasyJSON(out)
	}
	if in.UniversityEducation != nil {
		const prefix string = ",\"university\":"
		out.RawString(prefix)
		(*in.UniversityEducation).MarshalEasyJSON(out)
	}
	if in.LastSeen != "" {
		const prefix string = ",\"last_seen\":"
		out.RawString(prefix)
		out.String(string(in.LastSeen))
	}
	if in.IsOnline != nil {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsOnline))
	}
	if in.Relation != "" {
		const prefix string = ",\"relation\":"
		out.RawString(prefix)
		out.String(string(in.Relation))
	}
	if in.ChatId != nil {
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix)
		out.RawText((*in.ChatId).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms3(l, v)
}
func easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms4(in *jlexer.Lexer, out *ContactInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "city":
			out.City = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms4(out *jwriter.Writer, in ContactInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.City != "" {
		const prefix string = ",\"city\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.City))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Phone != "" {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContactInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContactInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContactInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContactInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms4(l, v)
}
func easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms5(in *jlexer.Lexer, out *Activity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "last_seen":
			out.LastSeen = string(in.String())
		case "online":
			out.IsOnline = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms5(out *jwriter.Writer, in Activity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LastSeen != "" {
		const prefix string = ",\"last_seen\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.LastSeen))
	}
	if in.IsOnline {
		const prefix string = ",\"online\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsOnline))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Activity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Activity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d4c10bbEncodeQuickflowGatewayInternalDeliveryHttpForms5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Activity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Activity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d4c10bbDecodeQuickflowGatewayInternalDeliveryHttpForms5(l, v)
}
