// Code generated by MockGen. DO NOT EDIT.
// Source: .//gateway/internal/delivery/http/feedback-handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockFeedbackUseCase is a mock of FeedbackUseCase interface.
type MockFeedbackUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackUseCaseMockRecorder
}

// MockFeedbackUseCaseMockRecorder is the mock recorder for MockFeedbackUseCase.
type MockFeedbackUseCaseMockRecorder struct {
	mock *MockFeedbackUseCase
}

// NewMockFeedbackUseCase creates a new mock instance.
func NewMockFeedbackUseCase(ctrl *gomock.Controller) *MockFeedbackUseCase {
	mock := &MockFeedbackUseCase{ctrl: ctrl}
	mock.recorder = &MockFeedbackUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackUseCase) EXPECT() *MockFeedbackUseCaseMockRecorder {
	return m.recorder
}

// GetAllFeedbackType mocks base method.
func (m *MockFeedbackUseCase) GetAllFeedbackType(ctx context.Context, feedbackType models.FeedbackType, ts time.Time, count int) ([]models.Feedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFeedbackType", ctx, feedbackType, ts, count)
	ret0, _ := ret[0].([]models.Feedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFeedbackType indicates an expected call of GetAllFeedbackType.
func (mr *MockFeedbackUseCaseMockRecorder) GetAllFeedbackType(ctx, feedbackType, ts, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFeedbackType", reflect.TypeOf((*MockFeedbackUseCase)(nil).GetAllFeedbackType), ctx, feedbackType, ts, count)
}

// SaveFeedback mocks base method.
func (m *MockFeedbackUseCase) SaveFeedback(ctx context.Context, feedback *models.Feedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFeedback", ctx, feedback)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFeedback indicates an expected call of SaveFeedback.
func (mr *MockFeedbackUseCaseMockRecorder) SaveFeedback(ctx, feedback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFeedback", reflect.TypeOf((*MockFeedbackUseCase)(nil).SaveFeedback), ctx, feedback)
}
