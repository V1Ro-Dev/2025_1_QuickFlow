// Code generated by MockGen. DO NOT EDIT.
// Source: .//gateway/internal/delivery/http/comment-handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockCommentService) AddComment(ctx context.Context, comment models.Comment) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, comment)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockCommentServiceMockRecorder) AddComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockCommentService)(nil).AddComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockCommentService) DeleteComment(ctx context.Context, userId, commentId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, userId, commentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentServiceMockRecorder) DeleteComment(ctx, userId, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentService)(nil).DeleteComment), ctx, userId, commentId)
}

// FetchCommentsForPost mocks base method.
func (m *MockCommentService) FetchCommentsForPost(ctx context.Context, postId uuid.UUID, numComments int, timestamp time.Time) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCommentsForPost", ctx, postId, numComments, timestamp)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCommentsForPost indicates an expected call of FetchCommentsForPost.
func (mr *MockCommentServiceMockRecorder) FetchCommentsForPost(ctx, postId, numComments, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCommentsForPost", reflect.TypeOf((*MockCommentService)(nil).FetchCommentsForPost), ctx, postId, numComments, timestamp)
}

// GetComment mocks base method.
func (m *MockCommentService) GetComment(ctx context.Context, commentId, userId uuid.UUID) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, commentId, userId)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockCommentServiceMockRecorder) GetComment(ctx, commentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentService)(nil).GetComment), ctx, commentId, userId)
}

// GetLastPostComment mocks base method.
func (m *MockCommentService) GetLastPostComment(ctx context.Context, postId uuid.UUID) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPostComment", ctx, postId)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPostComment indicates an expected call of GetLastPostComment.
func (mr *MockCommentServiceMockRecorder) GetLastPostComment(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPostComment", reflect.TypeOf((*MockCommentService)(nil).GetLastPostComment), ctx, postId)
}

// LikeComment mocks base method.
func (m *MockCommentService) LikeComment(ctx context.Context, commentId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeComment", ctx, commentId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeComment indicates an expected call of LikeComment.
func (mr *MockCommentServiceMockRecorder) LikeComment(ctx, commentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeComment", reflect.TypeOf((*MockCommentService)(nil).LikeComment), ctx, commentId, userId)
}

// UnlikeComment mocks base method.
func (m *MockCommentService) UnlikeComment(ctx context.Context, commentId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeComment", ctx, commentId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeComment indicates an expected call of UnlikeComment.
func (mr *MockCommentServiceMockRecorder) UnlikeComment(ctx, commentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeComment", reflect.TypeOf((*MockCommentService)(nil).UnlikeComment), ctx, commentId, userId)
}

// UpdateComment mocks base method.
func (m *MockCommentService) UpdateComment(ctx context.Context, update models.CommentUpdate, userId uuid.UUID) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, update, userId)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentServiceMockRecorder) UpdateComment(ctx, update, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentService)(nil).UpdateComment), ctx, update, userId)
}
