// Code generated by MockGen. DO NOT EDIT.
// Source: ./gateway/internal/delivery/http/community-handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCommunityService is a mock of CommunityService interface.
type MockCommunityService struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityServiceMockRecorder
}

// MockCommunityServiceMockRecorder is the mock recorder for MockCommunityService.
type MockCommunityServiceMockRecorder struct {
	mock *MockCommunityService
}

// NewMockCommunityService creates a new mock instance.
func NewMockCommunityService(ctrl *gomock.Controller) *MockCommunityService {
	mock := &MockCommunityService{ctrl: ctrl}
	mock.recorder = &MockCommunityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityService) EXPECT() *MockCommunityServiceMockRecorder {
	return m.recorder
}

// ChangeUserRole mocks base method.
func (m *MockCommunityService) ChangeUserRole(ctx context.Context, userId, communityId uuid.UUID, role models.CommunityRole, requester uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserRole", ctx, userId, communityId, role, requester)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserRole indicates an expected call of ChangeUserRole.
func (mr *MockCommunityServiceMockRecorder) ChangeUserRole(ctx, userId, communityId, role, requester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserRole", reflect.TypeOf((*MockCommunityService)(nil).ChangeUserRole), ctx, userId, communityId, role, requester)
}

// CreateCommunity mocks base method.
func (m *MockCommunityService) CreateCommunity(ctx context.Context, community *models.Community) (*models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommunity", ctx, community)
	ret0, _ := ret[0].(*models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommunity indicates an expected call of CreateCommunity.
func (mr *MockCommunityServiceMockRecorder) CreateCommunity(ctx, community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunity", reflect.TypeOf((*MockCommunityService)(nil).CreateCommunity), ctx, community)
}

// DeleteCommunity mocks base method.
func (m *MockCommunityService) DeleteCommunity(ctx context.Context, communityId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunity", ctx, communityId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommunity indicates an expected call of DeleteCommunity.
func (mr *MockCommunityServiceMockRecorder) DeleteCommunity(ctx, communityId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunity", reflect.TypeOf((*MockCommunityService)(nil).DeleteCommunity), ctx, communityId, userId)
}

// GetCommunityById mocks base method.
func (m *MockCommunityService) GetCommunityById(ctx context.Context, id uuid.UUID) (*models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityById", ctx, id)
	ret0, _ := ret[0].(*models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityById indicates an expected call of GetCommunityById.
func (mr *MockCommunityServiceMockRecorder) GetCommunityById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityById", reflect.TypeOf((*MockCommunityService)(nil).GetCommunityById), ctx, id)
}

// GetCommunityByName mocks base method.
func (m *MockCommunityService) GetCommunityByName(ctx context.Context, name string) (*models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityByName", ctx, name)
	ret0, _ := ret[0].(*models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityByName indicates an expected call of GetCommunityByName.
func (mr *MockCommunityServiceMockRecorder) GetCommunityByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityByName", reflect.TypeOf((*MockCommunityService)(nil).GetCommunityByName), ctx, name)
}

// GetCommunityMembers mocks base method.
func (m *MockCommunityService) GetCommunityMembers(ctx context.Context, communityId uuid.UUID, count int, ts time.Time) ([]*models.CommunityMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityMembers", ctx, communityId, count, ts)
	ret0, _ := ret[0].([]*models.CommunityMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityMembers indicates an expected call of GetCommunityMembers.
func (mr *MockCommunityServiceMockRecorder) GetCommunityMembers(ctx, communityId, count, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityMembers", reflect.TypeOf((*MockCommunityService)(nil).GetCommunityMembers), ctx, communityId, count, ts)
}

// GetControlledCommunities mocks base method.
func (m *MockCommunityService) GetControlledCommunities(ctx context.Context, userId uuid.UUID, count int, ts time.Time) ([]*models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlledCommunities", ctx, userId, count, ts)
	ret0, _ := ret[0].([]*models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlledCommunities indicates an expected call of GetControlledCommunities.
func (mr *MockCommunityServiceMockRecorder) GetControlledCommunities(ctx, userId, count, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlledCommunities", reflect.TypeOf((*MockCommunityService)(nil).GetControlledCommunities), ctx, userId, count, ts)
}

// GetUserCommunities mocks base method.
func (m *MockCommunityService) GetUserCommunities(ctx context.Context, userId uuid.UUID, count int, ts time.Time) ([]*models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCommunities", ctx, userId, count, ts)
	ret0, _ := ret[0].([]*models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCommunities indicates an expected call of GetUserCommunities.
func (mr *MockCommunityServiceMockRecorder) GetUserCommunities(ctx, userId, count, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCommunities", reflect.TypeOf((*MockCommunityService)(nil).GetUserCommunities), ctx, userId, count, ts)
}

// IsCommunityMember mocks base method.
func (m *MockCommunityService) IsCommunityMember(ctx context.Context, userId, communityId uuid.UUID) (bool, *models.CommunityRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommunityMember", ctx, userId, communityId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*models.CommunityRole)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsCommunityMember indicates an expected call of IsCommunityMember.
func (mr *MockCommunityServiceMockRecorder) IsCommunityMember(ctx, userId, communityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommunityMember", reflect.TypeOf((*MockCommunityService)(nil).IsCommunityMember), ctx, userId, communityId)
}

// JoinCommunity mocks base method.
func (m *MockCommunityService) JoinCommunity(ctx context.Context, member *models.CommunityMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinCommunity", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinCommunity indicates an expected call of JoinCommunity.
func (mr *MockCommunityServiceMockRecorder) JoinCommunity(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinCommunity", reflect.TypeOf((*MockCommunityService)(nil).JoinCommunity), ctx, member)
}

// LeaveCommunity mocks base method.
func (m *MockCommunityService) LeaveCommunity(ctx context.Context, userId, communityId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveCommunity", ctx, userId, communityId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveCommunity indicates an expected call of LeaveCommunity.
func (mr *MockCommunityServiceMockRecorder) LeaveCommunity(ctx, userId, communityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCommunity", reflect.TypeOf((*MockCommunityService)(nil).LeaveCommunity), ctx, userId, communityId)
}

// SearchSimilarCommunities mocks base method.
func (m *MockCommunityService) SearchSimilarCommunities(ctx context.Context, name string, count int) ([]*models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSimilarCommunities", ctx, name, count)
	ret0, _ := ret[0].([]*models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSimilarCommunities indicates an expected call of SearchSimilarCommunities.
func (mr *MockCommunityServiceMockRecorder) SearchSimilarCommunities(ctx, name, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSimilarCommunities", reflect.TypeOf((*MockCommunityService)(nil).SearchSimilarCommunities), ctx, name, count)
}

// UpdateCommunity mocks base method.
func (m *MockCommunityService) UpdateCommunity(ctx context.Context, community *models.Community, userId uuid.UUID) (*models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommunity", ctx, community, userId)
	ret0, _ := ret[0].(*models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCommunity indicates an expected call of UpdateCommunity.
func (mr *MockCommunityServiceMockRecorder) UpdateCommunity(ctx, community, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunity", reflect.TypeOf((*MockCommunityService)(nil).UpdateCommunity), ctx, community, userId)
}
