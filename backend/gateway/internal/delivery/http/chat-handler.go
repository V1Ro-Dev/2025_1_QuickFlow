package http

import (
	"context"
	"errors"
	"net/http"
	"time"

	"github.com/google/uuid"
	"github.com/mailru/easyjson"

	time2 "quickflow/config/time"
	"quickflow/gateway/internal/delivery/http/forms"
	errors2 "quickflow/gateway/internal/errors"
	http2 "quickflow/gateway/utils/http"
	"quickflow/shared/logger"
	"quickflow/shared/models"
)

type ChatUseCase interface {
	GetChatParticipants(ctx context.Context, chatId uuid.UUID) ([]uuid.UUID, error)
	GetUserChats(ctx context.Context, userId uuid.UUID, numChats int, ts time.Time) ([]models.Chat, error)
	GetPrivateChat(ctx context.Context, userId1, userId2 uuid.UUID) (*models.Chat, error)
	DeleteChat(ctx context.Context, chatId uuid.UUID) error
	GetChat(ctx context.Context, chatId uuid.UUID) (*models.Chat, error)
	JoinChat(ctx context.Context, chatId, userId uuid.UUID) error
	LeaveChat(ctx context.Context, chatId, userId uuid.UUID) error
	GetNumUnreadChats(ctx context.Context, userId uuid.UUID) (int, error)
}

type ChatHandler struct {
	chatUseCase    ChatUseCase
	messageService MessageService
	profileUseCase ProfileUseCase
	connService    IWebSocketConnectionManager
}

func NewChatHandler(chatUseCase ChatUseCase, profileUseCase ProfileUseCase, messageService MessageService, connService IWebSocketConnectionManager) *ChatHandler {
	return &ChatHandler{
		chatUseCase:    chatUseCase,
		profileUseCase: profileUseCase,
		connService:    connService,
		messageService: messageService,
	}
}

// GetUserChats godoc
// @Summary Get user chats
// @Description Get user chats
// @Tags Chats
// @Accept json
// @Produce json
// @Param ts query string false "Timestamp"
// @Param chats_count query int true "Number of chats"
// @Success 200 {array} forms.ChatOut "List of chats"
// @Failure 400 {object} forms.ErrorForm "Invalid data"
// @Failure 403 {object} forms.ErrorForm "User is not a participant in the chat"
// @Failure 500 {object} forms.ErrorForm "Server error"
// @Router /api/chats [get]
func (c *ChatHandler) GetUserChats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	logger.Info(ctx, "Got GetUserChats request")

	user, ok := ctx.Value(logger.Username).(models.User)
	if !ok {
		logger.Error(ctx, "Failed to get user from context while fetching messages")
		http2.WriteJSONError(w, errors2.New(errors2.InternalErrorCode, "Failed to get user from context", http.StatusInternalServerError))
		return
	}

	var chatForm forms.GetChatsForm
	err := chatForm.GetParams(r.URL.Query())
	if err != nil {
		logger.Error(ctx, "Failed to parse query params: %v", err)
		http2.WriteJSONError(w, errors2.New("BAD_REQUEST", "Failed to parse query params", http.StatusBadRequest))
		return
	}

	logger.Info(ctx, "Fetching feed for user %s with %d posts with timestamp %v (autogenerated: %t)",
		user.Username, chatForm.ChatsCount, chatForm.Ts, !r.URL.Query().Has("ts"))

	chats, err := c.chatUseCase.GetUserChats(ctx, user.Id, chatForm.ChatsCount, chatForm.Ts)
	if err != nil {
		logger.Error(ctx, "Failed to fetch chats: %v", err)
		http2.WriteJSONError(w, err)
		return
	}

	logger.Info(ctx, "Fetched %d chats for user %s", len(chats), user.Username)

	var senders []uuid.UUID
	for _, chat := range chats {
		senders = append(senders, chat.LastMessage.SenderID)
	}

	var publicInfos []models.PublicUserInfo
	if len(senders) != 0 {
		publicInfos, err = c.profileUseCase.GetPublicUsersInfo(ctx, senders)
		if err != nil {
			logger.Error(ctx, "Error while fetching last messages users info: %v", err)
			http2.WriteJSONError(w, err)
			return
		}
	}
	lastMessageSenderInfo := make(map[uuid.UUID]models.PublicUserInfo)
	for _, info := range publicInfos {
		lastMessageSenderInfo[info.Id] = info
	}

	var (
		isOnline bool
		username string
		lastSeen time.Time
		chatsOut forms.ChatsOut
	)
	for _, chat := range chats {
		if chat.Type != models.ChatTypePrivate {
			continue
		}

		if chat.LastMessage.ID != uuid.Nil && chat.LastMessage.SenderID != user.Id {
			_, isOnline = c.connService.IsConnected(chat.LastMessage.SenderID)
			lastSeen = lastMessageSenderInfo[chat.LastMessage.SenderID].LastSeen
			username = lastMessageSenderInfo[chat.LastMessage.SenderID].Username
		} else {
			// Get the other participant's ID
			otherUser, err := c.getOtherPrivateChatParticipant(ctx, chat.ID, user.Id)
			if err != nil {
				logger.Error(ctx, "Failed to get other participant: %v", err)
				http2.WriteJSONError(w, err)
				return
			}
			_, isOnline = c.connService.IsConnected(otherUser)

			otherUserInfo, err := c.profileUseCase.GetPublicUserInfo(ctx, otherUser)
			if err != nil {
				logger.Error(ctx, "Failed to get other user info: %v", err)
				http2.WriteJSONError(w, err)
				return
			}
			lastSeen = otherUserInfo.LastSeen
			username = otherUserInfo.Username
		}

		numUnreadMessages, err := c.messageService.GetNumUnreadMessages(ctx, chat.ID, user.Id)
		if err != nil {
			logger.Error(ctx, "Failed to get number of unread messages: %v", err)
			http2.WriteJSONError(w, err)
			return
		}

		chatOut := forms.ToChatOut(chat, lastMessageSenderInfo[chat.LastMessage.SenderID], &forms.PrivateChatInfo{
			Username: username,
			Activity: forms.Activity{IsOnline: isOnline, LastSeen: lastSeen.Format(time2.TimeStampLayout)},
		})
		chatOut.NumUnreadMessages = numUnreadMessages
		chatsOut = append(chatsOut, chatOut)
	}

	w.Header().Set("Content-Type", "application/json")
	_, err = easyjson.MarshalToWriter(chatsOut, w)
	if err != nil {
		logger.Error(ctx, "Failed to encode chats: %s", err.Error())
		http2.WriteJSONError(w, errors2.New(errors2.InternalErrorCode, "Failed to encode chats", http.StatusInternalServerError))
		return
	}
}

func (c *ChatHandler) GetNumUnreadChats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	logger.Info(ctx, "Got GetNumUnreadChats request")
	user, ok := ctx.Value(logger.Username).(models.User)
	if !ok {
		logger.Error(ctx, "Failed to get user from context while fetching number of unread chats")
		http2.WriteJSONError(w, errors2.New(errors2.InternalErrorCode, "Failed to get user from context", http.StatusInternalServerError))
		return
	}

	numUnreadChats, err := c.chatUseCase.GetNumUnreadChats(ctx, user.Id)
	if err != nil {
		logger.Error(ctx, "Failed to get number of unread chats: %v", err)
		http2.WriteJSONError(w, err)
		return
	}

	logger.Info(ctx, "Fetched %d unread chats for user %s", numUnreadChats, user.Username)
	w.Header().Set("Content-Type", "application/json")
	out := forms.PayloadWrapper[forms.GetNumUnreadChatsForm]{Payload: forms.GetNumUnreadChatsForm{ChatsCount: numUnreadChats}}
	js, err := out.MarshalJSON()
	if err != nil {
		logger.Error(ctx, "Failed to marshal json response: %v", err)
		http2.WriteJSONError(w, err)
		return
	}
	_, err = w.Write(js)
	if err != nil {
		logger.Error(ctx, "Failed to encode number of unread chats: %s", err.Error())
		http2.WriteJSONError(w, errors2.New(errors2.InternalErrorCode, "Failed to encode number of unread chats", http.StatusInternalServerError))
		return
	}
}

func (c *ChatHandler) getOtherPrivateChatParticipant(ctx context.Context, chatId uuid.UUID, userId uuid.UUID) (uuid.UUID, error) {
	participants, err := c.chatUseCase.GetChatParticipants(ctx, chatId)
	if err != nil {
		err := errors2.FromGRPCError(err)
		logger.Error(ctx, "Failed to get chat participants: %v", err)
		return uuid.Nil, err
	}

	for _, participant := range participants {
		if participant != userId {
			return participant, nil
		}
	}
	return uuid.Nil, errors.New("user not found")
}
