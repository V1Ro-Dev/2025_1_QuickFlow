// Code generated by MockGen. DO NOT EDIT.
// Source: .//gateway/internal/delivery/ws/manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
)

// MockPingHandler is a mock of PingHandler interface.
type MockPingHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPingHandlerMockRecorder
}

// MockPingHandlerMockRecorder is the mock recorder for MockPingHandler.
type MockPingHandlerMockRecorder struct {
	mock *MockPingHandler
}

// NewMockPingHandler creates a new mock instance.
func NewMockPingHandler(ctrl *gomock.Controller) *MockPingHandler {
	mock := &MockPingHandler{ctrl: ctrl}
	mock.recorder = &MockPingHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingHandler) EXPECT() *MockPingHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockPingHandler) Handle(ctx context.Context, conn *websocket.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", ctx, conn)
}

// Handle indicates an expected call of Handle.
func (mr *MockPingHandlerMockRecorder) Handle(ctx, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPingHandler)(nil).Handle), ctx, conn)
}
