// Code generated by MockGen. DO NOT EDIT.
// Source: .//user_service/internal/delivery/grpc/profile_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockProfileUseCase is a mock of ProfileUseCase interface.
type MockProfileUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockProfileUseCaseMockRecorder
}

// MockProfileUseCaseMockRecorder is the mock recorder for MockProfileUseCase.
type MockProfileUseCaseMockRecorder struct {
	mock *MockProfileUseCase
}

// NewMockProfileUseCase creates a new mock instance.
func NewMockProfileUseCase(ctrl *gomock.Controller) *MockProfileUseCase {
	mock := &MockProfileUseCase{ctrl: ctrl}
	mock.recorder = &MockProfileUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileUseCase) EXPECT() *MockProfileUseCaseMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockProfileUseCase) CreateProfile(ctx context.Context, profile models.Profile) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, profile)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileUseCaseMockRecorder) CreateProfile(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileUseCase)(nil).CreateProfile), ctx, profile)
}

// GetProfile mocks base method.
func (m *MockProfileUseCase) GetProfile(ctx context.Context, userID uuid.UUID) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, userID)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfileUseCaseMockRecorder) GetProfile(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfileUseCase)(nil).GetProfile), ctx, userID)
}

// GetProfileByUsername mocks base method.
func (m *MockProfileUseCase) GetProfileByUsername(ctx context.Context, username string) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByUsername", ctx, username)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByUsername indicates an expected call of GetProfileByUsername.
func (mr *MockProfileUseCaseMockRecorder) GetProfileByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUsername", reflect.TypeOf((*MockProfileUseCase)(nil).GetProfileByUsername), ctx, username)
}

// GetPublicUserInfo mocks base method.
func (m *MockProfileUseCase) GetPublicUserInfo(ctx context.Context, userID uuid.UUID) (models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicUserInfo", ctx, userID)
	ret0, _ := ret[0].(models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicUserInfo indicates an expected call of GetPublicUserInfo.
func (mr *MockProfileUseCaseMockRecorder) GetPublicUserInfo(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicUserInfo", reflect.TypeOf((*MockProfileUseCase)(nil).GetPublicUserInfo), ctx, userID)
}

// GetPublicUsersInfo mocks base method.
func (m *MockProfileUseCase) GetPublicUsersInfo(ctx context.Context, userIds []uuid.UUID) ([]models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicUsersInfo", ctx, userIds)
	ret0, _ := ret[0].([]models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicUsersInfo indicates an expected call of GetPublicUsersInfo.
func (mr *MockProfileUseCaseMockRecorder) GetPublicUsersInfo(ctx, userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicUsersInfo", reflect.TypeOf((*MockProfileUseCase)(nil).GetPublicUsersInfo), ctx, userIds)
}

// UpdateLastSeen mocks base method.
func (m *MockProfileUseCase) UpdateLastSeen(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastSeen", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastSeen indicates an expected call of UpdateLastSeen.
func (mr *MockProfileUseCaseMockRecorder) UpdateLastSeen(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSeen", reflect.TypeOf((*MockProfileUseCase)(nil).UpdateLastSeen), ctx, userID)
}

// UpdateProfile mocks base method.
func (m *MockProfileUseCase) UpdateProfile(ctx context.Context, profile models.Profile) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, profile)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileUseCaseMockRecorder) UpdateProfile(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileUseCase)(nil).UpdateProfile), ctx, profile)
}
