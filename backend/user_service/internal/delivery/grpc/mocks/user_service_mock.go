// Code generated by MockGen. DO NOT EDIT.
// Source: .//user_service/internal/delivery/grpc/user_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockUserUseCase) AuthUser(ctx context.Context, authData models.LoginData) (models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, authData)
	ret0, _ := ret[0].(models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockUserUseCaseMockRecorder) AuthUser(ctx, authData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockUserUseCase)(nil).AuthUser), ctx, authData)
}

// CreateUser mocks base method.
func (m *MockUserUseCase) CreateUser(ctx context.Context, user models.User, profile models.Profile) (uuid.UUID, models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user, profile)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(models.Session)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUseCaseMockRecorder) CreateUser(ctx, user, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUseCase)(nil).CreateUser), ctx, user, profile)
}

// DeleteUserSession mocks base method.
func (m *MockUserUseCase) DeleteUserSession(ctx context.Context, session string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSession indicates an expected call of DeleteUserSession.
func (mr *MockUserUseCaseMockRecorder) DeleteUserSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSession", reflect.TypeOf((*MockUserUseCase)(nil).DeleteUserSession), ctx, session)
}

// GetUserById mocks base method.
func (m *MockUserUseCase) GetUserById(ctx context.Context, userId uuid.UUID) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userId)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserUseCaseMockRecorder) GetUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserUseCase)(nil).GetUserById), ctx, userId)
}

// GetUserByUsername mocks base method.
func (m *MockUserUseCase) GetUserByUsername(ctx context.Context, username string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserUseCaseMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserUseCase)(nil).GetUserByUsername), ctx, username)
}

// LookupUserSession mocks base method.
func (m *MockUserUseCase) LookupUserSession(ctx context.Context, session models.Session) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupUserSession", ctx, session)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupUserSession indicates an expected call of LookupUserSession.
func (mr *MockUserUseCaseMockRecorder) LookupUserSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUserSession", reflect.TypeOf((*MockUserUseCase)(nil).LookupUserSession), ctx, session)
}

// SearchSimilarUser mocks base method.
func (m *MockUserUseCase) SearchSimilarUser(ctx context.Context, toSearch string, usersCount uint) ([]models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSimilarUser", ctx, toSearch, usersCount)
	ret0, _ := ret[0].([]models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSimilarUser indicates an expected call of SearchSimilarUser.
func (mr *MockUserUseCaseMockRecorder) SearchSimilarUser(ctx, toSearch, usersCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSimilarUser", reflect.TypeOf((*MockUserUseCase)(nil).SearchSimilarUser), ctx, toSearch, usersCount)
}
