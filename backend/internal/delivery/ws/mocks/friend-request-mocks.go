// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/ws/friend-request-handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockFriendshipUseCase is a mock of FriendshipUseCase interface.
type MockFriendshipUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFriendshipUseCaseMockRecorder
}

// MockFriendshipUseCaseMockRecorder is the mock recorder for MockFriendshipUseCase.
type MockFriendshipUseCaseMockRecorder struct {
	mock *MockFriendshipUseCase
}

// NewMockFriendshipUseCase creates a new mock instance.
func NewMockFriendshipUseCase(ctrl *gomock.Controller) *MockFriendshipUseCase {
	mock := &MockFriendshipUseCase{ctrl: ctrl}
	mock.recorder = &MockFriendshipUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendshipUseCase) EXPECT() *MockFriendshipUseCaseMockRecorder {
	return m.recorder
}

// GetFriendRequests mocks base method.
func (m *MockFriendshipUseCase) GetFriendRequests(ctx context.Context, userID uuid.UUID) ([]models.FriendRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRequests", ctx, userID)
	ret0, _ := ret[0].([]models.FriendRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendRequests indicates an expected call of GetFriendRequests.
func (mr *MockFriendshipUseCaseMockRecorder) GetFriendRequests(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRequests", reflect.TypeOf((*MockFriendshipUseCase)(nil).GetFriendRequests), ctx, userID)
}

// RespondToRequest mocks base method.
func (m *MockFriendshipUseCase) RespondToRequest(ctx context.Context, requestID uuid.UUID, status models.FriendRequestStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToRequest", ctx, requestID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondToRequest indicates an expected call of RespondToRequest.
func (mr *MockFriendshipUseCaseMockRecorder) RespondToRequest(ctx, requestID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToRequest", reflect.TypeOf((*MockFriendshipUseCase)(nil).RespondToRequest), ctx, requestID, status)
}

// SendRequest mocks base method.
func (m *MockFriendshipUseCase) SendRequest(ctx context.Context, senderID, receiverID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", ctx, senderID, receiverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockFriendshipUseCaseMockRecorder) SendRequest(ctx, senderID, receiverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockFriendshipUseCase)(nil).SendRequest), ctx, senderID, receiverID)
}
