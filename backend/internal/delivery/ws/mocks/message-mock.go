// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/ws/message_handlerWS.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "quickflow/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMessageService is a mock of IMessageService interface.
type MockIMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageServiceMockRecorder
}

// MockIMessageServiceMockRecorder is the mock recorder for MockIMessageService.
type MockIMessageServiceMockRecorder struct {
	mock *MockIMessageService
}

// NewMockIMessageService creates a new mock instance.
func NewMockIMessageService(ctrl *gomock.Controller) *MockIMessageService {
	mock := &MockIMessageService{ctrl: ctrl}
	mock.recorder = &MockIMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageService) EXPECT() *MockIMessageServiceMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockIMessageService) SendMessage(message models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIMessageServiceMockRecorder) SendMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIMessageService)(nil).SendMessage), message)
}
