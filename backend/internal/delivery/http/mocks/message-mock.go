// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/http/message-handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockMessageUseCase is a mock of MessageUseCase interface.
type MockMessageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMessageUseCaseMockRecorder
}

// MockMessageUseCaseMockRecorder is the mock recorder for MockMessageUseCase.
type MockMessageUseCaseMockRecorder struct {
	mock *MockMessageUseCase
}

// NewMockMessageUseCase creates a new mock instance.
func NewMockMessageUseCase(ctrl *gomock.Controller) *MockMessageUseCase {
	mock := &MockMessageUseCase{ctrl: ctrl}
	mock.recorder = &MockMessageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageUseCase) EXPECT() *MockMessageUseCaseMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessageUseCase) DeleteMessage(ctx context.Context, messageId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageUseCaseMockRecorder) DeleteMessage(ctx, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageUseCase)(nil).DeleteMessage), ctx, messageId)
}

// GetMessagesForChat mocks base method.
func (m *MockMessageUseCase) GetMessagesForChat(ctx context.Context, chatId, userId uuid.UUID, numMessages int, timestamp time.Time) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesForChat", ctx, chatId, userId, numMessages, timestamp)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesForChat indicates an expected call of GetMessagesForChat.
func (mr *MockMessageUseCaseMockRecorder) GetMessagesForChat(ctx, chatId, userId, numMessages, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesForChat", reflect.TypeOf((*MockMessageUseCase)(nil).GetMessagesForChat), ctx, chatId, userId, numMessages, timestamp)
}

// MarkRead mocks base method.
func (m *MockMessageUseCase) MarkRead(ctx context.Context, messageId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRead", ctx, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRead indicates an expected call of MarkRead.
func (mr *MockMessageUseCaseMockRecorder) MarkRead(ctx, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRead", reflect.TypeOf((*MockMessageUseCase)(nil).MarkRead), ctx, messageId)
}

// SaveMessage mocks base method.
func (m *MockMessageUseCase) SaveMessage(ctx context.Context, message models.Message) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", ctx, message)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockMessageUseCaseMockRecorder) SaveMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockMessageUseCase)(nil).SaveMessage), ctx, message)
}
