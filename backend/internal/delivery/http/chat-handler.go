package http

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"

	"github.com/google/uuid"

	"quickflow/internal/delivery/forms"
	"quickflow/internal/models"
	"quickflow/internal/usecase"
	"quickflow/pkg/logger"
	http2 "quickflow/utils/http"
)

type ChatUseCase interface {
	CreateChat(ctx context.Context, chatInfo models.ChatCreationInfo) (models.Chat, error)
	GetChatParticipants(ctx context.Context, chatId uuid.UUID) ([]models.User, error)
	GetUserChats(ctx context.Context, userId uuid.UUID) ([]models.Chat, error)
	DeleteChat(ctx context.Context, chatId uuid.UUID) error
	GetChat(ctx context.Context, chatId uuid.UUID) (models.Chat, error)
	JoinChat(ctx context.Context, chatId, userId uuid.UUID) error
	LeaveChat(ctx context.Context, chatId, userId uuid.UUID) error
}

type ChatHandler struct {
	chatUseCase ChatUseCase
}

func NewChatHandler(chatUseCase ChatUseCase) *ChatHandler {
	return &ChatHandler{
		chatUseCase: chatUseCase,
	}
}

// GetUserChats godoc
// @Summary Get user chats
// @Description Get user chats
// @Tags Chats
// @Accept json
// @Produce json
// @Param ts query string false "Timestamp"
// @Param chats_count query int true "Number of chats"
// @Success 200 {array} forms.ChatOut "List of chats"
// @Failure 400 {object} forms.ErrorForm "Invalid data"
// @Failure 403 {object} forms.ErrorForm "User is not a participant in the chat"
// @Failure 500 {object} forms.ErrorForm "Server error"
// @Router /api/chats [get]
func (c *ChatHandler) GetUserChats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	logger.Info(ctx, "Got GetUserChats request")

	user, ok := ctx.Value("user").(models.User)
	if !ok {
		logger.Error(ctx, "Failed to get user from context while fetching messages")
		http2.WriteJSONError(w, "Failed to get user from context", http.StatusInternalServerError)
		return
	}

	var chatForm forms.GetChatsForm
	err := chatForm.GetParams(r.URL.Query())
	if err != nil {
		logger.Error(ctx, fmt.Sprintf("Failed to parse query params: %v", err))
		http2.WriteJSONError(w, "Failed to parse query params", http.StatusBadRequest)
		return
	}

	logger.Info(ctx, fmt.Sprintf("Fetching feed for user %s with %d posts with timestamp %v (autogenerated: %t)",
		user.Username, chatForm.ChatsCount, chatForm.Ts, !r.URL.Query().Has("ts")))

	chats, err := c.chatUseCase.GetUserChats(ctx, user.Id)
	if errors.Is(err, usecase.ErrNotFound) {
		logger.Info(ctx, fmt.Sprintf("User %s has no chats", user.Username))
		http2.WriteJSONError(w, "user has no chats", http.StatusNotFound)
		return
	} else if err != nil {
		logger.Error(ctx, fmt.Sprintf("Failed to fetch chats: %v", err))
		http2.WriteJSONError(w, "Failed to fetch chats", http.StatusInternalServerError)
		return
	}

	logger.Info(ctx, fmt.Sprintf("Fetched %d chats for user %s", len(chats), user.Username))

	chatsOut := forms.ToChatsOut(chats)
	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(chatsOut)
	if err != nil {
		logger.Error(ctx, fmt.Sprintf("Failed to encode chats: %s", err.Error()))
		http2.WriteJSONError(w, "Failed to encode chats", http.StatusInternalServerError)
		return
	}
}
