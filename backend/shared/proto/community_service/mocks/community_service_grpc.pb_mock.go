// Code generated by MockGen. DO NOT EDIT.
// Source: ./shared/proto/community_service/community_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	community_service "quickflow/shared/proto/community_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCommunityServiceClient is a mock of CommunityServiceClient interface.
type MockCommunityServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityServiceClientMockRecorder
}

// MockCommunityServiceClientMockRecorder is the mock recorder for MockCommunityServiceClient.
type MockCommunityServiceClientMockRecorder struct {
	mock *MockCommunityServiceClient
}

// NewMockCommunityServiceClient creates a new mock instance.
func NewMockCommunityServiceClient(ctrl *gomock.Controller) *MockCommunityServiceClient {
	mock := &MockCommunityServiceClient{ctrl: ctrl}
	mock.recorder = &MockCommunityServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityServiceClient) EXPECT() *MockCommunityServiceClientMockRecorder {
	return m.recorder
}

// ChangeUserRole mocks base method.
func (m *MockCommunityServiceClient) ChangeUserRole(ctx context.Context, in *community_service.ChangeUserRoleRequest, opts ...grpc.CallOption) (*community_service.ChangeUserRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserRole", varargs...)
	ret0, _ := ret[0].(*community_service.ChangeUserRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserRole indicates an expected call of ChangeUserRole.
func (mr *MockCommunityServiceClientMockRecorder) ChangeUserRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserRole", reflect.TypeOf((*MockCommunityServiceClient)(nil).ChangeUserRole), varargs...)
}

// CreateCommunity mocks base method.
func (m *MockCommunityServiceClient) CreateCommunity(ctx context.Context, in *community_service.CreateCommunityRequest, opts ...grpc.CallOption) (*community_service.CreateCommunityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCommunity", varargs...)
	ret0, _ := ret[0].(*community_service.CreateCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommunity indicates an expected call of CreateCommunity.
func (mr *MockCommunityServiceClientMockRecorder) CreateCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunity", reflect.TypeOf((*MockCommunityServiceClient)(nil).CreateCommunity), varargs...)
}

// DeleteCommunity mocks base method.
func (m *MockCommunityServiceClient) DeleteCommunity(ctx context.Context, in *community_service.DeleteCommunityRequest, opts ...grpc.CallOption) (*community_service.DeleteCommunityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCommunity", varargs...)
	ret0, _ := ret[0].(*community_service.DeleteCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommunity indicates an expected call of DeleteCommunity.
func (mr *MockCommunityServiceClientMockRecorder) DeleteCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunity", reflect.TypeOf((*MockCommunityServiceClient)(nil).DeleteCommunity), varargs...)
}

// GetCommunityById mocks base method.
func (m *MockCommunityServiceClient) GetCommunityById(ctx context.Context, in *community_service.GetCommunityByIdRequest, opts ...grpc.CallOption) (*community_service.GetCommunityByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommunityById", varargs...)
	ret0, _ := ret[0].(*community_service.GetCommunityByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityById indicates an expected call of GetCommunityById.
func (mr *MockCommunityServiceClientMockRecorder) GetCommunityById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityById", reflect.TypeOf((*MockCommunityServiceClient)(nil).GetCommunityById), varargs...)
}

// GetCommunityByName mocks base method.
func (m *MockCommunityServiceClient) GetCommunityByName(ctx context.Context, in *community_service.GetCommunityByNameRequest, opts ...grpc.CallOption) (*community_service.GetCommunityByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommunityByName", varargs...)
	ret0, _ := ret[0].(*community_service.GetCommunityByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityByName indicates an expected call of GetCommunityByName.
func (mr *MockCommunityServiceClientMockRecorder) GetCommunityByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityByName", reflect.TypeOf((*MockCommunityServiceClient)(nil).GetCommunityByName), varargs...)
}

// GetCommunityMembers mocks base method.
func (m *MockCommunityServiceClient) GetCommunityMembers(ctx context.Context, in *community_service.GetCommunityMembersRequest, opts ...grpc.CallOption) (*community_service.GetCommunityMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommunityMembers", varargs...)
	ret0, _ := ret[0].(*community_service.GetCommunityMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityMembers indicates an expected call of GetCommunityMembers.
func (mr *MockCommunityServiceClientMockRecorder) GetCommunityMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityMembers", reflect.TypeOf((*MockCommunityServiceClient)(nil).GetCommunityMembers), varargs...)
}

// GetControlledCommunities mocks base method.
func (m *MockCommunityServiceClient) GetControlledCommunities(ctx context.Context, in *community_service.GetControlledCommunitiesRequest, opts ...grpc.CallOption) (*community_service.GetControlledCommunitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetControlledCommunities", varargs...)
	ret0, _ := ret[0].(*community_service.GetControlledCommunitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlledCommunities indicates an expected call of GetControlledCommunities.
func (mr *MockCommunityServiceClientMockRecorder) GetControlledCommunities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlledCommunities", reflect.TypeOf((*MockCommunityServiceClient)(nil).GetControlledCommunities), varargs...)
}

// GetUserCommunities mocks base method.
func (m *MockCommunityServiceClient) GetUserCommunities(ctx context.Context, in *community_service.GetUserCommunitiesRequest, opts ...grpc.CallOption) (*community_service.GetUserCommunitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserCommunities", varargs...)
	ret0, _ := ret[0].(*community_service.GetUserCommunitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCommunities indicates an expected call of GetUserCommunities.
func (mr *MockCommunityServiceClientMockRecorder) GetUserCommunities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCommunities", reflect.TypeOf((*MockCommunityServiceClient)(nil).GetUserCommunities), varargs...)
}

// IsCommunityMember mocks base method.
func (m *MockCommunityServiceClient) IsCommunityMember(ctx context.Context, in *community_service.IsCommunityMemberRequest, opts ...grpc.CallOption) (*community_service.IsCommunityMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsCommunityMember", varargs...)
	ret0, _ := ret[0].(*community_service.IsCommunityMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCommunityMember indicates an expected call of IsCommunityMember.
func (mr *MockCommunityServiceClientMockRecorder) IsCommunityMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommunityMember", reflect.TypeOf((*MockCommunityServiceClient)(nil).IsCommunityMember), varargs...)
}

// JoinCommunity mocks base method.
func (m *MockCommunityServiceClient) JoinCommunity(ctx context.Context, in *community_service.JoinCommunityRequest, opts ...grpc.CallOption) (*community_service.JoinCommunityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinCommunity", varargs...)
	ret0, _ := ret[0].(*community_service.JoinCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinCommunity indicates an expected call of JoinCommunity.
func (mr *MockCommunityServiceClientMockRecorder) JoinCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinCommunity", reflect.TypeOf((*MockCommunityServiceClient)(nil).JoinCommunity), varargs...)
}

// LeaveCommunity mocks base method.
func (m *MockCommunityServiceClient) LeaveCommunity(ctx context.Context, in *community_service.LeaveCommunityRequest, opts ...grpc.CallOption) (*community_service.LeaveCommunityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LeaveCommunity", varargs...)
	ret0, _ := ret[0].(*community_service.LeaveCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveCommunity indicates an expected call of LeaveCommunity.
func (mr *MockCommunityServiceClientMockRecorder) LeaveCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCommunity", reflect.TypeOf((*MockCommunityServiceClient)(nil).LeaveCommunity), varargs...)
}

// SearchSimilarCommunities mocks base method.
func (m *MockCommunityServiceClient) SearchSimilarCommunities(ctx context.Context, in *community_service.SearchSimilarCommunitiesRequest, opts ...grpc.CallOption) (*community_service.SearchSimilarCommunitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSimilarCommunities", varargs...)
	ret0, _ := ret[0].(*community_service.SearchSimilarCommunitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSimilarCommunities indicates an expected call of SearchSimilarCommunities.
func (mr *MockCommunityServiceClientMockRecorder) SearchSimilarCommunities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSimilarCommunities", reflect.TypeOf((*MockCommunityServiceClient)(nil).SearchSimilarCommunities), varargs...)
}

// UpdateCommunity mocks base method.
func (m *MockCommunityServiceClient) UpdateCommunity(ctx context.Context, in *community_service.UpdateCommunityRequest, opts ...grpc.CallOption) (*community_service.UpdateCommunityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCommunity", varargs...)
	ret0, _ := ret[0].(*community_service.UpdateCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCommunity indicates an expected call of UpdateCommunity.
func (mr *MockCommunityServiceClientMockRecorder) UpdateCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunity", reflect.TypeOf((*MockCommunityServiceClient)(nil).UpdateCommunity), varargs...)
}

// MockCommunityServiceServer is a mock of CommunityServiceServer interface.
type MockCommunityServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityServiceServerMockRecorder
}

// MockCommunityServiceServerMockRecorder is the mock recorder for MockCommunityServiceServer.
type MockCommunityServiceServerMockRecorder struct {
	mock *MockCommunityServiceServer
}

// NewMockCommunityServiceServer creates a new mock instance.
func NewMockCommunityServiceServer(ctrl *gomock.Controller) *MockCommunityServiceServer {
	mock := &MockCommunityServiceServer{ctrl: ctrl}
	mock.recorder = &MockCommunityServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityServiceServer) EXPECT() *MockCommunityServiceServerMockRecorder {
	return m.recorder
}

// ChangeUserRole mocks base method.
func (m *MockCommunityServiceServer) ChangeUserRole(arg0 context.Context, arg1 *community_service.ChangeUserRoleRequest) (*community_service.ChangeUserRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserRole", arg0, arg1)
	ret0, _ := ret[0].(*community_service.ChangeUserRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserRole indicates an expected call of ChangeUserRole.
func (mr *MockCommunityServiceServerMockRecorder) ChangeUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserRole", reflect.TypeOf((*MockCommunityServiceServer)(nil).ChangeUserRole), arg0, arg1)
}

// CreateCommunity mocks base method.
func (m *MockCommunityServiceServer) CreateCommunity(arg0 context.Context, arg1 *community_service.CreateCommunityRequest) (*community_service.CreateCommunityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommunity", arg0, arg1)
	ret0, _ := ret[0].(*community_service.CreateCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommunity indicates an expected call of CreateCommunity.
func (mr *MockCommunityServiceServerMockRecorder) CreateCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunity", reflect.TypeOf((*MockCommunityServiceServer)(nil).CreateCommunity), arg0, arg1)
}

// DeleteCommunity mocks base method.
func (m *MockCommunityServiceServer) DeleteCommunity(arg0 context.Context, arg1 *community_service.DeleteCommunityRequest) (*community_service.DeleteCommunityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunity", arg0, arg1)
	ret0, _ := ret[0].(*community_service.DeleteCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommunity indicates an expected call of DeleteCommunity.
func (mr *MockCommunityServiceServerMockRecorder) DeleteCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunity", reflect.TypeOf((*MockCommunityServiceServer)(nil).DeleteCommunity), arg0, arg1)
}

// GetCommunityById mocks base method.
func (m *MockCommunityServiceServer) GetCommunityById(arg0 context.Context, arg1 *community_service.GetCommunityByIdRequest) (*community_service.GetCommunityByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityById", arg0, arg1)
	ret0, _ := ret[0].(*community_service.GetCommunityByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityById indicates an expected call of GetCommunityById.
func (mr *MockCommunityServiceServerMockRecorder) GetCommunityById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityById", reflect.TypeOf((*MockCommunityServiceServer)(nil).GetCommunityById), arg0, arg1)
}

// GetCommunityByName mocks base method.
func (m *MockCommunityServiceServer) GetCommunityByName(arg0 context.Context, arg1 *community_service.GetCommunityByNameRequest) (*community_service.GetCommunityByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityByName", arg0, arg1)
	ret0, _ := ret[0].(*community_service.GetCommunityByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityByName indicates an expected call of GetCommunityByName.
func (mr *MockCommunityServiceServerMockRecorder) GetCommunityByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityByName", reflect.TypeOf((*MockCommunityServiceServer)(nil).GetCommunityByName), arg0, arg1)
}

// GetCommunityMembers mocks base method.
func (m *MockCommunityServiceServer) GetCommunityMembers(arg0 context.Context, arg1 *community_service.GetCommunityMembersRequest) (*community_service.GetCommunityMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityMembers", arg0, arg1)
	ret0, _ := ret[0].(*community_service.GetCommunityMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityMembers indicates an expected call of GetCommunityMembers.
func (mr *MockCommunityServiceServerMockRecorder) GetCommunityMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityMembers", reflect.TypeOf((*MockCommunityServiceServer)(nil).GetCommunityMembers), arg0, arg1)
}

// GetControlledCommunities mocks base method.
func (m *MockCommunityServiceServer) GetControlledCommunities(arg0 context.Context, arg1 *community_service.GetControlledCommunitiesRequest) (*community_service.GetControlledCommunitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlledCommunities", arg0, arg1)
	ret0, _ := ret[0].(*community_service.GetControlledCommunitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlledCommunities indicates an expected call of GetControlledCommunities.
func (mr *MockCommunityServiceServerMockRecorder) GetControlledCommunities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlledCommunities", reflect.TypeOf((*MockCommunityServiceServer)(nil).GetControlledCommunities), arg0, arg1)
}

// GetUserCommunities mocks base method.
func (m *MockCommunityServiceServer) GetUserCommunities(arg0 context.Context, arg1 *community_service.GetUserCommunitiesRequest) (*community_service.GetUserCommunitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCommunities", arg0, arg1)
	ret0, _ := ret[0].(*community_service.GetUserCommunitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCommunities indicates an expected call of GetUserCommunities.
func (mr *MockCommunityServiceServerMockRecorder) GetUserCommunities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCommunities", reflect.TypeOf((*MockCommunityServiceServer)(nil).GetUserCommunities), arg0, arg1)
}

// IsCommunityMember mocks base method.
func (m *MockCommunityServiceServer) IsCommunityMember(arg0 context.Context, arg1 *community_service.IsCommunityMemberRequest) (*community_service.IsCommunityMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommunityMember", arg0, arg1)
	ret0, _ := ret[0].(*community_service.IsCommunityMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCommunityMember indicates an expected call of IsCommunityMember.
func (mr *MockCommunityServiceServerMockRecorder) IsCommunityMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommunityMember", reflect.TypeOf((*MockCommunityServiceServer)(nil).IsCommunityMember), arg0, arg1)
}

// JoinCommunity mocks base method.
func (m *MockCommunityServiceServer) JoinCommunity(arg0 context.Context, arg1 *community_service.JoinCommunityRequest) (*community_service.JoinCommunityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinCommunity", arg0, arg1)
	ret0, _ := ret[0].(*community_service.JoinCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinCommunity indicates an expected call of JoinCommunity.
func (mr *MockCommunityServiceServerMockRecorder) JoinCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinCommunity", reflect.TypeOf((*MockCommunityServiceServer)(nil).JoinCommunity), arg0, arg1)
}

// LeaveCommunity mocks base method.
func (m *MockCommunityServiceServer) LeaveCommunity(arg0 context.Context, arg1 *community_service.LeaveCommunityRequest) (*community_service.LeaveCommunityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveCommunity", arg0, arg1)
	ret0, _ := ret[0].(*community_service.LeaveCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveCommunity indicates an expected call of LeaveCommunity.
func (mr *MockCommunityServiceServerMockRecorder) LeaveCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCommunity", reflect.TypeOf((*MockCommunityServiceServer)(nil).LeaveCommunity), arg0, arg1)
}

// SearchSimilarCommunities mocks base method.
func (m *MockCommunityServiceServer) SearchSimilarCommunities(arg0 context.Context, arg1 *community_service.SearchSimilarCommunitiesRequest) (*community_service.SearchSimilarCommunitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSimilarCommunities", arg0, arg1)
	ret0, _ := ret[0].(*community_service.SearchSimilarCommunitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSimilarCommunities indicates an expected call of SearchSimilarCommunities.
func (mr *MockCommunityServiceServerMockRecorder) SearchSimilarCommunities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSimilarCommunities", reflect.TypeOf((*MockCommunityServiceServer)(nil).SearchSimilarCommunities), arg0, arg1)
}

// UpdateCommunity mocks base method.
func (m *MockCommunityServiceServer) UpdateCommunity(arg0 context.Context, arg1 *community_service.UpdateCommunityRequest) (*community_service.UpdateCommunityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommunity", arg0, arg1)
	ret0, _ := ret[0].(*community_service.UpdateCommunityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCommunity indicates an expected call of UpdateCommunity.
func (mr *MockCommunityServiceServerMockRecorder) UpdateCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunity", reflect.TypeOf((*MockCommunityServiceServer)(nil).UpdateCommunity), arg0, arg1)
}

// mustEmbedUnimplementedCommunityServiceServer mocks base method.
func (m *MockCommunityServiceServer) mustEmbedUnimplementedCommunityServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCommunityServiceServer")
}

// mustEmbedUnimplementedCommunityServiceServer indicates an expected call of mustEmbedUnimplementedCommunityServiceServer.
func (mr *MockCommunityServiceServerMockRecorder) mustEmbedUnimplementedCommunityServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCommunityServiceServer", reflect.TypeOf((*MockCommunityServiceServer)(nil).mustEmbedUnimplementedCommunityServiceServer))
}

// MockUnsafeCommunityServiceServer is a mock of UnsafeCommunityServiceServer interface.
type MockUnsafeCommunityServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCommunityServiceServerMockRecorder
}

// MockUnsafeCommunityServiceServerMockRecorder is the mock recorder for MockUnsafeCommunityServiceServer.
type MockUnsafeCommunityServiceServerMockRecorder struct {
	mock *MockUnsafeCommunityServiceServer
}

// NewMockUnsafeCommunityServiceServer creates a new mock instance.
func NewMockUnsafeCommunityServiceServer(ctrl *gomock.Controller) *MockUnsafeCommunityServiceServer {
	mock := &MockUnsafeCommunityServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCommunityServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCommunityServiceServer) EXPECT() *MockUnsafeCommunityServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCommunityServiceServer mocks base method.
func (m *MockUnsafeCommunityServiceServer) mustEmbedUnimplementedCommunityServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCommunityServiceServer")
}

// mustEmbedUnimplementedCommunityServiceServer indicates an expected call of mustEmbedUnimplementedCommunityServiceServer.
func (mr *MockUnsafeCommunityServiceServerMockRecorder) mustEmbedUnimplementedCommunityServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCommunityServiceServer", reflect.TypeOf((*MockUnsafeCommunityServiceServer)(nil).mustEmbedUnimplementedCommunityServiceServer))
}
