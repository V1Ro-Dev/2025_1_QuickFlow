// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunityServiceClient is the client API for CommunityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityServiceClient interface {
	CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CreateCommunityResponse, error)
	GetCommunityById(ctx context.Context, in *GetCommunityByIdRequest, opts ...grpc.CallOption) (*GetCommunityByIdResponse, error)
	GetCommunityByName(ctx context.Context, in *GetCommunityByNameRequest, opts ...grpc.CallOption) (*GetCommunityByNameResponse, error)
	IsCommunityMember(ctx context.Context, in *IsCommunityMemberRequest, opts ...grpc.CallOption) (*IsCommunityMemberResponse, error)
	GetCommunityMembers(ctx context.Context, in *GetCommunityMembersRequest, opts ...grpc.CallOption) (*GetCommunityMembersResponse, error)
	DeleteCommunity(ctx context.Context, in *DeleteCommunityRequest, opts ...grpc.CallOption) (*DeleteCommunityResponse, error)
	UpdateCommunity(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*UpdateCommunityResponse, error)
	JoinCommunity(ctx context.Context, in *JoinCommunityRequest, opts ...grpc.CallOption) (*JoinCommunityResponse, error)
	LeaveCommunity(ctx context.Context, in *LeaveCommunityRequest, opts ...grpc.CallOption) (*LeaveCommunityResponse, error)
	GetUserCommunities(ctx context.Context, in *GetUserCommunitiesRequest, opts ...grpc.CallOption) (*GetUserCommunitiesResponse, error)
}

type communityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityServiceClient(cc grpc.ClientConnInterface) CommunityServiceClient {
	return &communityServiceClient{cc}
}

func (c *communityServiceClient) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CreateCommunityResponse, error) {
	out := new(CreateCommunityResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/CreateCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityById(ctx context.Context, in *GetCommunityByIdRequest, opts ...grpc.CallOption) (*GetCommunityByIdResponse, error) {
	out := new(GetCommunityByIdResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/GetCommunityById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityByName(ctx context.Context, in *GetCommunityByNameRequest, opts ...grpc.CallOption) (*GetCommunityByNameResponse, error) {
	out := new(GetCommunityByNameResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/GetCommunityByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) IsCommunityMember(ctx context.Context, in *IsCommunityMemberRequest, opts ...grpc.CallOption) (*IsCommunityMemberResponse, error) {
	out := new(IsCommunityMemberResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/IsCommunityMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityMembers(ctx context.Context, in *GetCommunityMembersRequest, opts ...grpc.CallOption) (*GetCommunityMembersResponse, error) {
	out := new(GetCommunityMembersResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/GetCommunityMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) DeleteCommunity(ctx context.Context, in *DeleteCommunityRequest, opts ...grpc.CallOption) (*DeleteCommunityResponse, error) {
	out := new(DeleteCommunityResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/DeleteCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UpdateCommunity(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*UpdateCommunityResponse, error) {
	out := new(UpdateCommunityResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/UpdateCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) JoinCommunity(ctx context.Context, in *JoinCommunityRequest, opts ...grpc.CallOption) (*JoinCommunityResponse, error) {
	out := new(JoinCommunityResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/JoinCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) LeaveCommunity(ctx context.Context, in *LeaveCommunityRequest, opts ...grpc.CallOption) (*LeaveCommunityResponse, error) {
	out := new(LeaveCommunityResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/LeaveCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetUserCommunities(ctx context.Context, in *GetUserCommunitiesRequest, opts ...grpc.CallOption) (*GetUserCommunitiesResponse, error) {
	out := new(GetUserCommunitiesResponse)
	err := c.cc.Invoke(ctx, "/file_service.CommunityService/GetUserCommunities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServiceServer is the server API for CommunityService service.
// All implementations must embed UnimplementedCommunityServiceServer
// for forward compatibility
type CommunityServiceServer interface {
	CreateCommunity(context.Context, *CreateCommunityRequest) (*CreateCommunityResponse, error)
	GetCommunityById(context.Context, *GetCommunityByIdRequest) (*GetCommunityByIdResponse, error)
	GetCommunityByName(context.Context, *GetCommunityByNameRequest) (*GetCommunityByNameResponse, error)
	IsCommunityMember(context.Context, *IsCommunityMemberRequest) (*IsCommunityMemberResponse, error)
	GetCommunityMembers(context.Context, *GetCommunityMembersRequest) (*GetCommunityMembersResponse, error)
	DeleteCommunity(context.Context, *DeleteCommunityRequest) (*DeleteCommunityResponse, error)
	UpdateCommunity(context.Context, *UpdateCommunityRequest) (*UpdateCommunityResponse, error)
	JoinCommunity(context.Context, *JoinCommunityRequest) (*JoinCommunityResponse, error)
	LeaveCommunity(context.Context, *LeaveCommunityRequest) (*LeaveCommunityResponse, error)
	GetUserCommunities(context.Context, *GetUserCommunitiesRequest) (*GetUserCommunitiesResponse, error)
	mustEmbedUnimplementedCommunityServiceServer()
}

// UnimplementedCommunityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityServiceServer struct {
}

func (UnimplementedCommunityServiceServer) CreateCommunity(context.Context, *CreateCommunityRequest) (*CreateCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityById(context.Context, *GetCommunityByIdRequest) (*GetCommunityByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityById not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityByName(context.Context, *GetCommunityByNameRequest) (*GetCommunityByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityByName not implemented")
}
func (UnimplementedCommunityServiceServer) IsCommunityMember(context.Context, *IsCommunityMemberRequest) (*IsCommunityMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCommunityMember not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityMembers(context.Context, *GetCommunityMembersRequest) (*GetCommunityMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityMembers not implemented")
}
func (UnimplementedCommunityServiceServer) DeleteCommunity(context.Context, *DeleteCommunityRequest) (*DeleteCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) UpdateCommunity(context.Context, *UpdateCommunityRequest) (*UpdateCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) JoinCommunity(context.Context, *JoinCommunityRequest) (*JoinCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) LeaveCommunity(context.Context, *LeaveCommunityRequest) (*LeaveCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) GetUserCommunities(context.Context, *GetUserCommunitiesRequest) (*GetUserCommunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommunities not implemented")
}
func (UnimplementedCommunityServiceServer) mustEmbedUnimplementedCommunityServiceServer() {}

// UnsafeCommunityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServiceServer will
// result in compilation errors.
type UnsafeCommunityServiceServer interface {
	mustEmbedUnimplementedCommunityServiceServer()
}

func RegisterCommunityServiceServer(s grpc.ServiceRegistrar, srv CommunityServiceServer) {
	s.RegisterService(&CommunityService_ServiceDesc, srv)
}

func _CommunityService_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/CreateCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, req.(*CreateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/GetCommunityById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityById(ctx, req.(*GetCommunityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/GetCommunityByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityByName(ctx, req.(*GetCommunityByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_IsCommunityMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCommunityMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).IsCommunityMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/IsCommunityMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).IsCommunityMember(ctx, req.(*IsCommunityMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/GetCommunityMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityMembers(ctx, req.(*GetCommunityMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_DeleteCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).DeleteCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/DeleteCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).DeleteCommunity(ctx, req.(*DeleteCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UpdateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UpdateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/UpdateCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UpdateCommunity(ctx, req.(*UpdateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_JoinCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).JoinCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/JoinCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).JoinCommunity(ctx, req.(*JoinCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_LeaveCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).LeaveCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/LeaveCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).LeaveCommunity(ctx, req.(*LeaveCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetUserCommunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetUserCommunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.CommunityService/GetUserCommunities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetUserCommunities(ctx, req.(*GetUserCommunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityService_ServiceDesc is the grpc.ServiceDesc for CommunityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_service.CommunityService",
	HandlerType: (*CommunityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommunity",
			Handler:    _CommunityService_CreateCommunity_Handler,
		},
		{
			MethodName: "GetCommunityById",
			Handler:    _CommunityService_GetCommunityById_Handler,
		},
		{
			MethodName: "GetCommunityByName",
			Handler:    _CommunityService_GetCommunityByName_Handler,
		},
		{
			MethodName: "IsCommunityMember",
			Handler:    _CommunityService_IsCommunityMember_Handler,
		},
		{
			MethodName: "GetCommunityMembers",
			Handler:    _CommunityService_GetCommunityMembers_Handler,
		},
		{
			MethodName: "DeleteCommunity",
			Handler:    _CommunityService_DeleteCommunity_Handler,
		},
		{
			MethodName: "UpdateCommunity",
			Handler:    _CommunityService_UpdateCommunity_Handler,
		},
		{
			MethodName: "JoinCommunity",
			Handler:    _CommunityService_JoinCommunity_Handler,
		},
		{
			MethodName: "LeaveCommunity",
			Handler:    _CommunityService_LeaveCommunity_Handler,
		},
		{
			MethodName: "GetUserCommunities",
			Handler:    _CommunityService_GetUserCommunities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "community_service.proto",
}
