// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package feedback

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedbackServiceClient is the client API for FeedbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbackServiceClient interface {
	SaveFeedback(ctx context.Context, in *SaveFeedbackRequest, opts ...grpc.CallOption) (*SaveFeedbackResponse, error)
	GetAllFeedbackType(ctx context.Context, in *GetAllFeedbackTypeRequest, opts ...grpc.CallOption) (*GetAllFeedbackTypeResponse, error)
}

type feedbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackServiceClient(cc grpc.ClientConnInterface) FeedbackServiceClient {
	return &feedbackServiceClient{cc}
}

func (c *feedbackServiceClient) SaveFeedback(ctx context.Context, in *SaveFeedbackRequest, opts ...grpc.CallOption) (*SaveFeedbackResponse, error) {
	out := new(SaveFeedbackResponse)
	err := c.cc.Invoke(ctx, "/file_service.FeedbackService/SaveFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) GetAllFeedbackType(ctx context.Context, in *GetAllFeedbackTypeRequest, opts ...grpc.CallOption) (*GetAllFeedbackTypeResponse, error) {
	out := new(GetAllFeedbackTypeResponse)
	err := c.cc.Invoke(ctx, "/file_service.FeedbackService/GetAllFeedbackType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackServiceServer is the server API for FeedbackService service.
// All implementations must embed UnimplementedFeedbackServiceServer
// for forward compatibility
type FeedbackServiceServer interface {
	SaveFeedback(context.Context, *SaveFeedbackRequest) (*SaveFeedbackResponse, error)
	GetAllFeedbackType(context.Context, *GetAllFeedbackTypeRequest) (*GetAllFeedbackTypeResponse, error)
	mustEmbedUnimplementedFeedbackServiceServer()
}

// UnimplementedFeedbackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeedbackServiceServer struct {
}

func (UnimplementedFeedbackServiceServer) SaveFeedback(context.Context, *SaveFeedbackRequest) (*SaveFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) GetAllFeedbackType(context.Context, *GetAllFeedbackTypeRequest) (*GetAllFeedbackTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFeedbackType not implemented")
}
func (UnimplementedFeedbackServiceServer) mustEmbedUnimplementedFeedbackServiceServer() {}

// UnsafeFeedbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbackServiceServer will
// result in compilation errors.
type UnsafeFeedbackServiceServer interface {
	mustEmbedUnimplementedFeedbackServiceServer()
}

func RegisterFeedbackServiceServer(s grpc.ServiceRegistrar, srv FeedbackServiceServer) {
	s.RegisterService(&FeedbackService_ServiceDesc, srv)
}

func _FeedbackService_SaveFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).SaveFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FeedbackService/SaveFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).SaveFeedback(ctx, req.(*SaveFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_GetAllFeedbackType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFeedbackTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GetAllFeedbackType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FeedbackService/GetAllFeedbackType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GetAllFeedbackType(ctx, req.(*GetAllFeedbackTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbackService_ServiceDesc is the grpc.ServiceDesc for FeedbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_service.FeedbackService",
	HandlerType: (*FeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveFeedback",
			Handler:    _FeedbackService_SaveFeedback_Handler,
		},
		{
			MethodName: "GetAllFeedbackType",
			Handler:    _FeedbackService_GetAllFeedbackType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedback_service.proto",
}
