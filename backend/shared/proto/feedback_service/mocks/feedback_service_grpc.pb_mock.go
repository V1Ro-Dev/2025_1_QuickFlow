// Code generated by MockGen. DO NOT EDIT.
// Source: .//shared/proto/feedback_service/feedback_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	feedback "quickflow/shared/proto/feedback_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFeedbackServiceClient is a mock of FeedbackServiceClient interface.
type MockFeedbackServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackServiceClientMockRecorder
}

// MockFeedbackServiceClientMockRecorder is the mock recorder for MockFeedbackServiceClient.
type MockFeedbackServiceClientMockRecorder struct {
	mock *MockFeedbackServiceClient
}

// NewMockFeedbackServiceClient creates a new mock instance.
func NewMockFeedbackServiceClient(ctrl *gomock.Controller) *MockFeedbackServiceClient {
	mock := &MockFeedbackServiceClient{ctrl: ctrl}
	mock.recorder = &MockFeedbackServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackServiceClient) EXPECT() *MockFeedbackServiceClientMockRecorder {
	return m.recorder
}

// GetAllFeedbackType mocks base method.
func (m *MockFeedbackServiceClient) GetAllFeedbackType(ctx context.Context, in *feedback.GetAllFeedbackTypeRequest, opts ...grpc.CallOption) (*feedback.GetAllFeedbackTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllFeedbackType", varargs...)
	ret0, _ := ret[0].(*feedback.GetAllFeedbackTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFeedbackType indicates an expected call of GetAllFeedbackType.
func (mr *MockFeedbackServiceClientMockRecorder) GetAllFeedbackType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFeedbackType", reflect.TypeOf((*MockFeedbackServiceClient)(nil).GetAllFeedbackType), varargs...)
}

// GetNumMessagesSent mocks base method.
func (m *MockFeedbackServiceClient) GetNumMessagesSent(ctx context.Context, in *feedback.GetNumMessagesSentRequest, opts ...grpc.CallOption) (*feedback.GetNumMessagesSentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNumMessagesSent", varargs...)
	ret0, _ := ret[0].(*feedback.GetNumMessagesSentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumMessagesSent indicates an expected call of GetNumMessagesSent.
func (mr *MockFeedbackServiceClientMockRecorder) GetNumMessagesSent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumMessagesSent", reflect.TypeOf((*MockFeedbackServiceClient)(nil).GetNumMessagesSent), varargs...)
}

// GetNumPostsCreated mocks base method.
func (m *MockFeedbackServiceClient) GetNumPostsCreated(ctx context.Context, in *feedback.GetNumPostsCreatedRequest, opts ...grpc.CallOption) (*feedback.GetNumPostsCreatedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNumPostsCreated", varargs...)
	ret0, _ := ret[0].(*feedback.GetNumPostsCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumPostsCreated indicates an expected call of GetNumPostsCreated.
func (mr *MockFeedbackServiceClientMockRecorder) GetNumPostsCreated(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumPostsCreated", reflect.TypeOf((*MockFeedbackServiceClient)(nil).GetNumPostsCreated), varargs...)
}

// GetNumProfileChanges mocks base method.
func (m *MockFeedbackServiceClient) GetNumProfileChanges(ctx context.Context, in *feedback.GetNumProfileChangesRequest, opts ...grpc.CallOption) (*feedback.GetNumProfileChangesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNumProfileChanges", varargs...)
	ret0, _ := ret[0].(*feedback.GetNumProfileChangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumProfileChanges indicates an expected call of GetNumProfileChanges.
func (mr *MockFeedbackServiceClientMockRecorder) GetNumProfileChanges(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumProfileChanges", reflect.TypeOf((*MockFeedbackServiceClient)(nil).GetNumProfileChanges), varargs...)
}

// SaveFeedback mocks base method.
func (m *MockFeedbackServiceClient) SaveFeedback(ctx context.Context, in *feedback.SaveFeedbackRequest, opts ...grpc.CallOption) (*feedback.SaveFeedbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveFeedback", varargs...)
	ret0, _ := ret[0].(*feedback.SaveFeedbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFeedback indicates an expected call of SaveFeedback.
func (mr *MockFeedbackServiceClientMockRecorder) SaveFeedback(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFeedback", reflect.TypeOf((*MockFeedbackServiceClient)(nil).SaveFeedback), varargs...)
}

// MockFeedbackServiceServer is a mock of FeedbackServiceServer interface.
type MockFeedbackServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackServiceServerMockRecorder
}

// MockFeedbackServiceServerMockRecorder is the mock recorder for MockFeedbackServiceServer.
type MockFeedbackServiceServerMockRecorder struct {
	mock *MockFeedbackServiceServer
}

// NewMockFeedbackServiceServer creates a new mock instance.
func NewMockFeedbackServiceServer(ctrl *gomock.Controller) *MockFeedbackServiceServer {
	mock := &MockFeedbackServiceServer{ctrl: ctrl}
	mock.recorder = &MockFeedbackServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackServiceServer) EXPECT() *MockFeedbackServiceServerMockRecorder {
	return m.recorder
}

// GetAllFeedbackType mocks base method.
func (m *MockFeedbackServiceServer) GetAllFeedbackType(arg0 context.Context, arg1 *feedback.GetAllFeedbackTypeRequest) (*feedback.GetAllFeedbackTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFeedbackType", arg0, arg1)
	ret0, _ := ret[0].(*feedback.GetAllFeedbackTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFeedbackType indicates an expected call of GetAllFeedbackType.
func (mr *MockFeedbackServiceServerMockRecorder) GetAllFeedbackType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFeedbackType", reflect.TypeOf((*MockFeedbackServiceServer)(nil).GetAllFeedbackType), arg0, arg1)
}

// GetNumMessagesSent mocks base method.
func (m *MockFeedbackServiceServer) GetNumMessagesSent(arg0 context.Context, arg1 *feedback.GetNumMessagesSentRequest) (*feedback.GetNumMessagesSentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumMessagesSent", arg0, arg1)
	ret0, _ := ret[0].(*feedback.GetNumMessagesSentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumMessagesSent indicates an expected call of GetNumMessagesSent.
func (mr *MockFeedbackServiceServerMockRecorder) GetNumMessagesSent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumMessagesSent", reflect.TypeOf((*MockFeedbackServiceServer)(nil).GetNumMessagesSent), arg0, arg1)
}

// GetNumPostsCreated mocks base method.
func (m *MockFeedbackServiceServer) GetNumPostsCreated(arg0 context.Context, arg1 *feedback.GetNumPostsCreatedRequest) (*feedback.GetNumPostsCreatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumPostsCreated", arg0, arg1)
	ret0, _ := ret[0].(*feedback.GetNumPostsCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumPostsCreated indicates an expected call of GetNumPostsCreated.
func (mr *MockFeedbackServiceServerMockRecorder) GetNumPostsCreated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumPostsCreated", reflect.TypeOf((*MockFeedbackServiceServer)(nil).GetNumPostsCreated), arg0, arg1)
}

// GetNumProfileChanges mocks base method.
func (m *MockFeedbackServiceServer) GetNumProfileChanges(arg0 context.Context, arg1 *feedback.GetNumProfileChangesRequest) (*feedback.GetNumProfileChangesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumProfileChanges", arg0, arg1)
	ret0, _ := ret[0].(*feedback.GetNumProfileChangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumProfileChanges indicates an expected call of GetNumProfileChanges.
func (mr *MockFeedbackServiceServerMockRecorder) GetNumProfileChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumProfileChanges", reflect.TypeOf((*MockFeedbackServiceServer)(nil).GetNumProfileChanges), arg0, arg1)
}

// SaveFeedback mocks base method.
func (m *MockFeedbackServiceServer) SaveFeedback(arg0 context.Context, arg1 *feedback.SaveFeedbackRequest) (*feedback.SaveFeedbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFeedback", arg0, arg1)
	ret0, _ := ret[0].(*feedback.SaveFeedbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFeedback indicates an expected call of SaveFeedback.
func (mr *MockFeedbackServiceServerMockRecorder) SaveFeedback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFeedback", reflect.TypeOf((*MockFeedbackServiceServer)(nil).SaveFeedback), arg0, arg1)
}

// mustEmbedUnimplementedFeedbackServiceServer mocks base method.
func (m *MockFeedbackServiceServer) mustEmbedUnimplementedFeedbackServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFeedbackServiceServer")
}

// mustEmbedUnimplementedFeedbackServiceServer indicates an expected call of mustEmbedUnimplementedFeedbackServiceServer.
func (mr *MockFeedbackServiceServerMockRecorder) mustEmbedUnimplementedFeedbackServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFeedbackServiceServer", reflect.TypeOf((*MockFeedbackServiceServer)(nil).mustEmbedUnimplementedFeedbackServiceServer))
}

// MockUnsafeFeedbackServiceServer is a mock of UnsafeFeedbackServiceServer interface.
type MockUnsafeFeedbackServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFeedbackServiceServerMockRecorder
}

// MockUnsafeFeedbackServiceServerMockRecorder is the mock recorder for MockUnsafeFeedbackServiceServer.
type MockUnsafeFeedbackServiceServerMockRecorder struct {
	mock *MockUnsafeFeedbackServiceServer
}

// NewMockUnsafeFeedbackServiceServer creates a new mock instance.
func NewMockUnsafeFeedbackServiceServer(ctrl *gomock.Controller) *MockUnsafeFeedbackServiceServer {
	mock := &MockUnsafeFeedbackServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFeedbackServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFeedbackServiceServer) EXPECT() *MockUnsafeFeedbackServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFeedbackServiceServer mocks base method.
func (m *MockUnsafeFeedbackServiceServer) mustEmbedUnimplementedFeedbackServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFeedbackServiceServer")
}

// mustEmbedUnimplementedFeedbackServiceServer indicates an expected call of mustEmbedUnimplementedFeedbackServiceServer.
func (mr *MockUnsafeFeedbackServiceServerMockRecorder) mustEmbedUnimplementedFeedbackServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFeedbackServiceServer", reflect.TypeOf((*MockUnsafeFeedbackServiceServer)(nil).mustEmbedUnimplementedFeedbackServiceServer))
}
