// Code generated by MockGen. DO NOT EDIT.
// Source: ./shared/proto/user_service/profile_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	user_service "quickflow/shared/proto/user_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockProfileServiceClient is a mock of ProfileServiceClient interface.
type MockProfileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceClientMockRecorder
}

// MockProfileServiceClientMockRecorder is the mock recorder for MockProfileServiceClient.
type MockProfileServiceClientMockRecorder struct {
	mock *MockProfileServiceClient
}

// NewMockProfileServiceClient creates a new mock instance.
func NewMockProfileServiceClient(ctrl *gomock.Controller) *MockProfileServiceClient {
	mock := &MockProfileServiceClient{ctrl: ctrl}
	mock.recorder = &MockProfileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServiceClient) EXPECT() *MockProfileServiceClientMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockProfileServiceClient) CreateProfile(ctx context.Context, in *user_service.CreateProfileRequest, opts ...grpc.CallOption) (*user_service.CreateProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfile", varargs...)
	ret0, _ := ret[0].(*user_service.CreateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileServiceClientMockRecorder) CreateProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileServiceClient)(nil).CreateProfile), varargs...)
}

// GetProfile mocks base method.
func (m *MockProfileServiceClient) GetProfile(ctx context.Context, in *user_service.GetProfileRequest, opts ...grpc.CallOption) (*user_service.GetProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfile", varargs...)
	ret0, _ := ret[0].(*user_service.GetProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfileServiceClientMockRecorder) GetProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfileServiceClient)(nil).GetProfile), varargs...)
}

// GetProfileByUsername mocks base method.
func (m *MockProfileServiceClient) GetProfileByUsername(ctx context.Context, in *user_service.GetProfileByUsernameRequest, opts ...grpc.CallOption) (*user_service.GetProfileByUsernameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileByUsername", varargs...)
	ret0, _ := ret[0].(*user_service.GetProfileByUsernameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByUsername indicates an expected call of GetProfileByUsername.
func (mr *MockProfileServiceClientMockRecorder) GetProfileByUsername(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUsername", reflect.TypeOf((*MockProfileServiceClient)(nil).GetProfileByUsername), varargs...)
}

// GetPublicUserInfo mocks base method.
func (m *MockProfileServiceClient) GetPublicUserInfo(ctx context.Context, in *user_service.GetPublicUserInfoRequest, opts ...grpc.CallOption) (*user_service.GetPublicUserInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicUserInfo", varargs...)
	ret0, _ := ret[0].(*user_service.GetPublicUserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicUserInfo indicates an expected call of GetPublicUserInfo.
func (mr *MockProfileServiceClientMockRecorder) GetPublicUserInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicUserInfo", reflect.TypeOf((*MockProfileServiceClient)(nil).GetPublicUserInfo), varargs...)
}

// GetPublicUsersInfo mocks base method.
func (m *MockProfileServiceClient) GetPublicUsersInfo(ctx context.Context, in *user_service.GetPublicUsersInfoRequest, opts ...grpc.CallOption) (*user_service.GetPublicUsersInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicUsersInfo", varargs...)
	ret0, _ := ret[0].(*user_service.GetPublicUsersInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicUsersInfo indicates an expected call of GetPublicUsersInfo.
func (mr *MockProfileServiceClientMockRecorder) GetPublicUsersInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicUsersInfo", reflect.TypeOf((*MockProfileServiceClient)(nil).GetPublicUsersInfo), varargs...)
}

// UpdateLastSeen mocks base method.
func (m *MockProfileServiceClient) UpdateLastSeen(ctx context.Context, in *user_service.UpdateLastSeenRequest, opts ...grpc.CallOption) (*user_service.UpdateLastSeenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLastSeen", varargs...)
	ret0, _ := ret[0].(*user_service.UpdateLastSeenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLastSeen indicates an expected call of UpdateLastSeen.
func (mr *MockProfileServiceClientMockRecorder) UpdateLastSeen(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSeen", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateLastSeen), varargs...)
}

// UpdateProfile mocks base method.
func (m *MockProfileServiceClient) UpdateProfile(ctx context.Context, in *user_service.UpdateProfileRequest, opts ...grpc.CallOption) (*user_service.UpdateProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfile", varargs...)
	ret0, _ := ret[0].(*user_service.UpdateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileServiceClientMockRecorder) UpdateProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateProfile), varargs...)
}

// MockProfileServiceServer is a mock of ProfileServiceServer interface.
type MockProfileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceServerMockRecorder
}

// MockProfileServiceServerMockRecorder is the mock recorder for MockProfileServiceServer.
type MockProfileServiceServerMockRecorder struct {
	mock *MockProfileServiceServer
}

// NewMockProfileServiceServer creates a new mock instance.
func NewMockProfileServiceServer(ctrl *gomock.Controller) *MockProfileServiceServer {
	mock := &MockProfileServiceServer{ctrl: ctrl}
	mock.recorder = &MockProfileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServiceServer) EXPECT() *MockProfileServiceServerMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockProfileServiceServer) CreateProfile(arg0 context.Context, arg1 *user_service.CreateProfileRequest) (*user_service.CreateProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0, arg1)
	ret0, _ := ret[0].(*user_service.CreateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileServiceServerMockRecorder) CreateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileServiceServer)(nil).CreateProfile), arg0, arg1)
}

// GetProfile mocks base method.
func (m *MockProfileServiceServer) GetProfile(arg0 context.Context, arg1 *user_service.GetProfileRequest) (*user_service.GetProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0, arg1)
	ret0, _ := ret[0].(*user_service.GetProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfileServiceServerMockRecorder) GetProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfileServiceServer)(nil).GetProfile), arg0, arg1)
}

// GetProfileByUsername mocks base method.
func (m *MockProfileServiceServer) GetProfileByUsername(arg0 context.Context, arg1 *user_service.GetProfileByUsernameRequest) (*user_service.GetProfileByUsernameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByUsername", arg0, arg1)
	ret0, _ := ret[0].(*user_service.GetProfileByUsernameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByUsername indicates an expected call of GetProfileByUsername.
func (mr *MockProfileServiceServerMockRecorder) GetProfileByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUsername", reflect.TypeOf((*MockProfileServiceServer)(nil).GetProfileByUsername), arg0, arg1)
}

// GetPublicUserInfo mocks base method.
func (m *MockProfileServiceServer) GetPublicUserInfo(arg0 context.Context, arg1 *user_service.GetPublicUserInfoRequest) (*user_service.GetPublicUserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicUserInfo", arg0, arg1)
	ret0, _ := ret[0].(*user_service.GetPublicUserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicUserInfo indicates an expected call of GetPublicUserInfo.
func (mr *MockProfileServiceServerMockRecorder) GetPublicUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicUserInfo", reflect.TypeOf((*MockProfileServiceServer)(nil).GetPublicUserInfo), arg0, arg1)
}

// GetPublicUsersInfo mocks base method.
func (m *MockProfileServiceServer) GetPublicUsersInfo(arg0 context.Context, arg1 *user_service.GetPublicUsersInfoRequest) (*user_service.GetPublicUsersInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicUsersInfo", arg0, arg1)
	ret0, _ := ret[0].(*user_service.GetPublicUsersInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicUsersInfo indicates an expected call of GetPublicUsersInfo.
func (mr *MockProfileServiceServerMockRecorder) GetPublicUsersInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicUsersInfo", reflect.TypeOf((*MockProfileServiceServer)(nil).GetPublicUsersInfo), arg0, arg1)
}

// UpdateLastSeen mocks base method.
func (m *MockProfileServiceServer) UpdateLastSeen(arg0 context.Context, arg1 *user_service.UpdateLastSeenRequest) (*user_service.UpdateLastSeenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastSeen", arg0, arg1)
	ret0, _ := ret[0].(*user_service.UpdateLastSeenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLastSeen indicates an expected call of UpdateLastSeen.
func (mr *MockProfileServiceServerMockRecorder) UpdateLastSeen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSeen", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateLastSeen), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockProfileServiceServer) UpdateProfile(arg0 context.Context, arg1 *user_service.UpdateProfileRequest) (*user_service.UpdateProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(*user_service.UpdateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileServiceServerMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateProfile), arg0, arg1)
}

// mustEmbedUnimplementedProfileServiceServer mocks base method.
func (m *MockProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServiceServer")
}

// mustEmbedUnimplementedProfileServiceServer indicates an expected call of mustEmbedUnimplementedProfileServiceServer.
func (mr *MockProfileServiceServerMockRecorder) mustEmbedUnimplementedProfileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServiceServer", reflect.TypeOf((*MockProfileServiceServer)(nil).mustEmbedUnimplementedProfileServiceServer))
}

// MockUnsafeProfileServiceServer is a mock of UnsafeProfileServiceServer interface.
type MockUnsafeProfileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProfileServiceServerMockRecorder
}

// MockUnsafeProfileServiceServerMockRecorder is the mock recorder for MockUnsafeProfileServiceServer.
type MockUnsafeProfileServiceServerMockRecorder struct {
	mock *MockUnsafeProfileServiceServer
}

// NewMockUnsafeProfileServiceServer creates a new mock instance.
func NewMockUnsafeProfileServiceServer(ctrl *gomock.Controller) *MockUnsafeProfileServiceServer {
	mock := &MockUnsafeProfileServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProfileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProfileServiceServer) EXPECT() *MockUnsafeProfileServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProfileServiceServer mocks base method.
func (m *MockUnsafeProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServiceServer")
}

// mustEmbedUnimplementedProfileServiceServer indicates an expected call of mustEmbedUnimplementedProfileServiceServer.
func (mr *MockUnsafeProfileServiceServerMockRecorder) mustEmbedUnimplementedProfileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServiceServer", reflect.TypeOf((*MockUnsafeProfileServiceServer)(nil).mustEmbedUnimplementedProfileServiceServer))
}
