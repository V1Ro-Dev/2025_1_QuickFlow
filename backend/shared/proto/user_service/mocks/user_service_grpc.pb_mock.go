// Code generated by MockGen. DO NOT EDIT.
// Source: .//shared/proto/user_service/user_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	user_service "quickflow/shared/proto/user_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserServiceClient) GetUserById(ctx context.Context, in *user_service.GetUserByIdRequest, opts ...grpc.CallOption) (*user_service.GetUserByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserById", varargs...)
	ret0, _ := ret[0].(*user_service.GetUserByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserServiceClientMockRecorder) GetUserById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserById), varargs...)
}

// GetUserByUsername mocks base method.
func (m *MockUserServiceClient) GetUserByUsername(ctx context.Context, in *user_service.GetUserByUsernameRequest, opts ...grpc.CallOption) (*user_service.GetUserByUsernameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByUsername", varargs...)
	ret0, _ := ret[0].(*user_service.GetUserByUsernameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserServiceClientMockRecorder) GetUserByUsername(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByUsername), varargs...)
}

// LookupUserSession mocks base method.
func (m *MockUserServiceClient) LookupUserSession(ctx context.Context, in *user_service.LookupUserSessionRequest, opts ...grpc.CallOption) (*user_service.LookupUserSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookupUserSession", varargs...)
	ret0, _ := ret[0].(*user_service.LookupUserSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupUserSession indicates an expected call of LookupUserSession.
func (mr *MockUserServiceClientMockRecorder) LookupUserSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUserSession", reflect.TypeOf((*MockUserServiceClient)(nil).LookupUserSession), varargs...)
}

// SearchSimilarUser mocks base method.
func (m *MockUserServiceClient) SearchSimilarUser(ctx context.Context, in *user_service.SearchSimilarUserRequest, opts ...grpc.CallOption) (*user_service.SearchSimilarUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSimilarUser", varargs...)
	ret0, _ := ret[0].(*user_service.SearchSimilarUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSimilarUser indicates an expected call of SearchSimilarUser.
func (mr *MockUserServiceClientMockRecorder) SearchSimilarUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSimilarUser", reflect.TypeOf((*MockUserServiceClient)(nil).SearchSimilarUser), varargs...)
}

// SignIn mocks base method.
func (m *MockUserServiceClient) SignIn(ctx context.Context, in *user_service.SignInRequest, opts ...grpc.CallOption) (*user_service.SignInResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignIn", varargs...)
	ret0, _ := ret[0].(*user_service.SignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserServiceClientMockRecorder) SignIn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserServiceClient)(nil).SignIn), varargs...)
}

// SignOut mocks base method.
func (m *MockUserServiceClient) SignOut(ctx context.Context, in *user_service.SignOutRequest, opts ...grpc.CallOption) (*user_service.SignOutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignOut", varargs...)
	ret0, _ := ret[0].(*user_service.SignOutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut.
func (mr *MockUserServiceClientMockRecorder) SignOut(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockUserServiceClient)(nil).SignOut), varargs...)
}

// SignUp mocks base method.
func (m *MockUserServiceClient) SignUp(ctx context.Context, in *user_service.SignUpRequest, opts ...grpc.CallOption) (*user_service.SignUpResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUp", varargs...)
	ret0, _ := ret[0].(*user_service.SignUpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserServiceClientMockRecorder) SignUp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserServiceClient)(nil).SignUp), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserServiceServer) GetUserById(arg0 context.Context, arg1 *user_service.GetUserByIdRequest) (*user_service.GetUserByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(*user_service.GetUserByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserServiceServerMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserById), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockUserServiceServer) GetUserByUsername(arg0 context.Context, arg1 *user_service.GetUserByUsernameRequest) (*user_service.GetUserByUsernameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*user_service.GetUserByUsernameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserServiceServerMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByUsername), arg0, arg1)
}

// LookupUserSession mocks base method.
func (m *MockUserServiceServer) LookupUserSession(arg0 context.Context, arg1 *user_service.LookupUserSessionRequest) (*user_service.LookupUserSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupUserSession", arg0, arg1)
	ret0, _ := ret[0].(*user_service.LookupUserSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupUserSession indicates an expected call of LookupUserSession.
func (mr *MockUserServiceServerMockRecorder) LookupUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUserSession", reflect.TypeOf((*MockUserServiceServer)(nil).LookupUserSession), arg0, arg1)
}

// SearchSimilarUser mocks base method.
func (m *MockUserServiceServer) SearchSimilarUser(arg0 context.Context, arg1 *user_service.SearchSimilarUserRequest) (*user_service.SearchSimilarUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSimilarUser", arg0, arg1)
	ret0, _ := ret[0].(*user_service.SearchSimilarUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSimilarUser indicates an expected call of SearchSimilarUser.
func (mr *MockUserServiceServerMockRecorder) SearchSimilarUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSimilarUser", reflect.TypeOf((*MockUserServiceServer)(nil).SearchSimilarUser), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockUserServiceServer) SignIn(arg0 context.Context, arg1 *user_service.SignInRequest) (*user_service.SignInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(*user_service.SignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserServiceServerMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserServiceServer)(nil).SignIn), arg0, arg1)
}

// SignOut mocks base method.
func (m *MockUserServiceServer) SignOut(arg0 context.Context, arg1 *user_service.SignOutRequest) (*user_service.SignOutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", arg0, arg1)
	ret0, _ := ret[0].(*user_service.SignOutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut.
func (mr *MockUserServiceServerMockRecorder) SignOut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockUserServiceServer)(nil).SignOut), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockUserServiceServer) SignUp(arg0 context.Context, arg1 *user_service.SignUpRequest) (*user_service.SignUpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(*user_service.SignUpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserServiceServerMockRecorder) SignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserServiceServer)(nil).SignUp), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}
