// Code generated by MockGen. DO NOT EDIT.
// Source: .//shared/proto/messenger_service/message_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	proto "quickflow/shared/proto/messenger_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMessageServiceClient is a mock of MessageServiceClient interface.
type MockMessageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceClientMockRecorder
}

// MockMessageServiceClientMockRecorder is the mock recorder for MockMessageServiceClient.
type MockMessageServiceClientMockRecorder struct {
	mock *MockMessageServiceClient
}

// NewMockMessageServiceClient creates a new mock instance.
func NewMockMessageServiceClient(ctrl *gomock.Controller) *MockMessageServiceClient {
	mock := &MockMessageServiceClient{ctrl: ctrl}
	mock.recorder = &MockMessageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServiceClient) EXPECT() *MockMessageServiceClientMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessageServiceClient) DeleteMessage(ctx context.Context, in *proto.DeleteMessageRequest, opts ...grpc.CallOption) (*proto.DeleteMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMessage", varargs...)
	ret0, _ := ret[0].(*proto.DeleteMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageServiceClientMockRecorder) DeleteMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageServiceClient)(nil).DeleteMessage), varargs...)
}

// GetLastReadTs mocks base method.
func (m *MockMessageServiceClient) GetLastReadTs(ctx context.Context, in *proto.GetLastReadTsRequest, opts ...grpc.CallOption) (*proto.GetLastReadTsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastReadTs", varargs...)
	ret0, _ := ret[0].(*proto.GetLastReadTsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastReadTs indicates an expected call of GetLastReadTs.
func (mr *MockMessageServiceClientMockRecorder) GetLastReadTs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastReadTs", reflect.TypeOf((*MockMessageServiceClient)(nil).GetLastReadTs), varargs...)
}

// GetMessageById mocks base method.
func (m *MockMessageServiceClient) GetMessageById(ctx context.Context, in *proto.GetMessageByIdRequest, opts ...grpc.CallOption) (*proto.GetMessageByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessageById", varargs...)
	ret0, _ := ret[0].(*proto.GetMessageByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageById indicates an expected call of GetMessageById.
func (mr *MockMessageServiceClientMockRecorder) GetMessageById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageById", reflect.TypeOf((*MockMessageServiceClient)(nil).GetMessageById), varargs...)
}

// GetMessagesForChat mocks base method.
func (m *MockMessageServiceClient) GetMessagesForChat(ctx context.Context, in *proto.GetMessagesForChatRequest, opts ...grpc.CallOption) (*proto.GetMessagesForChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessagesForChat", varargs...)
	ret0, _ := ret[0].(*proto.GetMessagesForChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesForChat indicates an expected call of GetMessagesForChat.
func (mr *MockMessageServiceClientMockRecorder) GetMessagesForChat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesForChat", reflect.TypeOf((*MockMessageServiceClient)(nil).GetMessagesForChat), varargs...)
}

// GetNumUnreadMessages mocks base method.
func (m *MockMessageServiceClient) GetNumUnreadMessages(ctx context.Context, in *proto.GetNumUnreadMessagesRequest, opts ...grpc.CallOption) (*proto.GetNumUnreadMessagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNumUnreadMessages", varargs...)
	ret0, _ := ret[0].(*proto.GetNumUnreadMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumUnreadMessages indicates an expected call of GetNumUnreadMessages.
func (mr *MockMessageServiceClientMockRecorder) GetNumUnreadMessages(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumUnreadMessages", reflect.TypeOf((*MockMessageServiceClient)(nil).GetNumUnreadMessages), varargs...)
}

// SendMessage mocks base method.
func (m *MockMessageServiceClient) SendMessage(ctx context.Context, in *proto.SendMessageRequest, opts ...grpc.CallOption) (*proto.SendMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(*proto.SendMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageServiceClientMockRecorder) SendMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageServiceClient)(nil).SendMessage), varargs...)
}

// UpdateLastReadTs mocks base method.
func (m *MockMessageServiceClient) UpdateLastReadTs(ctx context.Context, in *proto.UpdateLastReadTsRequest, opts ...grpc.CallOption) (*proto.UpdateLastReadTsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLastReadTs", varargs...)
	ret0, _ := ret[0].(*proto.UpdateLastReadTsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLastReadTs indicates an expected call of UpdateLastReadTs.
func (mr *MockMessageServiceClientMockRecorder) UpdateLastReadTs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastReadTs", reflect.TypeOf((*MockMessageServiceClient)(nil).UpdateLastReadTs), varargs...)
}

// MockMessageServiceServer is a mock of MessageServiceServer interface.
type MockMessageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceServerMockRecorder
}

// MockMessageServiceServerMockRecorder is the mock recorder for MockMessageServiceServer.
type MockMessageServiceServerMockRecorder struct {
	mock *MockMessageServiceServer
}

// NewMockMessageServiceServer creates a new mock instance.
func NewMockMessageServiceServer(ctrl *gomock.Controller) *MockMessageServiceServer {
	mock := &MockMessageServiceServer{ctrl: ctrl}
	mock.recorder = &MockMessageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServiceServer) EXPECT() *MockMessageServiceServerMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessageServiceServer) DeleteMessage(arg0 context.Context, arg1 *proto.DeleteMessageRequest) (*proto.DeleteMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageServiceServerMockRecorder) DeleteMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageServiceServer)(nil).DeleteMessage), arg0, arg1)
}

// GetLastReadTs mocks base method.
func (m *MockMessageServiceServer) GetLastReadTs(arg0 context.Context, arg1 *proto.GetLastReadTsRequest) (*proto.GetLastReadTsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastReadTs", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetLastReadTsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastReadTs indicates an expected call of GetLastReadTs.
func (mr *MockMessageServiceServerMockRecorder) GetLastReadTs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastReadTs", reflect.TypeOf((*MockMessageServiceServer)(nil).GetLastReadTs), arg0, arg1)
}

// GetMessageById mocks base method.
func (m *MockMessageServiceServer) GetMessageById(arg0 context.Context, arg1 *proto.GetMessageByIdRequest) (*proto.GetMessageByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageById", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetMessageByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageById indicates an expected call of GetMessageById.
func (mr *MockMessageServiceServerMockRecorder) GetMessageById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageById", reflect.TypeOf((*MockMessageServiceServer)(nil).GetMessageById), arg0, arg1)
}

// GetMessagesForChat mocks base method.
func (m *MockMessageServiceServer) GetMessagesForChat(arg0 context.Context, arg1 *proto.GetMessagesForChatRequest) (*proto.GetMessagesForChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesForChat", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetMessagesForChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesForChat indicates an expected call of GetMessagesForChat.
func (mr *MockMessageServiceServerMockRecorder) GetMessagesForChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesForChat", reflect.TypeOf((*MockMessageServiceServer)(nil).GetMessagesForChat), arg0, arg1)
}

// GetNumUnreadMessages mocks base method.
func (m *MockMessageServiceServer) GetNumUnreadMessages(arg0 context.Context, arg1 *proto.GetNumUnreadMessagesRequest) (*proto.GetNumUnreadMessagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumUnreadMessages", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetNumUnreadMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumUnreadMessages indicates an expected call of GetNumUnreadMessages.
func (mr *MockMessageServiceServerMockRecorder) GetNumUnreadMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumUnreadMessages", reflect.TypeOf((*MockMessageServiceServer)(nil).GetNumUnreadMessages), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockMessageServiceServer) SendMessage(arg0 context.Context, arg1 *proto.SendMessageRequest) (*proto.SendMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(*proto.SendMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageServiceServerMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageServiceServer)(nil).SendMessage), arg0, arg1)
}

// UpdateLastReadTs mocks base method.
func (m *MockMessageServiceServer) UpdateLastReadTs(arg0 context.Context, arg1 *proto.UpdateLastReadTsRequest) (*proto.UpdateLastReadTsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastReadTs", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateLastReadTsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLastReadTs indicates an expected call of UpdateLastReadTs.
func (mr *MockMessageServiceServerMockRecorder) UpdateLastReadTs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastReadTs", reflect.TypeOf((*MockMessageServiceServer)(nil).UpdateLastReadTs), arg0, arg1)
}

// mustEmbedUnimplementedMessageServiceServer mocks base method.
func (m *MockMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMessageServiceServer")
}

// mustEmbedUnimplementedMessageServiceServer indicates an expected call of mustEmbedUnimplementedMessageServiceServer.
func (mr *MockMessageServiceServerMockRecorder) mustEmbedUnimplementedMessageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMessageServiceServer", reflect.TypeOf((*MockMessageServiceServer)(nil).mustEmbedUnimplementedMessageServiceServer))
}

// MockUnsafeMessageServiceServer is a mock of UnsafeMessageServiceServer interface.
type MockUnsafeMessageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMessageServiceServerMockRecorder
}

// MockUnsafeMessageServiceServerMockRecorder is the mock recorder for MockUnsafeMessageServiceServer.
type MockUnsafeMessageServiceServerMockRecorder struct {
	mock *MockUnsafeMessageServiceServer
}

// NewMockUnsafeMessageServiceServer creates a new mock instance.
func NewMockUnsafeMessageServiceServer(ctrl *gomock.Controller) *MockUnsafeMessageServiceServer {
	mock := &MockUnsafeMessageServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMessageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMessageServiceServer) EXPECT() *MockUnsafeMessageServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMessageServiceServer mocks base method.
func (m *MockUnsafeMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMessageServiceServer")
}

// mustEmbedUnimplementedMessageServiceServer indicates an expected call of mustEmbedUnimplementedMessageServiceServer.
func (mr *MockUnsafeMessageServiceServerMockRecorder) mustEmbedUnimplementedMessageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMessageServiceServer", reflect.TypeOf((*MockUnsafeMessageServiceServer)(nil).mustEmbedUnimplementedMessageServiceServer))
}
