// Code generated by MockGen. DO NOT EDIT.
// Source: ./shared/proto/messenger_service/chat_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	proto "quickflow/shared/proto/messenger_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockChatServiceClient is a mock of ChatServiceClient interface.
type MockChatServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceClientMockRecorder
}

// MockChatServiceClientMockRecorder is the mock recorder for MockChatServiceClient.
type MockChatServiceClientMockRecorder struct {
	mock *MockChatServiceClient
}

// NewMockChatServiceClient creates a new mock instance.
func NewMockChatServiceClient(ctrl *gomock.Controller) *MockChatServiceClient {
	mock := &MockChatServiceClient{ctrl: ctrl}
	mock.recorder = &MockChatServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServiceClient) EXPECT() *MockChatServiceClientMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChatServiceClient) CreateChat(ctx context.Context, in *proto.CreateChatRequest, opts ...grpc.CallOption) (*proto.CreateChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChat", varargs...)
	ret0, _ := ret[0].(*proto.CreateChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatServiceClientMockRecorder) CreateChat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatServiceClient)(nil).CreateChat), varargs...)
}

// DeleteChat mocks base method.
func (m *MockChatServiceClient) DeleteChat(ctx context.Context, in *proto.DeleteChatRequest, opts ...grpc.CallOption) (*proto.DeleteChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChat", varargs...)
	ret0, _ := ret[0].(*proto.DeleteChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatServiceClientMockRecorder) DeleteChat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChatServiceClient)(nil).DeleteChat), varargs...)
}

// GetChat mocks base method.
func (m *MockChatServiceClient) GetChat(ctx context.Context, in *proto.GetChatRequest, opts ...grpc.CallOption) (*proto.GetChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChat", varargs...)
	ret0, _ := ret[0].(*proto.GetChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatServiceClientMockRecorder) GetChat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatServiceClient)(nil).GetChat), varargs...)
}

// GetChatParticipants mocks base method.
func (m *MockChatServiceClient) GetChatParticipants(ctx context.Context, in *proto.GetChatParticipantsRequest, opts ...grpc.CallOption) (*proto.GetChatParticipantsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatParticipants", varargs...)
	ret0, _ := ret[0].(*proto.GetChatParticipantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatParticipants indicates an expected call of GetChatParticipants.
func (mr *MockChatServiceClientMockRecorder) GetChatParticipants(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatParticipants", reflect.TypeOf((*MockChatServiceClient)(nil).GetChatParticipants), varargs...)
}

// GetNumUnreadChats mocks base method.
func (m *MockChatServiceClient) GetNumUnreadChats(ctx context.Context, in *proto.GetNumUnreadChatsRequest, opts ...grpc.CallOption) (*proto.GetNumUnreadChatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNumUnreadChats", varargs...)
	ret0, _ := ret[0].(*proto.GetNumUnreadChatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumUnreadChats indicates an expected call of GetNumUnreadChats.
func (mr *MockChatServiceClientMockRecorder) GetNumUnreadChats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumUnreadChats", reflect.TypeOf((*MockChatServiceClient)(nil).GetNumUnreadChats), varargs...)
}

// GetPrivateChat mocks base method.
func (m *MockChatServiceClient) GetPrivateChat(ctx context.Context, in *proto.GetPrivateChatRequest, opts ...grpc.CallOption) (*proto.GetPrivateChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrivateChat", varargs...)
	ret0, _ := ret[0].(*proto.GetPrivateChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateChat indicates an expected call of GetPrivateChat.
func (mr *MockChatServiceClientMockRecorder) GetPrivateChat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateChat", reflect.TypeOf((*MockChatServiceClient)(nil).GetPrivateChat), varargs...)
}

// GetUserChats mocks base method.
func (m *MockChatServiceClient) GetUserChats(ctx context.Context, in *proto.GetUserChatsRequest, opts ...grpc.CallOption) (*proto.GetUserChatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserChats", varargs...)
	ret0, _ := ret[0].(*proto.GetUserChatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatServiceClientMockRecorder) GetUserChats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChatServiceClient)(nil).GetUserChats), varargs...)
}

// GetUserChatsById mocks base method.
func (m *MockChatServiceClient) GetUserChatsById(ctx context.Context, in *proto.GetUserChatsRequest, opts ...grpc.CallOption) (*proto.GetUserChatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserChatsById", varargs...)
	ret0, _ := ret[0].(*proto.GetUserChatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChatsById indicates an expected call of GetUserChatsById.
func (mr *MockChatServiceClientMockRecorder) GetUserChatsById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChatsById", reflect.TypeOf((*MockChatServiceClient)(nil).GetUserChatsById), varargs...)
}

// JoinChat mocks base method.
func (m *MockChatServiceClient) JoinChat(ctx context.Context, in *proto.JoinChatRequest, opts ...grpc.CallOption) (*proto.JoinChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinChat", varargs...)
	ret0, _ := ret[0].(*proto.JoinChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinChat indicates an expected call of JoinChat.
func (mr *MockChatServiceClientMockRecorder) JoinChat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChat", reflect.TypeOf((*MockChatServiceClient)(nil).JoinChat), varargs...)
}

// LeaveChat mocks base method.
func (m *MockChatServiceClient) LeaveChat(ctx context.Context, in *proto.LeaveChatRequest, opts ...grpc.CallOption) (*proto.LeaveChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LeaveChat", varargs...)
	ret0, _ := ret[0].(*proto.LeaveChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveChat indicates an expected call of LeaveChat.
func (mr *MockChatServiceClientMockRecorder) LeaveChat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChat", reflect.TypeOf((*MockChatServiceClient)(nil).LeaveChat), varargs...)
}

// MockChatServiceServer is a mock of ChatServiceServer interface.
type MockChatServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceServerMockRecorder
}

// MockChatServiceServerMockRecorder is the mock recorder for MockChatServiceServer.
type MockChatServiceServerMockRecorder struct {
	mock *MockChatServiceServer
}

// NewMockChatServiceServer creates a new mock instance.
func NewMockChatServiceServer(ctrl *gomock.Controller) *MockChatServiceServer {
	mock := &MockChatServiceServer{ctrl: ctrl}
	mock.recorder = &MockChatServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServiceServer) EXPECT() *MockChatServiceServerMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChatServiceServer) CreateChat(arg0 context.Context, arg1 *proto.CreateChatRequest) (*proto.CreateChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatServiceServerMockRecorder) CreateChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatServiceServer)(nil).CreateChat), arg0, arg1)
}

// DeleteChat mocks base method.
func (m *MockChatServiceServer) DeleteChat(arg0 context.Context, arg1 *proto.DeleteChatRequest) (*proto.DeleteChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatServiceServerMockRecorder) DeleteChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChatServiceServer)(nil).DeleteChat), arg0, arg1)
}

// GetChat mocks base method.
func (m *MockChatServiceServer) GetChat(arg0 context.Context, arg1 *proto.GetChatRequest) (*proto.GetChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatServiceServerMockRecorder) GetChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatServiceServer)(nil).GetChat), arg0, arg1)
}

// GetChatParticipants mocks base method.
func (m *MockChatServiceServer) GetChatParticipants(arg0 context.Context, arg1 *proto.GetChatParticipantsRequest) (*proto.GetChatParticipantsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatParticipants", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetChatParticipantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatParticipants indicates an expected call of GetChatParticipants.
func (mr *MockChatServiceServerMockRecorder) GetChatParticipants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatParticipants", reflect.TypeOf((*MockChatServiceServer)(nil).GetChatParticipants), arg0, arg1)
}

// GetNumUnreadChats mocks base method.
func (m *MockChatServiceServer) GetNumUnreadChats(arg0 context.Context, arg1 *proto.GetNumUnreadChatsRequest) (*proto.GetNumUnreadChatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumUnreadChats", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetNumUnreadChatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumUnreadChats indicates an expected call of GetNumUnreadChats.
func (mr *MockChatServiceServerMockRecorder) GetNumUnreadChats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumUnreadChats", reflect.TypeOf((*MockChatServiceServer)(nil).GetNumUnreadChats), arg0, arg1)
}

// GetPrivateChat mocks base method.
func (m *MockChatServiceServer) GetPrivateChat(arg0 context.Context, arg1 *proto.GetPrivateChatRequest) (*proto.GetPrivateChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateChat", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetPrivateChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateChat indicates an expected call of GetPrivateChat.
func (mr *MockChatServiceServerMockRecorder) GetPrivateChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateChat", reflect.TypeOf((*MockChatServiceServer)(nil).GetPrivateChat), arg0, arg1)
}

// GetUserChats mocks base method.
func (m *MockChatServiceServer) GetUserChats(arg0 context.Context, arg1 *proto.GetUserChatsRequest) (*proto.GetUserChatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserChatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatServiceServerMockRecorder) GetUserChats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChatServiceServer)(nil).GetUserChats), arg0, arg1)
}

// GetUserChatsById mocks base method.
func (m *MockChatServiceServer) GetUserChatsById(arg0 context.Context, arg1 *proto.GetUserChatsRequest) (*proto.GetUserChatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChatsById", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserChatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChatsById indicates an expected call of GetUserChatsById.
func (mr *MockChatServiceServerMockRecorder) GetUserChatsById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChatsById", reflect.TypeOf((*MockChatServiceServer)(nil).GetUserChatsById), arg0, arg1)
}

// JoinChat mocks base method.
func (m *MockChatServiceServer) JoinChat(arg0 context.Context, arg1 *proto.JoinChatRequest) (*proto.JoinChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinChat", arg0, arg1)
	ret0, _ := ret[0].(*proto.JoinChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinChat indicates an expected call of JoinChat.
func (mr *MockChatServiceServerMockRecorder) JoinChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChat", reflect.TypeOf((*MockChatServiceServer)(nil).JoinChat), arg0, arg1)
}

// LeaveChat mocks base method.
func (m *MockChatServiceServer) LeaveChat(arg0 context.Context, arg1 *proto.LeaveChatRequest) (*proto.LeaveChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveChat", arg0, arg1)
	ret0, _ := ret[0].(*proto.LeaveChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveChat indicates an expected call of LeaveChat.
func (mr *MockChatServiceServerMockRecorder) LeaveChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChat", reflect.TypeOf((*MockChatServiceServer)(nil).LeaveChat), arg0, arg1)
}

// mustEmbedUnimplementedChatServiceServer mocks base method.
func (m *MockChatServiceServer) mustEmbedUnimplementedChatServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedChatServiceServer")
}

// mustEmbedUnimplementedChatServiceServer indicates an expected call of mustEmbedUnimplementedChatServiceServer.
func (mr *MockChatServiceServerMockRecorder) mustEmbedUnimplementedChatServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedChatServiceServer", reflect.TypeOf((*MockChatServiceServer)(nil).mustEmbedUnimplementedChatServiceServer))
}

// MockUnsafeChatServiceServer is a mock of UnsafeChatServiceServer interface.
type MockUnsafeChatServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeChatServiceServerMockRecorder
}

// MockUnsafeChatServiceServerMockRecorder is the mock recorder for MockUnsafeChatServiceServer.
type MockUnsafeChatServiceServerMockRecorder struct {
	mock *MockUnsafeChatServiceServer
}

// NewMockUnsafeChatServiceServer creates a new mock instance.
func NewMockUnsafeChatServiceServer(ctrl *gomock.Controller) *MockUnsafeChatServiceServer {
	mock := &MockUnsafeChatServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeChatServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeChatServiceServer) EXPECT() *MockUnsafeChatServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedChatServiceServer mocks base method.
func (m *MockUnsafeChatServiceServer) mustEmbedUnimplementedChatServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedChatServiceServer")
}

// mustEmbedUnimplementedChatServiceServer indicates an expected call of mustEmbedUnimplementedChatServiceServer.
func (mr *MockUnsafeChatServiceServerMockRecorder) mustEmbedUnimplementedChatServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedChatServiceServer", reflect.TypeOf((*MockUnsafeChatServiceServer)(nil).mustEmbedUnimplementedChatServiceServer))
}
