// Code generated by MockGen. DO NOT EDIT.
// Source: ./shared/proto/messenger_service/sticker_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	proto "quickflow/shared/proto/messenger_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStickerServiceClient is a mock of StickerServiceClient interface.
type MockStickerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStickerServiceClientMockRecorder
}

// MockStickerServiceClientMockRecorder is the mock recorder for MockStickerServiceClient.
type MockStickerServiceClientMockRecorder struct {
	mock *MockStickerServiceClient
}

// NewMockStickerServiceClient creates a new mock instance.
func NewMockStickerServiceClient(ctrl *gomock.Controller) *MockStickerServiceClient {
	mock := &MockStickerServiceClient{ctrl: ctrl}
	mock.recorder = &MockStickerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStickerServiceClient) EXPECT() *MockStickerServiceClientMockRecorder {
	return m.recorder
}

// AddStickerPack mocks base method.
func (m *MockStickerServiceClient) AddStickerPack(ctx context.Context, in *proto.AddStickerPackRequest, opts ...grpc.CallOption) (*proto.AddStickerPackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddStickerPack", varargs...)
	ret0, _ := ret[0].(*proto.AddStickerPackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStickerPack indicates an expected call of AddStickerPack.
func (mr *MockStickerServiceClientMockRecorder) AddStickerPack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStickerPack", reflect.TypeOf((*MockStickerServiceClient)(nil).AddStickerPack), varargs...)
}

// DeleteStickerPack mocks base method.
func (m *MockStickerServiceClient) DeleteStickerPack(ctx context.Context, in *proto.DeleteStickerPackRequest, opts ...grpc.CallOption) (*proto.DeleteStickerPackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStickerPack", varargs...)
	ret0, _ := ret[0].(*proto.DeleteStickerPackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStickerPack indicates an expected call of DeleteStickerPack.
func (mr *MockStickerServiceClientMockRecorder) DeleteStickerPack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStickerPack", reflect.TypeOf((*MockStickerServiceClient)(nil).DeleteStickerPack), varargs...)
}

// GetStickerPack mocks base method.
func (m *MockStickerServiceClient) GetStickerPack(ctx context.Context, in *proto.GetStickerPackRequest, opts ...grpc.CallOption) (*proto.GetStickerPackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStickerPack", varargs...)
	ret0, _ := ret[0].(*proto.GetStickerPackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPack indicates an expected call of GetStickerPack.
func (mr *MockStickerServiceClientMockRecorder) GetStickerPack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPack", reflect.TypeOf((*MockStickerServiceClient)(nil).GetStickerPack), varargs...)
}

// GetStickerPackByName mocks base method.
func (m *MockStickerServiceClient) GetStickerPackByName(ctx context.Context, in *proto.GetStickerPackByNameRequest, opts ...grpc.CallOption) (*proto.GetStickerPackByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStickerPackByName", varargs...)
	ret0, _ := ret[0].(*proto.GetStickerPackByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPackByName indicates an expected call of GetStickerPackByName.
func (mr *MockStickerServiceClientMockRecorder) GetStickerPackByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPackByName", reflect.TypeOf((*MockStickerServiceClient)(nil).GetStickerPackByName), varargs...)
}

// GetStickerPacks mocks base method.
func (m *MockStickerServiceClient) GetStickerPacks(ctx context.Context, in *proto.GetStickerPacksRequest, opts ...grpc.CallOption) (*proto.GetStickerPacksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStickerPacks", varargs...)
	ret0, _ := ret[0].(*proto.GetStickerPacksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPacks indicates an expected call of GetStickerPacks.
func (mr *MockStickerServiceClientMockRecorder) GetStickerPacks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPacks", reflect.TypeOf((*MockStickerServiceClient)(nil).GetStickerPacks), varargs...)
}

// MockStickerServiceServer is a mock of StickerServiceServer interface.
type MockStickerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStickerServiceServerMockRecorder
}

// MockStickerServiceServerMockRecorder is the mock recorder for MockStickerServiceServer.
type MockStickerServiceServerMockRecorder struct {
	mock *MockStickerServiceServer
}

// NewMockStickerServiceServer creates a new mock instance.
func NewMockStickerServiceServer(ctrl *gomock.Controller) *MockStickerServiceServer {
	mock := &MockStickerServiceServer{ctrl: ctrl}
	mock.recorder = &MockStickerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStickerServiceServer) EXPECT() *MockStickerServiceServerMockRecorder {
	return m.recorder
}

// AddStickerPack mocks base method.
func (m *MockStickerServiceServer) AddStickerPack(arg0 context.Context, arg1 *proto.AddStickerPackRequest) (*proto.AddStickerPackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStickerPack", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddStickerPackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStickerPack indicates an expected call of AddStickerPack.
func (mr *MockStickerServiceServerMockRecorder) AddStickerPack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStickerPack", reflect.TypeOf((*MockStickerServiceServer)(nil).AddStickerPack), arg0, arg1)
}

// DeleteStickerPack mocks base method.
func (m *MockStickerServiceServer) DeleteStickerPack(arg0 context.Context, arg1 *proto.DeleteStickerPackRequest) (*proto.DeleteStickerPackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStickerPack", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteStickerPackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStickerPack indicates an expected call of DeleteStickerPack.
func (mr *MockStickerServiceServerMockRecorder) DeleteStickerPack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStickerPack", reflect.TypeOf((*MockStickerServiceServer)(nil).DeleteStickerPack), arg0, arg1)
}

// GetStickerPack mocks base method.
func (m *MockStickerServiceServer) GetStickerPack(arg0 context.Context, arg1 *proto.GetStickerPackRequest) (*proto.GetStickerPackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerPack", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetStickerPackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPack indicates an expected call of GetStickerPack.
func (mr *MockStickerServiceServerMockRecorder) GetStickerPack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPack", reflect.TypeOf((*MockStickerServiceServer)(nil).GetStickerPack), arg0, arg1)
}

// GetStickerPackByName mocks base method.
func (m *MockStickerServiceServer) GetStickerPackByName(arg0 context.Context, arg1 *proto.GetStickerPackByNameRequest) (*proto.GetStickerPackByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerPackByName", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetStickerPackByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPackByName indicates an expected call of GetStickerPackByName.
func (mr *MockStickerServiceServerMockRecorder) GetStickerPackByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPackByName", reflect.TypeOf((*MockStickerServiceServer)(nil).GetStickerPackByName), arg0, arg1)
}

// GetStickerPacks mocks base method.
func (m *MockStickerServiceServer) GetStickerPacks(arg0 context.Context, arg1 *proto.GetStickerPacksRequest) (*proto.GetStickerPacksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerPacks", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetStickerPacksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerPacks indicates an expected call of GetStickerPacks.
func (mr *MockStickerServiceServerMockRecorder) GetStickerPacks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerPacks", reflect.TypeOf((*MockStickerServiceServer)(nil).GetStickerPacks), arg0, arg1)
}

// mustEmbedUnimplementedStickerServiceServer mocks base method.
func (m *MockStickerServiceServer) mustEmbedUnimplementedStickerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStickerServiceServer")
}

// mustEmbedUnimplementedStickerServiceServer indicates an expected call of mustEmbedUnimplementedStickerServiceServer.
func (mr *MockStickerServiceServerMockRecorder) mustEmbedUnimplementedStickerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStickerServiceServer", reflect.TypeOf((*MockStickerServiceServer)(nil).mustEmbedUnimplementedStickerServiceServer))
}

// MockUnsafeStickerServiceServer is a mock of UnsafeStickerServiceServer interface.
type MockUnsafeStickerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStickerServiceServerMockRecorder
}

// MockUnsafeStickerServiceServerMockRecorder is the mock recorder for MockUnsafeStickerServiceServer.
type MockUnsafeStickerServiceServerMockRecorder struct {
	mock *MockUnsafeStickerServiceServer
}

// NewMockUnsafeStickerServiceServer creates a new mock instance.
func NewMockUnsafeStickerServiceServer(ctrl *gomock.Controller) *MockUnsafeStickerServiceServer {
	mock := &MockUnsafeStickerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStickerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStickerServiceServer) EXPECT() *MockUnsafeStickerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStickerServiceServer mocks base method.
func (m *MockUnsafeStickerServiceServer) mustEmbedUnimplementedStickerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStickerServiceServer")
}

// mustEmbedUnimplementedStickerServiceServer indicates an expected call of mustEmbedUnimplementedStickerServiceServer.
func (mr *MockUnsafeStickerServiceServerMockRecorder) mustEmbedUnimplementedStickerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStickerServiceServer", reflect.TypeOf((*MockUnsafeStickerServiceServer)(nil).mustEmbedUnimplementedStickerServiceServer))
}
