// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	GetMessagesForChat(ctx context.Context, in *GetMessagesForChatRequest, opts ...grpc.CallOption) (*GetMessagesForChatResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	UpdateLastReadTs(ctx context.Context, in *UpdateLastReadTsRequest, opts ...grpc.CallOption) (*UpdateLastReadTsResponse, error)
	GetLastReadTs(ctx context.Context, in *GetLastReadTsRequest, opts ...grpc.CallOption) (*GetLastReadTsResponse, error)
	GetMessageById(ctx context.Context, in *GetMessageByIdRequest, opts ...grpc.CallOption) (*GetMessageByIdResponse, error)
	GetNumUnreadMessages(ctx context.Context, in *GetNumUnreadMessagesRequest, opts ...grpc.CallOption) (*GetNumUnreadMessagesResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetMessagesForChat(ctx context.Context, in *GetMessagesForChatRequest, opts ...grpc.CallOption) (*GetMessagesForChatResponse, error) {
	out := new(GetMessagesForChatResponse)
	err := c.cc.Invoke(ctx, "/messenger_service.MessageService/GetMessagesForChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/messenger_service.MessageService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, "/messenger_service.MessageService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateLastReadTs(ctx context.Context, in *UpdateLastReadTsRequest, opts ...grpc.CallOption) (*UpdateLastReadTsResponse, error) {
	out := new(UpdateLastReadTsResponse)
	err := c.cc.Invoke(ctx, "/messenger_service.MessageService/UpdateLastReadTs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetLastReadTs(ctx context.Context, in *GetLastReadTsRequest, opts ...grpc.CallOption) (*GetLastReadTsResponse, error) {
	out := new(GetLastReadTsResponse)
	err := c.cc.Invoke(ctx, "/messenger_service.MessageService/GetLastReadTs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessageById(ctx context.Context, in *GetMessageByIdRequest, opts ...grpc.CallOption) (*GetMessageByIdResponse, error) {
	out := new(GetMessageByIdResponse)
	err := c.cc.Invoke(ctx, "/messenger_service.MessageService/GetMessageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetNumUnreadMessages(ctx context.Context, in *GetNumUnreadMessagesRequest, opts ...grpc.CallOption) (*GetNumUnreadMessagesResponse, error) {
	out := new(GetNumUnreadMessagesResponse)
	err := c.cc.Invoke(ctx, "/messenger_service.MessageService/GetNumUnreadMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	GetMessagesForChat(context.Context, *GetMessagesForChatRequest) (*GetMessagesForChatResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	UpdateLastReadTs(context.Context, *UpdateLastReadTsRequest) (*UpdateLastReadTsResponse, error)
	GetLastReadTs(context.Context, *GetLastReadTsRequest) (*GetLastReadTsResponse, error)
	GetMessageById(context.Context, *GetMessageByIdRequest) (*GetMessageByIdResponse, error)
	GetNumUnreadMessages(context.Context, *GetNumUnreadMessagesRequest) (*GetNumUnreadMessagesResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) GetMessagesForChat(context.Context, *GetMessagesForChatRequest) (*GetMessagesForChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesForChat not implemented")
}
func (UnimplementedMessageServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedMessageServiceServer) UpdateLastReadTs(context.Context, *UpdateLastReadTsRequest) (*UpdateLastReadTsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLastReadTs not implemented")
}
func (UnimplementedMessageServiceServer) GetLastReadTs(context.Context, *GetLastReadTsRequest) (*GetLastReadTsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastReadTs not implemented")
}
func (UnimplementedMessageServiceServer) GetMessageById(context.Context, *GetMessageByIdRequest) (*GetMessageByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageById not implemented")
}
func (UnimplementedMessageServiceServer) GetNumUnreadMessages(context.Context, *GetNumUnreadMessagesRequest) (*GetNumUnreadMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumUnreadMessages not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_GetMessagesForChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesForChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessagesForChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger_service.MessageService/GetMessagesForChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessagesForChat(ctx, req.(*GetMessagesForChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger_service.MessageService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger_service.MessageService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateLastReadTs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLastReadTsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateLastReadTs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger_service.MessageService/UpdateLastReadTs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateLastReadTs(ctx, req.(*UpdateLastReadTsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetLastReadTs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastReadTsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetLastReadTs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger_service.MessageService/GetLastReadTs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetLastReadTs(ctx, req.(*GetLastReadTsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger_service.MessageService/GetMessageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessageById(ctx, req.(*GetMessageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetNumUnreadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumUnreadMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetNumUnreadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger_service.MessageService/GetNumUnreadMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetNumUnreadMessages(ctx, req.(*GetNumUnreadMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messenger_service.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessagesForChat",
			Handler:    _MessageService_GetMessagesForChat_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _MessageService_SendMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _MessageService_DeleteMessage_Handler,
		},
		{
			MethodName: "UpdateLastReadTs",
			Handler:    _MessageService_UpdateLastReadTs_Handler,
		},
		{
			MethodName: "GetLastReadTs",
			Handler:    _MessageService_GetLastReadTs_Handler,
		},
		{
			MethodName: "GetMessageById",
			Handler:    _MessageService_GetMessageById_Handler,
		},
		{
			MethodName: "GetNumUnreadMessages",
			Handler:    _MessageService_GetNumUnreadMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message_service.proto",
}
