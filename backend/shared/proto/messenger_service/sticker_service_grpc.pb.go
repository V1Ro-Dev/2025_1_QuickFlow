// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StickerServiceClient is the client API for StickerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StickerServiceClient interface {
	AddStickerPack(ctx context.Context, in *AddStickerPackRequest, opts ...grpc.CallOption) (*AddStickerPackResponse, error)
	GetStickerPack(ctx context.Context, in *GetStickerPackRequest, opts ...grpc.CallOption) (*GetStickerPackResponse, error)
	DeleteStickerPack(ctx context.Context, in *DeleteStickerPackRequest, opts ...grpc.CallOption) (*DeleteStickerPackResponse, error)
	GetStickerPacks(ctx context.Context, in *GetStickerPacksRequest, opts ...grpc.CallOption) (*GetStickerPacksResponse, error)
	GetStickerPackByName(ctx context.Context, in *GetStickerPackByNameRequest, opts ...grpc.CallOption) (*GetStickerPackByNameResponse, error)
}

type stickerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStickerServiceClient(cc grpc.ClientConnInterface) StickerServiceClient {
	return &stickerServiceClient{cc}
}

func (c *stickerServiceClient) AddStickerPack(ctx context.Context, in *AddStickerPackRequest, opts ...grpc.CallOption) (*AddStickerPackResponse, error) {
	out := new(AddStickerPackResponse)
	err := c.cc.Invoke(ctx, "/chat_service.StickerService/AddStickerPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerServiceClient) GetStickerPack(ctx context.Context, in *GetStickerPackRequest, opts ...grpc.CallOption) (*GetStickerPackResponse, error) {
	out := new(GetStickerPackResponse)
	err := c.cc.Invoke(ctx, "/chat_service.StickerService/GetStickerPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerServiceClient) DeleteStickerPack(ctx context.Context, in *DeleteStickerPackRequest, opts ...grpc.CallOption) (*DeleteStickerPackResponse, error) {
	out := new(DeleteStickerPackResponse)
	err := c.cc.Invoke(ctx, "/chat_service.StickerService/DeleteStickerPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerServiceClient) GetStickerPacks(ctx context.Context, in *GetStickerPacksRequest, opts ...grpc.CallOption) (*GetStickerPacksResponse, error) {
	out := new(GetStickerPacksResponse)
	err := c.cc.Invoke(ctx, "/chat_service.StickerService/GetStickerPacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerServiceClient) GetStickerPackByName(ctx context.Context, in *GetStickerPackByNameRequest, opts ...grpc.CallOption) (*GetStickerPackByNameResponse, error) {
	out := new(GetStickerPackByNameResponse)
	err := c.cc.Invoke(ctx, "/chat_service.StickerService/GetStickerPackByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StickerServiceServer is the server API for StickerService service.
// All implementations must embed UnimplementedStickerServiceServer
// for forward compatibility
type StickerServiceServer interface {
	AddStickerPack(context.Context, *AddStickerPackRequest) (*AddStickerPackResponse, error)
	GetStickerPack(context.Context, *GetStickerPackRequest) (*GetStickerPackResponse, error)
	DeleteStickerPack(context.Context, *DeleteStickerPackRequest) (*DeleteStickerPackResponse, error)
	GetStickerPacks(context.Context, *GetStickerPacksRequest) (*GetStickerPacksResponse, error)
	GetStickerPackByName(context.Context, *GetStickerPackByNameRequest) (*GetStickerPackByNameResponse, error)
	mustEmbedUnimplementedStickerServiceServer()
}

// UnimplementedStickerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStickerServiceServer struct {
}

func (UnimplementedStickerServiceServer) AddStickerPack(context.Context, *AddStickerPackRequest) (*AddStickerPackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStickerPack not implemented")
}
func (UnimplementedStickerServiceServer) GetStickerPack(context.Context, *GetStickerPackRequest) (*GetStickerPackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStickerPack not implemented")
}
func (UnimplementedStickerServiceServer) DeleteStickerPack(context.Context, *DeleteStickerPackRequest) (*DeleteStickerPackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStickerPack not implemented")
}
func (UnimplementedStickerServiceServer) GetStickerPacks(context.Context, *GetStickerPacksRequest) (*GetStickerPacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStickerPacks not implemented")
}
func (UnimplementedStickerServiceServer) GetStickerPackByName(context.Context, *GetStickerPackByNameRequest) (*GetStickerPackByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStickerPackByName not implemented")
}
func (UnimplementedStickerServiceServer) mustEmbedUnimplementedStickerServiceServer() {}

// UnsafeStickerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StickerServiceServer will
// result in compilation errors.
type UnsafeStickerServiceServer interface {
	mustEmbedUnimplementedStickerServiceServer()
}

func RegisterStickerServiceServer(s grpc.ServiceRegistrar, srv StickerServiceServer) {
	s.RegisterService(&StickerService_ServiceDesc, srv)
}

func _StickerService_AddStickerPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStickerPackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerServiceServer).AddStickerPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_service.StickerService/AddStickerPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerServiceServer).AddStickerPack(ctx, req.(*AddStickerPackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerService_GetStickerPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerPackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerServiceServer).GetStickerPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_service.StickerService/GetStickerPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerServiceServer).GetStickerPack(ctx, req.(*GetStickerPackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerService_DeleteStickerPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerPackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerServiceServer).DeleteStickerPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_service.StickerService/DeleteStickerPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerServiceServer).DeleteStickerPack(ctx, req.(*DeleteStickerPackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerService_GetStickerPacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerPacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerServiceServer).GetStickerPacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_service.StickerService/GetStickerPacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerServiceServer).GetStickerPacks(ctx, req.(*GetStickerPacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerService_GetStickerPackByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerPackByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerServiceServer).GetStickerPackByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_service.StickerService/GetStickerPackByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerServiceServer).GetStickerPackByName(ctx, req.(*GetStickerPackByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StickerService_ServiceDesc is the grpc.ServiceDesc for StickerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StickerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_service.StickerService",
	HandlerType: (*StickerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStickerPack",
			Handler:    _StickerService_AddStickerPack_Handler,
		},
		{
			MethodName: "GetStickerPack",
			Handler:    _StickerService_GetStickerPack_Handler,
		},
		{
			MethodName: "DeleteStickerPack",
			Handler:    _StickerService_DeleteStickerPack_Handler,
		},
		{
			MethodName: "GetStickerPacks",
			Handler:    _StickerService_GetStickerPacks_Handler,
		},
		{
			MethodName: "GetStickerPackByName",
			Handler:    _StickerService_GetStickerPackByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sticker_service.proto",
}
