// Code generated by MockGen. DO NOT EDIT.
// Source: .//shared/proto/post_service/comment_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	proto "quickflow/shared/proto/post_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCommentServiceClient is a mock of CommentServiceClient interface.
type MockCommentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceClientMockRecorder
}

// MockCommentServiceClientMockRecorder is the mock recorder for MockCommentServiceClient.
type MockCommentServiceClientMockRecorder struct {
	mock *MockCommentServiceClient
}

// NewMockCommentServiceClient creates a new mock instance.
func NewMockCommentServiceClient(ctrl *gomock.Controller) *MockCommentServiceClient {
	mock := &MockCommentServiceClient{ctrl: ctrl}
	mock.recorder = &MockCommentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentServiceClient) EXPECT() *MockCommentServiceClientMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockCommentServiceClient) AddComment(ctx context.Context, in *proto.AddCommentRequest, opts ...grpc.CallOption) (*proto.AddCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddComment", varargs...)
	ret0, _ := ret[0].(*proto.AddCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockCommentServiceClientMockRecorder) AddComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockCommentServiceClient)(nil).AddComment), varargs...)
}

// DeleteComment mocks base method.
func (m *MockCommentServiceClient) DeleteComment(ctx context.Context, in *proto.DeleteCommentRequest, opts ...grpc.CallOption) (*proto.DeleteCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComment", varargs...)
	ret0, _ := ret[0].(*proto.DeleteCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentServiceClientMockRecorder) DeleteComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentServiceClient)(nil).DeleteComment), varargs...)
}

// FetchCommentsForPost mocks base method.
func (m *MockCommentServiceClient) FetchCommentsForPost(ctx context.Context, in *proto.FetchCommentsForPostRequest, opts ...grpc.CallOption) (*proto.FetchCommentsForPostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchCommentsForPost", varargs...)
	ret0, _ := ret[0].(*proto.FetchCommentsForPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCommentsForPost indicates an expected call of FetchCommentsForPost.
func (mr *MockCommentServiceClientMockRecorder) FetchCommentsForPost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCommentsForPost", reflect.TypeOf((*MockCommentServiceClient)(nil).FetchCommentsForPost), varargs...)
}

// GetComment mocks base method.
func (m *MockCommentServiceClient) GetComment(ctx context.Context, in *proto.GetCommentRequest, opts ...grpc.CallOption) (*proto.GetCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComment", varargs...)
	ret0, _ := ret[0].(*proto.GetCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockCommentServiceClientMockRecorder) GetComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentServiceClient)(nil).GetComment), varargs...)
}

// GetCommentFiles mocks base method.
func (m *MockCommentServiceClient) GetCommentFiles(ctx context.Context, in *proto.GetCommentFilesRequest, opts ...grpc.CallOption) (*proto.GetCommentFilesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentFiles", varargs...)
	ret0, _ := ret[0].(*proto.GetCommentFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentFiles indicates an expected call of GetCommentFiles.
func (mr *MockCommentServiceClientMockRecorder) GetCommentFiles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentFiles", reflect.TypeOf((*MockCommentServiceClient)(nil).GetCommentFiles), varargs...)
}

// GetLastPostComment mocks base method.
func (m *MockCommentServiceClient) GetLastPostComment(ctx context.Context, in *proto.GetLastPostCommentRequest, opts ...grpc.CallOption) (*proto.GetLastPostCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastPostComment", varargs...)
	ret0, _ := ret[0].(*proto.GetLastPostCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPostComment indicates an expected call of GetLastPostComment.
func (mr *MockCommentServiceClientMockRecorder) GetLastPostComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPostComment", reflect.TypeOf((*MockCommentServiceClient)(nil).GetLastPostComment), varargs...)
}

// LikeComment mocks base method.
func (m *MockCommentServiceClient) LikeComment(ctx context.Context, in *proto.LikeCommentRequest, opts ...grpc.CallOption) (*proto.LikeCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LikeComment", varargs...)
	ret0, _ := ret[0].(*proto.LikeCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeComment indicates an expected call of LikeComment.
func (mr *MockCommentServiceClientMockRecorder) LikeComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeComment", reflect.TypeOf((*MockCommentServiceClient)(nil).LikeComment), varargs...)
}

// UnlikeComment mocks base method.
func (m *MockCommentServiceClient) UnlikeComment(ctx context.Context, in *proto.UnlikeCommentRequest, opts ...grpc.CallOption) (*proto.UnlikeCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnlikeComment", varargs...)
	ret0, _ := ret[0].(*proto.UnlikeCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlikeComment indicates an expected call of UnlikeComment.
func (mr *MockCommentServiceClientMockRecorder) UnlikeComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeComment", reflect.TypeOf((*MockCommentServiceClient)(nil).UnlikeComment), varargs...)
}

// UpdateComment mocks base method.
func (m *MockCommentServiceClient) UpdateComment(ctx context.Context, in *proto.UpdateCommentRequest, opts ...grpc.CallOption) (*proto.UpdateCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateComment", varargs...)
	ret0, _ := ret[0].(*proto.UpdateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentServiceClientMockRecorder) UpdateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentServiceClient)(nil).UpdateComment), varargs...)
}

// MockCommentServiceServer is a mock of CommentServiceServer interface.
type MockCommentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceServerMockRecorder
}

// MockCommentServiceServerMockRecorder is the mock recorder for MockCommentServiceServer.
type MockCommentServiceServerMockRecorder struct {
	mock *MockCommentServiceServer
}

// NewMockCommentServiceServer creates a new mock instance.
func NewMockCommentServiceServer(ctrl *gomock.Controller) *MockCommentServiceServer {
	mock := &MockCommentServiceServer{ctrl: ctrl}
	mock.recorder = &MockCommentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentServiceServer) EXPECT() *MockCommentServiceServerMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockCommentServiceServer) AddComment(arg0 context.Context, arg1 *proto.AddCommentRequest) (*proto.AddCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockCommentServiceServerMockRecorder) AddComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockCommentServiceServer)(nil).AddComment), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockCommentServiceServer) DeleteComment(arg0 context.Context, arg1 *proto.DeleteCommentRequest) (*proto.DeleteCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentServiceServerMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentServiceServer)(nil).DeleteComment), arg0, arg1)
}

// FetchCommentsForPost mocks base method.
func (m *MockCommentServiceServer) FetchCommentsForPost(arg0 context.Context, arg1 *proto.FetchCommentsForPostRequest) (*proto.FetchCommentsForPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCommentsForPost", arg0, arg1)
	ret0, _ := ret[0].(*proto.FetchCommentsForPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCommentsForPost indicates an expected call of FetchCommentsForPost.
func (mr *MockCommentServiceServerMockRecorder) FetchCommentsForPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCommentsForPost", reflect.TypeOf((*MockCommentServiceServer)(nil).FetchCommentsForPost), arg0, arg1)
}

// GetComment mocks base method.
func (m *MockCommentServiceServer) GetComment(arg0 context.Context, arg1 *proto.GetCommentRequest) (*proto.GetCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockCommentServiceServerMockRecorder) GetComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentServiceServer)(nil).GetComment), arg0, arg1)
}

// GetCommentFiles mocks base method.
func (m *MockCommentServiceServer) GetCommentFiles(arg0 context.Context, arg1 *proto.GetCommentFilesRequest) (*proto.GetCommentFilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentFiles", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetCommentFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentFiles indicates an expected call of GetCommentFiles.
func (mr *MockCommentServiceServerMockRecorder) GetCommentFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentFiles", reflect.TypeOf((*MockCommentServiceServer)(nil).GetCommentFiles), arg0, arg1)
}

// GetLastPostComment mocks base method.
func (m *MockCommentServiceServer) GetLastPostComment(arg0 context.Context, arg1 *proto.GetLastPostCommentRequest) (*proto.GetLastPostCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPostComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetLastPostCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPostComment indicates an expected call of GetLastPostComment.
func (mr *MockCommentServiceServerMockRecorder) GetLastPostComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPostComment", reflect.TypeOf((*MockCommentServiceServer)(nil).GetLastPostComment), arg0, arg1)
}

// LikeComment mocks base method.
func (m *MockCommentServiceServer) LikeComment(arg0 context.Context, arg1 *proto.LikeCommentRequest) (*proto.LikeCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.LikeCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeComment indicates an expected call of LikeComment.
func (mr *MockCommentServiceServerMockRecorder) LikeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeComment", reflect.TypeOf((*MockCommentServiceServer)(nil).LikeComment), arg0, arg1)
}

// UnlikeComment mocks base method.
func (m *MockCommentServiceServer) UnlikeComment(arg0 context.Context, arg1 *proto.UnlikeCommentRequest) (*proto.UnlikeCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.UnlikeCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlikeComment indicates an expected call of UnlikeComment.
func (mr *MockCommentServiceServerMockRecorder) UnlikeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeComment", reflect.TypeOf((*MockCommentServiceServer)(nil).UnlikeComment), arg0, arg1)
}

// UpdateComment mocks base method.
func (m *MockCommentServiceServer) UpdateComment(arg0 context.Context, arg1 *proto.UpdateCommentRequest) (*proto.UpdateCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentServiceServerMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentServiceServer)(nil).UpdateComment), arg0, arg1)
}

// mustEmbedUnimplementedCommentServiceServer mocks base method.
func (m *MockCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCommentServiceServer")
}

// mustEmbedUnimplementedCommentServiceServer indicates an expected call of mustEmbedUnimplementedCommentServiceServer.
func (mr *MockCommentServiceServerMockRecorder) mustEmbedUnimplementedCommentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCommentServiceServer", reflect.TypeOf((*MockCommentServiceServer)(nil).mustEmbedUnimplementedCommentServiceServer))
}

// MockUnsafeCommentServiceServer is a mock of UnsafeCommentServiceServer interface.
type MockUnsafeCommentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCommentServiceServerMockRecorder
}

// MockUnsafeCommentServiceServerMockRecorder is the mock recorder for MockUnsafeCommentServiceServer.
type MockUnsafeCommentServiceServerMockRecorder struct {
	mock *MockUnsafeCommentServiceServer
}

// NewMockUnsafeCommentServiceServer creates a new mock instance.
func NewMockUnsafeCommentServiceServer(ctrl *gomock.Controller) *MockUnsafeCommentServiceServer {
	mock := &MockUnsafeCommentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCommentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCommentServiceServer) EXPECT() *MockUnsafeCommentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCommentServiceServer mocks base method.
func (m *MockUnsafeCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCommentServiceServer")
}

// mustEmbedUnimplementedCommentServiceServer indicates an expected call of mustEmbedUnimplementedCommentServiceServer.
func (mr *MockUnsafeCommentServiceServerMockRecorder) mustEmbedUnimplementedCommentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCommentServiceServer", reflect.TypeOf((*MockUnsafeCommentServiceServer)(nil).mustEmbedUnimplementedCommentServiceServer))
}
