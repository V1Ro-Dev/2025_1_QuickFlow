// Code generated by MockGen. DO NOT EDIT.
// Source: ./shared/proto/post_service/post_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	proto "quickflow/shared/proto/post_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPostServiceClient is a mock of PostServiceClient interface.
type MockPostServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceClientMockRecorder
}

// MockPostServiceClientMockRecorder is the mock recorder for MockPostServiceClient.
type MockPostServiceClientMockRecorder struct {
	mock *MockPostServiceClient
}

// NewMockPostServiceClient creates a new mock instance.
func NewMockPostServiceClient(ctrl *gomock.Controller) *MockPostServiceClient {
	mock := &MockPostServiceClient{ctrl: ctrl}
	mock.recorder = &MockPostServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceClient) EXPECT() *MockPostServiceClientMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockPostServiceClient) AddPost(ctx context.Context, in *proto.AddPostRequest, opts ...grpc.CallOption) (*proto.AddPostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPost", varargs...)
	ret0, _ := ret[0].(*proto.AddPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostServiceClientMockRecorder) AddPost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostServiceClient)(nil).AddPost), varargs...)
}

// DeletePost mocks base method.
func (m *MockPostServiceClient) DeletePost(ctx context.Context, in *proto.DeletePostRequest, opts ...grpc.CallOption) (*proto.DeletePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*proto.DeletePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostServiceClientMockRecorder) DeletePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostServiceClient)(nil).DeletePost), varargs...)
}

// FetchFeed mocks base method.
func (m *MockPostServiceClient) FetchFeed(ctx context.Context, in *proto.FetchFeedRequest, opts ...grpc.CallOption) (*proto.FetchFeedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchFeed", varargs...)
	ret0, _ := ret[0].(*proto.FetchFeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeed indicates an expected call of FetchFeed.
func (mr *MockPostServiceClientMockRecorder) FetchFeed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeed", reflect.TypeOf((*MockPostServiceClient)(nil).FetchFeed), varargs...)
}

// FetchRecommendations mocks base method.
func (m *MockPostServiceClient) FetchRecommendations(ctx context.Context, in *proto.FetchRecommendationsRequest, opts ...grpc.CallOption) (*proto.FetchRecommendationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchRecommendations", varargs...)
	ret0, _ := ret[0].(*proto.FetchRecommendationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRecommendations indicates an expected call of FetchRecommendations.
func (mr *MockPostServiceClientMockRecorder) FetchRecommendations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRecommendations", reflect.TypeOf((*MockPostServiceClient)(nil).FetchRecommendations), varargs...)
}

// FetchUserPosts mocks base method.
func (m *MockPostServiceClient) FetchUserPosts(ctx context.Context, in *proto.FetchUserPostsRequest, opts ...grpc.CallOption) (*proto.FetchUserPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchUserPosts", varargs...)
	ret0, _ := ret[0].(*proto.FetchUserPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserPosts indicates an expected call of FetchUserPosts.
func (mr *MockPostServiceClientMockRecorder) FetchUserPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserPosts", reflect.TypeOf((*MockPostServiceClient)(nil).FetchUserPosts), varargs...)
}

// GetPost mocks base method.
func (m *MockPostServiceClient) GetPost(ctx context.Context, in *proto.GetPostRequest, opts ...grpc.CallOption) (*proto.GetPostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPost", varargs...)
	ret0, _ := ret[0].(*proto.GetPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostServiceClientMockRecorder) GetPost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostServiceClient)(nil).GetPost), varargs...)
}

// LikePost mocks base method.
func (m *MockPostServiceClient) LikePost(ctx context.Context, in *proto.LikePostRequest, opts ...grpc.CallOption) (*proto.LikePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LikePost", varargs...)
	ret0, _ := ret[0].(*proto.LikePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikePost indicates an expected call of LikePost.
func (mr *MockPostServiceClientMockRecorder) LikePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockPostServiceClient)(nil).LikePost), varargs...)
}

// UnlikePost mocks base method.
func (m *MockPostServiceClient) UnlikePost(ctx context.Context, in *proto.UnlikePostRequest, opts ...grpc.CallOption) (*proto.UnlikePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnlikePost", varargs...)
	ret0, _ := ret[0].(*proto.UnlikePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlikePost indicates an expected call of UnlikePost.
func (mr *MockPostServiceClientMockRecorder) UnlikePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikePost", reflect.TypeOf((*MockPostServiceClient)(nil).UnlikePost), varargs...)
}

// UpdatePost mocks base method.
func (m *MockPostServiceClient) UpdatePost(ctx context.Context, in *proto.UpdatePostRequest, opts ...grpc.CallOption) (*proto.UpdatePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(*proto.UpdatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostServiceClientMockRecorder) UpdatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostServiceClient)(nil).UpdatePost), varargs...)
}

// MockPostServiceServer is a mock of PostServiceServer interface.
type MockPostServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceServerMockRecorder
}

// MockPostServiceServerMockRecorder is the mock recorder for MockPostServiceServer.
type MockPostServiceServerMockRecorder struct {
	mock *MockPostServiceServer
}

// NewMockPostServiceServer creates a new mock instance.
func NewMockPostServiceServer(ctrl *gomock.Controller) *MockPostServiceServer {
	mock := &MockPostServiceServer{ctrl: ctrl}
	mock.recorder = &MockPostServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceServer) EXPECT() *MockPostServiceServerMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockPostServiceServer) AddPost(arg0 context.Context, arg1 *proto.AddPostRequest) (*proto.AddPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostServiceServerMockRecorder) AddPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostServiceServer)(nil).AddPost), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockPostServiceServer) DeletePost(arg0 context.Context, arg1 *proto.DeletePostRequest) (*proto.DeletePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeletePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostServiceServerMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostServiceServer)(nil).DeletePost), arg0, arg1)
}

// FetchFeed mocks base method.
func (m *MockPostServiceServer) FetchFeed(arg0 context.Context, arg1 *proto.FetchFeedRequest) (*proto.FetchFeedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeed", arg0, arg1)
	ret0, _ := ret[0].(*proto.FetchFeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeed indicates an expected call of FetchFeed.
func (mr *MockPostServiceServerMockRecorder) FetchFeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeed", reflect.TypeOf((*MockPostServiceServer)(nil).FetchFeed), arg0, arg1)
}

// FetchRecommendations mocks base method.
func (m *MockPostServiceServer) FetchRecommendations(arg0 context.Context, arg1 *proto.FetchRecommendationsRequest) (*proto.FetchRecommendationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRecommendations", arg0, arg1)
	ret0, _ := ret[0].(*proto.FetchRecommendationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRecommendations indicates an expected call of FetchRecommendations.
func (mr *MockPostServiceServerMockRecorder) FetchRecommendations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRecommendations", reflect.TypeOf((*MockPostServiceServer)(nil).FetchRecommendations), arg0, arg1)
}

// FetchUserPosts mocks base method.
func (m *MockPostServiceServer) FetchUserPosts(arg0 context.Context, arg1 *proto.FetchUserPostsRequest) (*proto.FetchUserPostsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserPosts", arg0, arg1)
	ret0, _ := ret[0].(*proto.FetchUserPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserPosts indicates an expected call of FetchUserPosts.
func (mr *MockPostServiceServerMockRecorder) FetchUserPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserPosts", reflect.TypeOf((*MockPostServiceServer)(nil).FetchUserPosts), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockPostServiceServer) GetPost(arg0 context.Context, arg1 *proto.GetPostRequest) (*proto.GetPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostServiceServerMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostServiceServer)(nil).GetPost), arg0, arg1)
}

// LikePost mocks base method.
func (m *MockPostServiceServer) LikePost(arg0 context.Context, arg1 *proto.LikePostRequest) (*proto.LikePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.LikePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikePost indicates an expected call of LikePost.
func (mr *MockPostServiceServerMockRecorder) LikePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockPostServiceServer)(nil).LikePost), arg0, arg1)
}

// UnlikePost mocks base method.
func (m *MockPostServiceServer) UnlikePost(arg0 context.Context, arg1 *proto.UnlikePostRequest) (*proto.UnlikePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.UnlikePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlikePost indicates an expected call of UnlikePost.
func (mr *MockPostServiceServerMockRecorder) UnlikePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikePost", reflect.TypeOf((*MockPostServiceServer)(nil).UnlikePost), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockPostServiceServer) UpdatePost(arg0 context.Context, arg1 *proto.UpdatePostRequest) (*proto.UpdatePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostServiceServerMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostServiceServer)(nil).UpdatePost), arg0, arg1)
}

// mustEmbedUnimplementedPostServiceServer mocks base method.
func (m *MockPostServiceServer) mustEmbedUnimplementedPostServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostServiceServer")
}

// mustEmbedUnimplementedPostServiceServer indicates an expected call of mustEmbedUnimplementedPostServiceServer.
func (mr *MockPostServiceServerMockRecorder) mustEmbedUnimplementedPostServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostServiceServer", reflect.TypeOf((*MockPostServiceServer)(nil).mustEmbedUnimplementedPostServiceServer))
}

// MockUnsafePostServiceServer is a mock of UnsafePostServiceServer interface.
type MockUnsafePostServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePostServiceServerMockRecorder
}

// MockUnsafePostServiceServerMockRecorder is the mock recorder for MockUnsafePostServiceServer.
type MockUnsafePostServiceServerMockRecorder struct {
	mock *MockUnsafePostServiceServer
}

// NewMockUnsafePostServiceServer creates a new mock instance.
func NewMockUnsafePostServiceServer(ctrl *gomock.Controller) *MockUnsafePostServiceServer {
	mock := &MockUnsafePostServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePostServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePostServiceServer) EXPECT() *MockUnsafePostServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPostServiceServer mocks base method.
func (m *MockUnsafePostServiceServer) mustEmbedUnimplementedPostServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostServiceServer")
}

// mustEmbedUnimplementedPostServiceServer indicates an expected call of mustEmbedUnimplementedPostServiceServer.
func (mr *MockUnsafePostServiceServerMockRecorder) mustEmbedUnimplementedPostServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostServiceServer", reflect.TypeOf((*MockUnsafePostServiceServer)(nil).mustEmbedUnimplementedPostServiceServer))
}
