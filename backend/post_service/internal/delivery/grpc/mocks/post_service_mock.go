// Code generated by MockGen. DO NOT EDIT.
// Source: ./post_service/internal/delivery/grpc/post_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPostUseCase is a mock of PostUseCase interface.
type MockPostUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPostUseCaseMockRecorder
}

// MockPostUseCaseMockRecorder is the mock recorder for MockPostUseCase.
type MockPostUseCaseMockRecorder struct {
	mock *MockPostUseCase
}

// NewMockPostUseCase creates a new mock instance.
func NewMockPostUseCase(ctrl *gomock.Controller) *MockPostUseCase {
	mock := &MockPostUseCase{ctrl: ctrl}
	mock.recorder = &MockPostUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostUseCase) EXPECT() *MockPostUseCaseMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockPostUseCase) AddPost(ctx context.Context, post models.Post) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, post)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostUseCaseMockRecorder) AddPost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostUseCase)(nil).AddPost), ctx, post)
}

// DeletePost mocks base method.
func (m *MockPostUseCase) DeletePost(ctx context.Context, userId, postId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, userId, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostUseCaseMockRecorder) DeletePost(ctx, userId, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostUseCase)(nil).DeletePost), ctx, userId, postId)
}

// FetchFeed mocks base method.
func (m *MockPostUseCase) FetchFeed(ctx context.Context, userId uuid.UUID, numPosts int, timestamp time.Time) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeed", ctx, userId, numPosts, timestamp)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeed indicates an expected call of FetchFeed.
func (mr *MockPostUseCaseMockRecorder) FetchFeed(ctx, userId, numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeed", reflect.TypeOf((*MockPostUseCase)(nil).FetchFeed), ctx, userId, numPosts, timestamp)
}

// FetchRecommendations mocks base method.
func (m *MockPostUseCase) FetchRecommendations(ctx context.Context, userId uuid.UUID, numPosts int, timestamp time.Time) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRecommendations", ctx, userId, numPosts, timestamp)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRecommendations indicates an expected call of FetchRecommendations.
func (mr *MockPostUseCaseMockRecorder) FetchRecommendations(ctx, userId, numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRecommendations", reflect.TypeOf((*MockPostUseCase)(nil).FetchRecommendations), ctx, userId, numPosts, timestamp)
}

// FetchUserPosts mocks base method.
func (m *MockPostUseCase) FetchUserPosts(ctx context.Context, userId, requesterId uuid.UUID, numPosts int, timestamp time.Time) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserPosts", ctx, userId, requesterId, numPosts, timestamp)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserPosts indicates an expected call of FetchUserPosts.
func (mr *MockPostUseCaseMockRecorder) FetchUserPosts(ctx, userId, requesterId, numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserPosts", reflect.TypeOf((*MockPostUseCase)(nil).FetchUserPosts), ctx, userId, requesterId, numPosts, timestamp)
}

// GetPost mocks base method.
func (m *MockPostUseCase) GetPost(ctx context.Context, postId, userId uuid.UUID) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, postId, userId)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostUseCaseMockRecorder) GetPost(ctx, postId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostUseCase)(nil).GetPost), ctx, postId, userId)
}

// LikePost mocks base method.
func (m *MockPostUseCase) LikePost(ctx context.Context, postId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePost", ctx, postId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikePost indicates an expected call of LikePost.
func (mr *MockPostUseCaseMockRecorder) LikePost(ctx, postId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockPostUseCase)(nil).LikePost), ctx, postId, userId)
}

// UnlikePost mocks base method.
func (m *MockPostUseCase) UnlikePost(ctx context.Context, postId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikePost", ctx, postId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikePost indicates an expected call of UnlikePost.
func (mr *MockPostUseCaseMockRecorder) UnlikePost(ctx, postId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikePost", reflect.TypeOf((*MockPostUseCase)(nil).UnlikePost), ctx, postId, userId)
}

// UpdatePost mocks base method.
func (m *MockPostUseCase) UpdatePost(ctx context.Context, update models.PostUpdate, userId uuid.UUID) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, update, userId)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostUseCaseMockRecorder) UpdatePost(ctx, update, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostUseCase)(nil).UpdatePost), ctx, update, userId)
}

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserUseCase) GetUserById(ctx context.Context, userId uuid.UUID) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userId)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserUseCaseMockRecorder) GetUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserUseCase)(nil).GetUserById), ctx, userId)
}
