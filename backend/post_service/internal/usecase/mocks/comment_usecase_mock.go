// Code generated by MockGen. DO NOT EDIT.
// Source: .//post_service/internal/usecase/comment_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockCommentRepository) AddComment(ctx context.Context, comment models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockCommentRepositoryMockRecorder) AddComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockCommentRepository)(nil).AddComment), ctx, comment)
}

// CheckIfCommentLiked mocks base method.
func (m *MockCommentRepository) CheckIfCommentLiked(ctx context.Context, commentId, userId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfCommentLiked", ctx, commentId, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfCommentLiked indicates an expected call of CheckIfCommentLiked.
func (mr *MockCommentRepositoryMockRecorder) CheckIfCommentLiked(ctx, commentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfCommentLiked", reflect.TypeOf((*MockCommentRepository)(nil).CheckIfCommentLiked), ctx, commentId, userId)
}

// DeleteComment mocks base method.
func (m *MockCommentRepository) DeleteComment(ctx context.Context, commentId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentRepositoryMockRecorder) DeleteComment(ctx, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentRepository)(nil).DeleteComment), ctx, commentId)
}

// GetComment mocks base method.
func (m *MockCommentRepository) GetComment(ctx context.Context, commentId uuid.UUID) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, commentId)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockCommentRepositoryMockRecorder) GetComment(ctx, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentRepository)(nil).GetComment), ctx, commentId)
}

// GetCommentFiles mocks base method.
func (m *MockCommentRepository) GetCommentFiles(ctx context.Context, commentId uuid.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentFiles", ctx, commentId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentFiles indicates an expected call of GetCommentFiles.
func (mr *MockCommentRepositoryMockRecorder) GetCommentFiles(ctx, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentFiles", reflect.TypeOf((*MockCommentRepository)(nil).GetCommentFiles), ctx, commentId)
}

// GetCommentsForPost mocks base method.
func (m *MockCommentRepository) GetCommentsForPost(ctx context.Context, postId uuid.UUID, numComments int, timestamp time.Time) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForPost", ctx, postId, numComments, timestamp)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsForPost indicates an expected call of GetCommentsForPost.
func (mr *MockCommentRepositoryMockRecorder) GetCommentsForPost(ctx, postId, numComments, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForPost", reflect.TypeOf((*MockCommentRepository)(nil).GetCommentsForPost), ctx, postId, numComments, timestamp)
}

// GetLastPostComment mocks base method.
func (m *MockCommentRepository) GetLastPostComment(ctx context.Context, postId uuid.UUID) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPostComment", ctx, postId)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPostComment indicates an expected call of GetLastPostComment.
func (mr *MockCommentRepositoryMockRecorder) GetLastPostComment(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPostComment", reflect.TypeOf((*MockCommentRepository)(nil).GetLastPostComment), ctx, postId)
}

// LikeComment mocks base method.
func (m *MockCommentRepository) LikeComment(ctx context.Context, commentId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeComment", ctx, commentId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeComment indicates an expected call of LikeComment.
func (mr *MockCommentRepositoryMockRecorder) LikeComment(ctx, commentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeComment", reflect.TypeOf((*MockCommentRepository)(nil).LikeComment), ctx, commentId, userId)
}

// UnlikeComment mocks base method.
func (m *MockCommentRepository) UnlikeComment(ctx context.Context, commentId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeComment", ctx, commentId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeComment indicates an expected call of UnlikeComment.
func (mr *MockCommentRepositoryMockRecorder) UnlikeComment(ctx, commentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeComment", reflect.TypeOf((*MockCommentRepository)(nil).UnlikeComment), ctx, commentId, userId)
}

// UpdateComment mocks base method.
func (m *MockCommentRepository) UpdateComment(ctx context.Context, commentUpdate models.CommentUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, commentUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentRepositoryMockRecorder) UpdateComment(ctx, commentUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentRepository)(nil).UpdateComment), ctx, commentUpdate)
}
