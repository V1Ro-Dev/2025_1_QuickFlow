// Code generated by MockGen. DO NOT EDIT.
// Source: .//post_service/internal/usecase/post-usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPostValidator is a mock of PostValidator interface.
type MockPostValidator struct {
	ctrl     *gomock.Controller
	recorder *MockPostValidatorMockRecorder
}

// MockPostValidatorMockRecorder is the mock recorder for MockPostValidator.
type MockPostValidatorMockRecorder struct {
	mock *MockPostValidator
}

// NewMockPostValidator creates a new mock instance.
func NewMockPostValidator(ctrl *gomock.Controller) *MockPostValidator {
	mock := &MockPostValidator{ctrl: ctrl}
	mock.recorder = &MockPostValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostValidator) EXPECT() *MockPostValidatorMockRecorder {
	return m.recorder
}

// ValidateFeedParams mocks base method.
func (m *MockPostValidator) ValidateFeedParams(numPosts int, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateFeedParams", numPosts, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateFeedParams indicates an expected call of ValidateFeedParams.
func (mr *MockPostValidatorMockRecorder) ValidateFeedParams(numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateFeedParams", reflect.TypeOf((*MockPostValidator)(nil).ValidateFeedParams), numPosts, timestamp)
}

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockPostRepository) AddPost(ctx context.Context, post models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostRepositoryMockRecorder) AddPost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostRepository)(nil).AddPost), ctx, post)
}

// BelongsTo mocks base method.
func (m *MockPostRepository) BelongsTo(ctx context.Context, userId, postId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BelongsTo", ctx, userId, postId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BelongsTo indicates an expected call of BelongsTo.
func (mr *MockPostRepositoryMockRecorder) BelongsTo(ctx, userId, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BelongsTo", reflect.TypeOf((*MockPostRepository)(nil).BelongsTo), ctx, userId, postId)
}

// CheckIfPostLiked mocks base method.
func (m *MockPostRepository) CheckIfPostLiked(ctx context.Context, postId, userId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfPostLiked", ctx, postId, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfPostLiked indicates an expected call of CheckIfPostLiked.
func (mr *MockPostRepositoryMockRecorder) CheckIfPostLiked(ctx, postId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPostLiked", reflect.TypeOf((*MockPostRepository)(nil).CheckIfPostLiked), ctx, postId, userId)
}

// DeletePost mocks base method.
func (m *MockPostRepository) DeletePost(ctx context.Context, postId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepositoryMockRecorder) DeletePost(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepository)(nil).DeletePost), ctx, postId)
}

// GetPost mocks base method.
func (m *MockPostRepository) GetPost(ctx context.Context, postId uuid.UUID) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, postId)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostRepositoryMockRecorder) GetPost(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostRepository)(nil).GetPost), ctx, postId)
}

// GetPostFiles mocks base method.
func (m *MockPostRepository) GetPostFiles(ctx context.Context, postId uuid.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostFiles", ctx, postId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostFiles indicates an expected call of GetPostFiles.
func (mr *MockPostRepositoryMockRecorder) GetPostFiles(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostFiles", reflect.TypeOf((*MockPostRepository)(nil).GetPostFiles), ctx, postId)
}

// GetPostsForUId mocks base method.
func (m *MockPostRepository) GetPostsForUId(ctx context.Context, uid uuid.UUID, numPosts int, timestamp time.Time) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsForUId", ctx, uid, numPosts, timestamp)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsForUId indicates an expected call of GetPostsForUId.
func (mr *MockPostRepositoryMockRecorder) GetPostsForUId(ctx, uid, numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsForUId", reflect.TypeOf((*MockPostRepository)(nil).GetPostsForUId), ctx, uid, numPosts, timestamp)
}

// GetRecommendationsForUId mocks base method.
func (m *MockPostRepository) GetRecommendationsForUId(ctx context.Context, uid uuid.UUID, numPosts int, timestamp time.Time) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationsForUId", ctx, uid, numPosts, timestamp)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationsForUId indicates an expected call of GetRecommendationsForUId.
func (mr *MockPostRepositoryMockRecorder) GetRecommendationsForUId(ctx, uid, numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationsForUId", reflect.TypeOf((*MockPostRepository)(nil).GetRecommendationsForUId), ctx, uid, numPosts, timestamp)
}

// GetUserPosts mocks base method.
func (m *MockPostRepository) GetUserPosts(ctx context.Context, id, requesterId uuid.UUID, numPosts int, timestamp time.Time) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPosts", ctx, id, requesterId, numPosts, timestamp)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPosts indicates an expected call of GetUserPosts.
func (mr *MockPostRepositoryMockRecorder) GetUserPosts(ctx, id, requesterId, numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPosts", reflect.TypeOf((*MockPostRepository)(nil).GetUserPosts), ctx, id, requesterId, numPosts, timestamp)
}

// LikePost mocks base method.
func (m *MockPostRepository) LikePost(ctx context.Context, postId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePost", ctx, postId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikePost indicates an expected call of LikePost.
func (mr *MockPostRepositoryMockRecorder) LikePost(ctx, postId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockPostRepository)(nil).LikePost), ctx, postId, userId)
}

// UnlikePost mocks base method.
func (m *MockPostRepository) UnlikePost(ctx context.Context, postId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikePost", ctx, postId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikePost indicates an expected call of UnlikePost.
func (mr *MockPostRepositoryMockRecorder) UnlikePost(ctx, postId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikePost", reflect.TypeOf((*MockPostRepository)(nil).UnlikePost), ctx, postId, userId)
}

// UpdatePost mocks base method.
func (m *MockPostRepository) UpdatePost(ctx context.Context, postUpdate models.PostUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, postUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostRepositoryMockRecorder) UpdatePost(ctx, postUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostRepository)(nil).UpdatePost), ctx, postUpdate)
}

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileService) DeleteFile(ctx context.Context, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServiceMockRecorder) DeleteFile(ctx, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileService)(nil).DeleteFile), ctx, filename)
}

// UploadFile mocks base method.
func (m *MockFileService) UploadFile(ctx context.Context, file *models.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServiceMockRecorder) UploadFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileService)(nil).UploadFile), ctx, file)
}

// UploadManyFiles mocks base method.
func (m *MockFileService) UploadManyFiles(ctx context.Context, files []*models.File) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadManyFiles", ctx, files)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadManyFiles indicates an expected call of UploadManyFiles.
func (mr *MockFileServiceMockRecorder) UploadManyFiles(ctx, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadManyFiles", reflect.TypeOf((*MockFileService)(nil).UploadManyFiles), ctx, files)
}
