// Code generated by MockGen. DO NOT EDIT.
// Source: ./friends_service/internal/delivery/grpc/friends-service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockFriendsUseCase is a mock of FriendsUseCase interface.
type MockFriendsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFriendsUseCaseMockRecorder
}

// MockFriendsUseCaseMockRecorder is the mock recorder for MockFriendsUseCase.
type MockFriendsUseCaseMockRecorder struct {
	mock *MockFriendsUseCase
}

// NewMockFriendsUseCase creates a new mock instance.
func NewMockFriendsUseCase(ctrl *gomock.Controller) *MockFriendsUseCase {
	mock := &MockFriendsUseCase{ctrl: ctrl}
	mock.recorder = &MockFriendsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendsUseCase) EXPECT() *MockFriendsUseCaseMockRecorder {
	return m.recorder
}

// AcceptFriendRequest mocks base method.
func (m *MockFriendsUseCase) AcceptFriendRequest(ctx context.Context, senderID, receiverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendRequest", ctx, senderID, receiverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptFriendRequest indicates an expected call of AcceptFriendRequest.
func (mr *MockFriendsUseCaseMockRecorder) AcceptFriendRequest(ctx, senderID, receiverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendRequest", reflect.TypeOf((*MockFriendsUseCase)(nil).AcceptFriendRequest), ctx, senderID, receiverID)
}

// DeleteFriend mocks base method.
func (m *MockFriendsUseCase) DeleteFriend(ctx context.Context, user, friend string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriend", ctx, user, friend)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriend indicates an expected call of DeleteFriend.
func (mr *MockFriendsUseCaseMockRecorder) DeleteFriend(ctx, user, friend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriend", reflect.TypeOf((*MockFriendsUseCase)(nil).DeleteFriend), ctx, user, friend)
}

// GetFriendsInfo mocks base method.
func (m *MockFriendsUseCase) GetFriendsInfo(ctx context.Context, userID, limit, offset, reqType string) ([]models.FriendInfo, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsInfo", ctx, userID, limit, offset, reqType)
	ret0, _ := ret[0].([]models.FriendInfo)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFriendsInfo indicates an expected call of GetFriendsInfo.
func (mr *MockFriendsUseCaseMockRecorder) GetFriendsInfo(ctx, userID, limit, offset, reqType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsInfo", reflect.TypeOf((*MockFriendsUseCase)(nil).GetFriendsInfo), ctx, userID, limit, offset, reqType)
}

// GetUserRelation mocks base method.
func (m *MockFriendsUseCase) GetUserRelation(ctx context.Context, user1, user2 uuid.UUID) (models.UserRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRelation", ctx, user1, user2)
	ret0, _ := ret[0].(models.UserRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRelation indicates an expected call of GetUserRelation.
func (mr *MockFriendsUseCaseMockRecorder) GetUserRelation(ctx, user1, user2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRelation", reflect.TypeOf((*MockFriendsUseCase)(nil).GetUserRelation), ctx, user1, user2)
}

// IsExistsFriendRequest mocks base method.
func (m *MockFriendsUseCase) IsExistsFriendRequest(ctx context.Context, senderID, receiverID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistsFriendRequest", ctx, senderID, receiverID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistsFriendRequest indicates an expected call of IsExistsFriendRequest.
func (mr *MockFriendsUseCaseMockRecorder) IsExistsFriendRequest(ctx, senderID, receiverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistsFriendRequest", reflect.TypeOf((*MockFriendsUseCase)(nil).IsExistsFriendRequest), ctx, senderID, receiverID)
}

// MarkRead mocks base method.
func (m *MockFriendsUseCase) MarkRead(ctx context.Context, user1, user2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRead", ctx, user1, user2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRead indicates an expected call of MarkRead.
func (mr *MockFriendsUseCaseMockRecorder) MarkRead(ctx, user1, user2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRead", reflect.TypeOf((*MockFriendsUseCase)(nil).MarkRead), ctx, user1, user2)
}

// SendFriendRequest mocks base method.
func (m *MockFriendsUseCase) SendFriendRequest(ctx context.Context, senderID, receiverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFriendRequest", ctx, senderID, receiverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFriendRequest indicates an expected call of SendFriendRequest.
func (mr *MockFriendsUseCaseMockRecorder) SendFriendRequest(ctx, senderID, receiverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFriendRequest", reflect.TypeOf((*MockFriendsUseCase)(nil).SendFriendRequest), ctx, senderID, receiverID)
}

// Unfollow mocks base method.
func (m *MockFriendsUseCase) Unfollow(ctx context.Context, userID, friendID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", ctx, userID, friendID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockFriendsUseCaseMockRecorder) Unfollow(ctx, userID, friendID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockFriendsUseCase)(nil).Unfollow), ctx, userID, friendID)
}
