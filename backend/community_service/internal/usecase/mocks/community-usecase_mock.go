// Code generated by MockGen. DO NOT EDIT.
// Source: ./community_service/internal/usecase/community-usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCommunityRepository is a mock of CommunityRepository interface.
type MockCommunityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityRepositoryMockRecorder
}

// MockCommunityRepositoryMockRecorder is the mock recorder for MockCommunityRepository.
type MockCommunityRepositoryMockRecorder struct {
	mock *MockCommunityRepository
}

// NewMockCommunityRepository creates a new mock instance.
func NewMockCommunityRepository(ctrl *gomock.Controller) *MockCommunityRepository {
	mock := &MockCommunityRepository{ctrl: ctrl}
	mock.recorder = &MockCommunityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityRepository) EXPECT() *MockCommunityRepositoryMockRecorder {
	return m.recorder
}

// ChangeUserRole mocks base method.
func (m *MockCommunityRepository) ChangeUserRole(ctx context.Context, userId, communityId uuid.UUID, role models.CommunityRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserRole", ctx, userId, communityId, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserRole indicates an expected call of ChangeUserRole.
func (mr *MockCommunityRepositoryMockRecorder) ChangeUserRole(ctx, userId, communityId, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserRole", reflect.TypeOf((*MockCommunityRepository)(nil).ChangeUserRole), ctx, userId, communityId, role)
}

// CreateCommunity mocks base method.
func (m *MockCommunityRepository) CreateCommunity(ctx context.Context, community models.Community) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommunity", ctx, community)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommunity indicates an expected call of CreateCommunity.
func (mr *MockCommunityRepositoryMockRecorder) CreateCommunity(ctx, community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunity", reflect.TypeOf((*MockCommunityRepository)(nil).CreateCommunity), ctx, community)
}

// DeleteCommunity mocks base method.
func (m *MockCommunityRepository) DeleteCommunity(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunity", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommunity indicates an expected call of DeleteCommunity.
func (mr *MockCommunityRepositoryMockRecorder) DeleteCommunity(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunity", reflect.TypeOf((*MockCommunityRepository)(nil).DeleteCommunity), ctx, id)
}

// GetCommunityById mocks base method.
func (m *MockCommunityRepository) GetCommunityById(ctx context.Context, id uuid.UUID) (models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityById", ctx, id)
	ret0, _ := ret[0].(models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityById indicates an expected call of GetCommunityById.
func (mr *MockCommunityRepositoryMockRecorder) GetCommunityById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityById", reflect.TypeOf((*MockCommunityRepository)(nil).GetCommunityById), ctx, id)
}

// GetCommunityByName mocks base method.
func (m *MockCommunityRepository) GetCommunityByName(ctx context.Context, name string) (models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityByName", ctx, name)
	ret0, _ := ret[0].(models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityByName indicates an expected call of GetCommunityByName.
func (mr *MockCommunityRepositoryMockRecorder) GetCommunityByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityByName", reflect.TypeOf((*MockCommunityRepository)(nil).GetCommunityByName), ctx, name)
}

// GetCommunityMembers mocks base method.
func (m *MockCommunityRepository) GetCommunityMembers(ctx context.Context, id uuid.UUID, numMembers int, ts time.Time) ([]models.CommunityMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityMembers", ctx, id, numMembers, ts)
	ret0, _ := ret[0].([]models.CommunityMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityMembers indicates an expected call of GetCommunityMembers.
func (mr *MockCommunityRepositoryMockRecorder) GetCommunityMembers(ctx, id, numMembers, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityMembers", reflect.TypeOf((*MockCommunityRepository)(nil).GetCommunityMembers), ctx, id, numMembers, ts)
}

// GetControlledCommunities mocks base method.
func (m *MockCommunityRepository) GetControlledCommunities(ctx context.Context, userId uuid.UUID, count int, ts time.Time) ([]models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlledCommunities", ctx, userId, count, ts)
	ret0, _ := ret[0].([]models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlledCommunities indicates an expected call of GetControlledCommunities.
func (mr *MockCommunityRepositoryMockRecorder) GetControlledCommunities(ctx, userId, count, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlledCommunities", reflect.TypeOf((*MockCommunityRepository)(nil).GetControlledCommunities), ctx, userId, count, ts)
}

// GetUserCommunities mocks base method.
func (m *MockCommunityRepository) GetUserCommunities(ctx context.Context, userId uuid.UUID, count int, ts time.Time) ([]models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCommunities", ctx, userId, count, ts)
	ret0, _ := ret[0].([]models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCommunities indicates an expected call of GetUserCommunities.
func (mr *MockCommunityRepositoryMockRecorder) GetUserCommunities(ctx, userId, count, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCommunities", reflect.TypeOf((*MockCommunityRepository)(nil).GetUserCommunities), ctx, userId, count, ts)
}

// IsCommunityMember mocks base method.
func (m *MockCommunityRepository) IsCommunityMember(ctx context.Context, userId, communityId uuid.UUID) (bool, *models.CommunityRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommunityMember", ctx, userId, communityId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*models.CommunityRole)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsCommunityMember indicates an expected call of IsCommunityMember.
func (mr *MockCommunityRepositoryMockRecorder) IsCommunityMember(ctx, userId, communityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommunityMember", reflect.TypeOf((*MockCommunityRepository)(nil).IsCommunityMember), ctx, userId, communityId)
}

// JoinCommunity mocks base method.
func (m *MockCommunityRepository) JoinCommunity(ctx context.Context, member models.CommunityMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinCommunity", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinCommunity indicates an expected call of JoinCommunity.
func (mr *MockCommunityRepositoryMockRecorder) JoinCommunity(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinCommunity", reflect.TypeOf((*MockCommunityRepository)(nil).JoinCommunity), ctx, member)
}

// LeaveCommunity mocks base method.
func (m *MockCommunityRepository) LeaveCommunity(ctx context.Context, userId, communityId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveCommunity", ctx, userId, communityId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveCommunity indicates an expected call of LeaveCommunity.
func (mr *MockCommunityRepositoryMockRecorder) LeaveCommunity(ctx, userId, communityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCommunity", reflect.TypeOf((*MockCommunityRepository)(nil).LeaveCommunity), ctx, userId, communityId)
}

// SearchSimilarCommunities mocks base method.
func (m *MockCommunityRepository) SearchSimilarCommunities(ctx context.Context, name string, count int) ([]models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSimilarCommunities", ctx, name, count)
	ret0, _ := ret[0].([]models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSimilarCommunities indicates an expected call of SearchSimilarCommunities.
func (mr *MockCommunityRepositoryMockRecorder) SearchSimilarCommunities(ctx, name, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSimilarCommunities", reflect.TypeOf((*MockCommunityRepository)(nil).SearchSimilarCommunities), ctx, name, count)
}

// UpdateCommunityAvatar mocks base method.
func (m *MockCommunityRepository) UpdateCommunityAvatar(ctx context.Context, communityId uuid.UUID, avatarUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommunityAvatar", ctx, communityId, avatarUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommunityAvatar indicates an expected call of UpdateCommunityAvatar.
func (mr *MockCommunityRepositoryMockRecorder) UpdateCommunityAvatar(ctx, communityId, avatarUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunityAvatar", reflect.TypeOf((*MockCommunityRepository)(nil).UpdateCommunityAvatar), ctx, communityId, avatarUrl)
}

// UpdateCommunityCover mocks base method.
func (m *MockCommunityRepository) UpdateCommunityCover(ctx context.Context, communityId uuid.UUID, coverUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommunityCover", ctx, communityId, coverUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommunityCover indicates an expected call of UpdateCommunityCover.
func (mr *MockCommunityRepositoryMockRecorder) UpdateCommunityCover(ctx, communityId, coverUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunityCover", reflect.TypeOf((*MockCommunityRepository)(nil).UpdateCommunityCover), ctx, communityId, coverUrl)
}

// UpdateCommunityTextInfo mocks base method.
func (m *MockCommunityRepository) UpdateCommunityTextInfo(ctx context.Context, community models.Community) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommunityTextInfo", ctx, community)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommunityTextInfo indicates an expected call of UpdateCommunityTextInfo.
func (mr *MockCommunityRepositoryMockRecorder) UpdateCommunityTextInfo(ctx, community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunityTextInfo", reflect.TypeOf((*MockCommunityRepository)(nil).UpdateCommunityTextInfo), ctx, community)
}

// MockCommunityValidator is a mock of CommunityValidator interface.
type MockCommunityValidator struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityValidatorMockRecorder
}

// MockCommunityValidatorMockRecorder is the mock recorder for MockCommunityValidator.
type MockCommunityValidatorMockRecorder struct {
	mock *MockCommunityValidator
}

// NewMockCommunityValidator creates a new mock instance.
func NewMockCommunityValidator(ctrl *gomock.Controller) *MockCommunityValidator {
	mock := &MockCommunityValidator{ctrl: ctrl}
	mock.recorder = &MockCommunityValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityValidator) EXPECT() *MockCommunityValidatorMockRecorder {
	return m.recorder
}

// ValidateCommunity mocks base method.
func (m *MockCommunityValidator) ValidateCommunity(community *models.Community) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCommunity", community)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCommunity indicates an expected call of ValidateCommunity.
func (mr *MockCommunityValidatorMockRecorder) ValidateCommunity(community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCommunity", reflect.TypeOf((*MockCommunityValidator)(nil).ValidateCommunity), community)
}

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileService) DeleteFile(ctx context.Context, fileUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, fileUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServiceMockRecorder) DeleteFile(ctx, fileUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileService)(nil).DeleteFile), ctx, fileUrl)
}

// UploadFile mocks base method.
func (m *MockFileService) UploadFile(ctx context.Context, file *models.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServiceMockRecorder) UploadFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileService)(nil).UploadFile), ctx, file)
}
