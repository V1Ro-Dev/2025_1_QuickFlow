// Code generated by MockGen. DO NOT EDIT.
// Source: ./community_service/internal/delivery/grpc/community_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCommunityUseCase is a mock of CommunityUseCase interface.
type MockCommunityUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityUseCaseMockRecorder
}

// MockCommunityUseCaseMockRecorder is the mock recorder for MockCommunityUseCase.
type MockCommunityUseCaseMockRecorder struct {
	mock *MockCommunityUseCase
}

// NewMockCommunityUseCase creates a new mock instance.
func NewMockCommunityUseCase(ctrl *gomock.Controller) *MockCommunityUseCase {
	mock := &MockCommunityUseCase{ctrl: ctrl}
	mock.recorder = &MockCommunityUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityUseCase) EXPECT() *MockCommunityUseCaseMockRecorder {
	return m.recorder
}

// ChangeUserRole mocks base method.
func (m *MockCommunityUseCase) ChangeUserRole(ctx context.Context, userId, communityId uuid.UUID, role models.CommunityRole, requester uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserRole", ctx, userId, communityId, role, requester)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserRole indicates an expected call of ChangeUserRole.
func (mr *MockCommunityUseCaseMockRecorder) ChangeUserRole(ctx, userId, communityId, role, requester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserRole", reflect.TypeOf((*MockCommunityUseCase)(nil).ChangeUserRole), ctx, userId, communityId, role, requester)
}

// CreateCommunity mocks base method.
func (m *MockCommunityUseCase) CreateCommunity(ctx context.Context, community models.Community) (*models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommunity", ctx, community)
	ret0, _ := ret[0].(*models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommunity indicates an expected call of CreateCommunity.
func (mr *MockCommunityUseCaseMockRecorder) CreateCommunity(ctx, community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunity", reflect.TypeOf((*MockCommunityUseCase)(nil).CreateCommunity), ctx, community)
}

// DeleteCommunity mocks base method.
func (m *MockCommunityUseCase) DeleteCommunity(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunity", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommunity indicates an expected call of DeleteCommunity.
func (mr *MockCommunityUseCaseMockRecorder) DeleteCommunity(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunity", reflect.TypeOf((*MockCommunityUseCase)(nil).DeleteCommunity), ctx, id)
}

// GetCommunityById mocks base method.
func (m *MockCommunityUseCase) GetCommunityById(ctx context.Context, id uuid.UUID) (models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityById", ctx, id)
	ret0, _ := ret[0].(models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityById indicates an expected call of GetCommunityById.
func (mr *MockCommunityUseCaseMockRecorder) GetCommunityById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityById", reflect.TypeOf((*MockCommunityUseCase)(nil).GetCommunityById), ctx, id)
}

// GetCommunityByName mocks base method.
func (m *MockCommunityUseCase) GetCommunityByName(ctx context.Context, name string) (models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityByName", ctx, name)
	ret0, _ := ret[0].(models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityByName indicates an expected call of GetCommunityByName.
func (mr *MockCommunityUseCaseMockRecorder) GetCommunityByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityByName", reflect.TypeOf((*MockCommunityUseCase)(nil).GetCommunityByName), ctx, name)
}

// GetCommunityMembers mocks base method.
func (m *MockCommunityUseCase) GetCommunityMembers(ctx context.Context, id uuid.UUID, numMembers int, ts time.Time) ([]models.CommunityMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityMembers", ctx, id, numMembers, ts)
	ret0, _ := ret[0].([]models.CommunityMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityMembers indicates an expected call of GetCommunityMembers.
func (mr *MockCommunityUseCaseMockRecorder) GetCommunityMembers(ctx, id, numMembers, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityMembers", reflect.TypeOf((*MockCommunityUseCase)(nil).GetCommunityMembers), ctx, id, numMembers, ts)
}

// GetControlledCommunities mocks base method.
func (m *MockCommunityUseCase) GetControlledCommunities(ctx context.Context, userId uuid.UUID, count int, ts time.Time) ([]models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlledCommunities", ctx, userId, count, ts)
	ret0, _ := ret[0].([]models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlledCommunities indicates an expected call of GetControlledCommunities.
func (mr *MockCommunityUseCaseMockRecorder) GetControlledCommunities(ctx, userId, count, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlledCommunities", reflect.TypeOf((*MockCommunityUseCase)(nil).GetControlledCommunities), ctx, userId, count, ts)
}

// GetUserCommunities mocks base method.
func (m *MockCommunityUseCase) GetUserCommunities(ctx context.Context, userId uuid.UUID, count int, ts time.Time) ([]models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCommunities", ctx, userId, count, ts)
	ret0, _ := ret[0].([]models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCommunities indicates an expected call of GetUserCommunities.
func (mr *MockCommunityUseCaseMockRecorder) GetUserCommunities(ctx, userId, count, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCommunities", reflect.TypeOf((*MockCommunityUseCase)(nil).GetUserCommunities), ctx, userId, count, ts)
}

// IsCommunityMember mocks base method.
func (m *MockCommunityUseCase) IsCommunityMember(ctx context.Context, userId, communityId uuid.UUID) (bool, *models.CommunityRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommunityMember", ctx, userId, communityId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*models.CommunityRole)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsCommunityMember indicates an expected call of IsCommunityMember.
func (mr *MockCommunityUseCaseMockRecorder) IsCommunityMember(ctx, userId, communityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommunityMember", reflect.TypeOf((*MockCommunityUseCase)(nil).IsCommunityMember), ctx, userId, communityId)
}

// JoinCommunity mocks base method.
func (m *MockCommunityUseCase) JoinCommunity(ctx context.Context, member models.CommunityMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinCommunity", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinCommunity indicates an expected call of JoinCommunity.
func (mr *MockCommunityUseCaseMockRecorder) JoinCommunity(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinCommunity", reflect.TypeOf((*MockCommunityUseCase)(nil).JoinCommunity), ctx, member)
}

// LeaveCommunity mocks base method.
func (m *MockCommunityUseCase) LeaveCommunity(ctx context.Context, userId, communityId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveCommunity", ctx, userId, communityId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveCommunity indicates an expected call of LeaveCommunity.
func (mr *MockCommunityUseCaseMockRecorder) LeaveCommunity(ctx, userId, communityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCommunity", reflect.TypeOf((*MockCommunityUseCase)(nil).LeaveCommunity), ctx, userId, communityId)
}

// SearchSimilarCommunities mocks base method.
func (m *MockCommunityUseCase) SearchSimilarCommunities(ctx context.Context, name string, count int) ([]models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSimilarCommunities", ctx, name, count)
	ret0, _ := ret[0].([]models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSimilarCommunities indicates an expected call of SearchSimilarCommunities.
func (mr *MockCommunityUseCaseMockRecorder) SearchSimilarCommunities(ctx, name, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSimilarCommunities", reflect.TypeOf((*MockCommunityUseCase)(nil).SearchSimilarCommunities), ctx, name, count)
}

// UpdateCommunity mocks base method.
func (m *MockCommunityUseCase) UpdateCommunity(ctx context.Context, community models.Community, userId uuid.UUID) (*models.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommunity", ctx, community, userId)
	ret0, _ := ret[0].(*models.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCommunity indicates an expected call of UpdateCommunity.
func (mr *MockCommunityUseCaseMockRecorder) UpdateCommunity(ctx, community, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunity", reflect.TypeOf((*MockCommunityUseCase)(nil).UpdateCommunity), ctx, community, userId)
}

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserUseCase) GetUserById(ctx context.Context, userId uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userId)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserUseCaseMockRecorder) GetUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserUseCase)(nil).GetUserById), ctx, userId)
}
