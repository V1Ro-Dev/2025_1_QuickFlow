// Code generated by MockGen. DO NOT EDIT.
// Source: ./feedback_service/internal/usecase/feedback-usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockFeedbackRepository is a mock of FeedbackRepository interface.
type MockFeedbackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackRepositoryMockRecorder
}

// MockFeedbackRepositoryMockRecorder is the mock recorder for MockFeedbackRepository.
type MockFeedbackRepositoryMockRecorder struct {
	mock *MockFeedbackRepository
}

// NewMockFeedbackRepository creates a new mock instance.
func NewMockFeedbackRepository(ctrl *gomock.Controller) *MockFeedbackRepository {
	mock := &MockFeedbackRepository{ctrl: ctrl}
	mock.recorder = &MockFeedbackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackRepository) EXPECT() *MockFeedbackRepositoryMockRecorder {
	return m.recorder
}

// GetAllFeedbackType mocks base method.
func (m *MockFeedbackRepository) GetAllFeedbackType(ctx context.Context, feedbackType models.FeedbackType, ts time.Time, count int) ([]models.Feedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFeedbackType", ctx, feedbackType, ts, count)
	ret0, _ := ret[0].([]models.Feedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFeedbackType indicates an expected call of GetAllFeedbackType.
func (mr *MockFeedbackRepositoryMockRecorder) GetAllFeedbackType(ctx, feedbackType, ts, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFeedbackType", reflect.TypeOf((*MockFeedbackRepository)(nil).GetAllFeedbackType), ctx, feedbackType, ts, count)
}

// GetAverageRatingType mocks base method.
func (m *MockFeedbackRepository) GetAverageRatingType(ctx context.Context, feedbackType models.FeedbackType) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageRatingType", ctx, feedbackType)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageRatingType indicates an expected call of GetAverageRatingType.
func (mr *MockFeedbackRepositoryMockRecorder) GetAverageRatingType(ctx, feedbackType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageRatingType", reflect.TypeOf((*MockFeedbackRepository)(nil).GetAverageRatingType), ctx, feedbackType)
}

// GetNumMessagesSent mocks base method.
func (m *MockFeedbackRepository) GetNumMessagesSent(ctx context.Context, userId uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumMessagesSent", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumMessagesSent indicates an expected call of GetNumMessagesSent.
func (mr *MockFeedbackRepositoryMockRecorder) GetNumMessagesSent(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumMessagesSent", reflect.TypeOf((*MockFeedbackRepository)(nil).GetNumMessagesSent), ctx, userId)
}

// GetNumPostsCreated mocks base method.
func (m *MockFeedbackRepository) GetNumPostsCreated(ctx context.Context, userId uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumPostsCreated", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumPostsCreated indicates an expected call of GetNumPostsCreated.
func (mr *MockFeedbackRepositoryMockRecorder) GetNumPostsCreated(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumPostsCreated", reflect.TypeOf((*MockFeedbackRepository)(nil).GetNumPostsCreated), ctx, userId)
}

// GetNumProfileChanges mocks base method.
func (m *MockFeedbackRepository) GetNumProfileChanges(ctx context.Context, userId uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumProfileChanges", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumProfileChanges indicates an expected call of GetNumProfileChanges.
func (mr *MockFeedbackRepositoryMockRecorder) GetNumProfileChanges(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumProfileChanges", reflect.TypeOf((*MockFeedbackRepository)(nil).GetNumProfileChanges), ctx, userId)
}

// SaveFeedback mocks base method.
func (m *MockFeedbackRepository) SaveFeedback(ctx context.Context, feedback *models.Feedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFeedback", ctx, feedback)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFeedback indicates an expected call of SaveFeedback.
func (mr *MockFeedbackRepositoryMockRecorder) SaveFeedback(ctx, feedback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFeedback", reflect.TypeOf((*MockFeedbackRepository)(nil).SaveFeedback), ctx, feedback)
}
