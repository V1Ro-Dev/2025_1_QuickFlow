// Code generated by MockGen. DO NOT EDIT.
// Source: .//feedback_service/internal/delivery/grpc/feedback_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockFeedbackService is a mock of FeedbackService interface.
type MockFeedbackService struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackServiceMockRecorder
}

// MockFeedbackServiceMockRecorder is the mock recorder for MockFeedbackService.
type MockFeedbackServiceMockRecorder struct {
	mock *MockFeedbackService
}

// NewMockFeedbackService creates a new mock instance.
func NewMockFeedbackService(ctrl *gomock.Controller) *MockFeedbackService {
	mock := &MockFeedbackService{ctrl: ctrl}
	mock.recorder = &MockFeedbackServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackService) EXPECT() *MockFeedbackServiceMockRecorder {
	return m.recorder
}

// GetAllFeedbackType mocks base method.
func (m *MockFeedbackService) GetAllFeedbackType(ctx context.Context, feedbackType models.FeedbackType, ts time.Time, count int) ([]models.Feedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFeedbackType", ctx, feedbackType, ts, count)
	ret0, _ := ret[0].([]models.Feedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFeedbackType indicates an expected call of GetAllFeedbackType.
func (mr *MockFeedbackServiceMockRecorder) GetAllFeedbackType(ctx, feedbackType, ts, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFeedbackType", reflect.TypeOf((*MockFeedbackService)(nil).GetAllFeedbackType), ctx, feedbackType, ts, count)
}

// GetNumMessagesSent mocks base method.
func (m *MockFeedbackService) GetNumMessagesSent(ctx context.Context, userId uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumMessagesSent", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumMessagesSent indicates an expected call of GetNumMessagesSent.
func (mr *MockFeedbackServiceMockRecorder) GetNumMessagesSent(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumMessagesSent", reflect.TypeOf((*MockFeedbackService)(nil).GetNumMessagesSent), ctx, userId)
}

// GetNumPostsCreated mocks base method.
func (m *MockFeedbackService) GetNumPostsCreated(ctx context.Context, userId uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumPostsCreated", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumPostsCreated indicates an expected call of GetNumPostsCreated.
func (mr *MockFeedbackServiceMockRecorder) GetNumPostsCreated(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumPostsCreated", reflect.TypeOf((*MockFeedbackService)(nil).GetNumPostsCreated), ctx, userId)
}

// GetNumProfileChanges mocks base method.
func (m *MockFeedbackService) GetNumProfileChanges(ctx context.Context, userId uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumProfileChanges", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumProfileChanges indicates an expected call of GetNumProfileChanges.
func (mr *MockFeedbackServiceMockRecorder) GetNumProfileChanges(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumProfileChanges", reflect.TypeOf((*MockFeedbackService)(nil).GetNumProfileChanges), ctx, userId)
}

// SaveFeedback mocks base method.
func (m *MockFeedbackService) SaveFeedback(ctx context.Context, feedback *models.Feedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFeedback", ctx, feedback)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFeedback indicates an expected call of SaveFeedback.
func (mr *MockFeedbackServiceMockRecorder) SaveFeedback(ctx, feedback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFeedback", reflect.TypeOf((*MockFeedbackService)(nil).SaveFeedback), ctx, feedback)
}

// MockProfileService is a mock of ProfileService interface.
type MockProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceMockRecorder
}

// MockProfileServiceMockRecorder is the mock recorder for MockProfileService.
type MockProfileServiceMockRecorder struct {
	mock *MockProfileService
}

// NewMockProfileService creates a new mock instance.
func NewMockProfileService(ctrl *gomock.Controller) *MockProfileService {
	mock := &MockProfileService{ctrl: ctrl}
	mock.recorder = &MockProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileService) EXPECT() *MockProfileServiceMockRecorder {
	return m.recorder
}

// GetPublicUserInfo mocks base method.
func (m *MockProfileService) GetPublicUserInfo(ctx context.Context, userId uuid.UUID) (models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicUserInfo", ctx, userId)
	ret0, _ := ret[0].(models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicUserInfo indicates an expected call of GetPublicUserInfo.
func (mr *MockProfileServiceMockRecorder) GetPublicUserInfo(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicUserInfo", reflect.TypeOf((*MockProfileService)(nil).GetPublicUserInfo), ctx, userId)
}
