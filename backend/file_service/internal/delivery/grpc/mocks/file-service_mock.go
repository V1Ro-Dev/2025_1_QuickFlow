// Code generated by MockGen. DO NOT EDIT.
// Source: .//file_service/internal/delivery/grpc/file-service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/shared/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileUseCase is a mock of FileUseCase interface.
type MockFileUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFileUseCaseMockRecorder
}

// MockFileUseCaseMockRecorder is the mock recorder for MockFileUseCase.
type MockFileUseCaseMockRecorder struct {
	mock *MockFileUseCase
}

// NewMockFileUseCase creates a new mock instance.
func NewMockFileUseCase(ctrl *gomock.Controller) *MockFileUseCase {
	mock := &MockFileUseCase{ctrl: ctrl}
	mock.recorder = &MockFileUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUseCase) EXPECT() *MockFileUseCaseMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileUseCase) DeleteFile(ctx context.Context, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileUseCaseMockRecorder) DeleteFile(ctx, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileUseCase)(nil).DeleteFile), ctx, filename)
}

// UploadFile mocks base method.
func (m *MockFileUseCase) UploadFile(ctx context.Context, fileModel *models.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, fileModel)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileUseCaseMockRecorder) UploadFile(ctx, fileModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileUseCase)(nil).UploadFile), ctx, fileModel)
}

// UploadManyMedia mocks base method.
func (m *MockFileUseCase) UploadManyMedia(ctx context.Context, files []*models.File) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadManyMedia", ctx, files)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadManyMedia indicates an expected call of UploadManyMedia.
func (mr *MockFileUseCaseMockRecorder) UploadManyMedia(ctx, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadManyMedia", reflect.TypeOf((*MockFileUseCase)(nil).UploadManyMedia), ctx, files)
}
