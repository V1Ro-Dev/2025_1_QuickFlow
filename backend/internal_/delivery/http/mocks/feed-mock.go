// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/http/feed-handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "quickflow/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPostUseCase is a mock of PostUseCase interface.
type MockPostUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPostUseCaseMockRecorder
}

// MockPostUseCaseMockRecorder is the mock recorder for MockPostUseCase.
type MockPostUseCaseMockRecorder struct {
	mock *MockPostUseCase
}

// NewMockPostUseCase creates a new mock instance.
func NewMockPostUseCase(ctrl *gomock.Controller) *MockPostUseCase {
	mock := &MockPostUseCase{ctrl: ctrl}
	mock.recorder = &MockPostUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostUseCase) EXPECT() *MockPostUseCaseMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockPostUseCase) AddPost(ctx context.Context, post models.Post) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, post)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostUseCaseMockRecorder) AddPost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostUseCase)(nil).AddPost), ctx, post)
}

// DeletePost mocks base method.
func (m *MockPostUseCase) DeletePost(ctx context.Context, user models.User, postId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, user, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostUseCaseMockRecorder) DeletePost(ctx, user, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostUseCase)(nil).DeletePost), ctx, user, postId)
}

// FetchFeed mocks base method.
func (m *MockPostUseCase) FetchFeed(ctx context.Context, user models.User, numPosts int, timestamp time.Time) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeed", ctx, user, numPosts, timestamp)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeed indicates an expected call of FetchFeed.
func (mr *MockPostUseCaseMockRecorder) FetchFeed(ctx, user, numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeed", reflect.TypeOf((*MockPostUseCase)(nil).FetchFeed), ctx, user, numPosts, timestamp)
}

// FetchRecommendations mocks base method.
func (m *MockPostUseCase) FetchRecommendations(ctx context.Context, user models.User, numPosts int, timestamp time.Time) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRecommendations", ctx, user, numPosts, timestamp)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRecommendations indicates an expected call of FetchRecommendations.
func (mr *MockPostUseCaseMockRecorder) FetchRecommendations(ctx, user, numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRecommendations", reflect.TypeOf((*MockPostUseCase)(nil).FetchRecommendations), ctx, user, numPosts, timestamp)
}

// FetchUserPosts mocks base method.
func (m *MockPostUseCase) FetchUserPosts(ctx context.Context, user models.User, numPosts int, timestamp time.Time) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserPosts", ctx, user, numPosts, timestamp)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserPosts indicates an expected call of FetchUserPosts.
func (mr *MockPostUseCaseMockRecorder) FetchUserPosts(ctx, user, numPosts, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserPosts", reflect.TypeOf((*MockPostUseCase)(nil).FetchUserPosts), ctx, user, numPosts, timestamp)
}

// UpdatePost mocks base method.
func (m *MockPostUseCase) UpdatePost(ctx context.Context, update models.PostUpdate, userId uuid.UUID) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, update, userId)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostUseCaseMockRecorder) UpdatePost(ctx, update, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostUseCase)(nil).UpdatePost), ctx, update, userId)
}
